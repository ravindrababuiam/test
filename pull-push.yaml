name: pull-images_$(Date:yyyyMMdd)$(Rev:r)

trigger: none

parameters:
  - name: input_file_private
    displayName: 'List Name With Private Images'
    default: 'private_images'
  - name: input_file_public
    displayName: 'List Name With Public Images'
    default: 'public_images'
  - name: privateRegistry
    displayName: 'Private Registry'
    default: 'registry.opentext.com'
  - name: publicRegistry
    displayName: 'Public Registry'
    default: 'docker.io'
  - name: targetRegistry
    displayName: 'Target Registry'
    default: 'nsnakscontregcem001.azurecr.io'

variables:
  - group: dev_group
  - name: RunPrivate
    value: "true"
  - name: RunPublic
    value: "true"

stages:
  - stage: pull_private_images
    displayName: 'Pull Private Images'
    condition: eq(variables['RunPrivate'], 'true')
    jobs:
      - job: pull_private
        displayName: 'Pull and Push Private Images'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - script: |
              echo "Converting Windows line endings for private images file"
              sed -i 's/\r$//' ${{ parameters.input_file_private }}.txt
            displayName: 'Convert Line Endings (Private)'

          - script: |
              echo "Logging into Private Registry: ${{ parameters.privateRegistry }}"
              echo "$(PRIVATE_REGISTRY_PASSWORD)" | docker login ${{ parameters.privateRegistry }} -u "$(PRIVATE_REGISTRY_USERNAME)" --password-stdin
            displayName: 'Docker Login to Private Registry'
            env:
              PRIVATE_REGISTRY_USERNAME: $(PRIVATE_REGISTRY_USERNAME)
              PRIVATE_REGISTRY_PASSWORD: $(PRIVATE_REGISTRY_PASSWORD)

          - script: |
              echo "Pulling private images..."
              while IFS= read -r line || [[ -n "$line" ]]; do
                image=$(echo "$line" | xargs)
                if [ -z "$image" ]; then
                  continue
                fi
                echo "Pulling image: $image"
                docker pull ${{ parameters.privateRegistry }}/$image || { echo "Error: Failed to pull image: $image"; exit 1; }
              done < ${{ parameters.input_file_private }}.txt
              echo "Listing local Docker images:"
              docker images
            displayName: 'Docker Pull (Private)'

          - task: Docker@2
            displayName: 'Docker Login to Target Registry (ACR)'
            inputs:
              command: login
              containerRegistry: 'nsnakscontregcem001'

          - script: |
              echo "Tagging and pushing private images..."
              while IFS= read -r line || [[ -n "$line" ]]; do
                image=$(echo "$line" | xargs)
                if [ -z "$image" ]; then
                  continue
                fi
                echo "Tagging image: $image"
                docker tag ${{ parameters.privateRegistry }}/$image ${{ parameters.targetRegistry }}/$image
                echo "Pushing image: $image"
                docker push ${{ parameters.targetRegistry }}/$image || { echo "Error: Failed to push image: $image"; exit 1; }
              done < ${{ parameters.input_file_private }}.txt
              echo "Listing local Docker images:"
              docker images
            displayName: 'Docker Tag and Push (Private)'

  - stage: pull_public_images
    displayName: 'Pull Public Images'
    condition: eq(variables['RunPublic'], 'true')
    jobs:
      - job: pull_public
        displayName: 'Pull and Push Public Images'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - script: |
              echo "Converting Windows line endings for public images file"
              sed -i 's/\r$//' ${{ parameters.input_file_public }}.txt
            displayName: 'Convert Line Endings (Public)'

          - script: |
              echo "Pulling public images..."
              while IFS= read -r line || [[ -n "$line" ]]; do
                image=$(echo "$line" | xargs)
                if [ -z "$image" ]; then
                  continue
                fi
                echo "Pulling image: $image"
                docker pull ${{ parameters.publicRegistry }}/$image || { echo "Error: Failed to pull image: $image"; exit 1; }
              done < ${{ parameters.input_file_public }}.txt
              echo "Listing local Docker images:"
              docker images
            displayName: 'Docker Pull (Public)'

          - task: Docker@2
            displayName: 'Docker Login to Target Registry (ACR)'
            inputs:
              command: login
              containerRegistry: 'nsnakscontregcem001'

          - script: |
              echo "Tagging and pushing public images..."
              while IFS= read -r line || [[ -n "$line" ]]; do
                image=$(echo "$line" | xargs)
                if [ -z "$image" ]; then
                  continue
                fi
                echo "Tagging image: $image"
                docker tag ${{ parameters.publicRegistry }}/$image ${{ parameters.targetRegistry }}/$image
                echo "Pushing image: $image"
                docker push ${{ parameters.targetRegistry }}/$image || { echo "Error: Failed to push image: $image"; exit 1; }
              done < ${{ parameters.input_file_public }}.txt
              echo "Listing local Docker images:"
              docker images
            displayName: 'Docker Tag and Push (Public)'



