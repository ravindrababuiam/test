{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ukw-adf-d365int-core-dev"
		},
		"LS_BlobStorage_MI_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "@{linkedService().ls_prm_blob_mi}"
		},
		"LS_BlobStorage_MI_properties_typeProperties_accountKind": {
			"type": "string",
			"defaultValue": "StorageV2"
		},
		"LS_FO_Blob_properties_typeProperties_sasUri": {
			"type": "string",
			"defaultValue": "@{linkedService().BlobURI}?**********"
		},
		"LS_Paragon_AzureKeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "@{linkedService().ParagonAzureKeyVault}"
		},
		"LS_Paragon_BlobStorage_MI_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "@{linkedService().ls_paragon_blob_mi}"
		},
		"LS_Paragon_BlobStorage_MI_properties_typeProperties_accountKind": {
			"type": "string",
			"defaultValue": "StorageV2"
		},
		"LS_VM_FileShare_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "@{linkedService().OnPremHost}"
		},
		"LS_VM_FileShare_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "@{linkedService().OnPremUserName}"
		},
		"default_properties_ConfigurationContainer_value": {
			"type": "string",
			"defaultValue": "adf-config-files-core"
		},
		"default_properties_GeneralJournalAzureKeyVault_value": {
			"type": "string",
			"defaultValue": "https://ukw-akv-d365int-gj-dev.vault.azure.net/"
		},
		"default_properties_SelfBillingAzureKeyVault_value": {
			"type": "string",
			"defaultValue": "https://ukw-akv-d365int-sb-dev.vault.azure.net/"
		},
		"default_properties_FreeTextInvoiceAzureKeyVault_value": {
			"type": "string",
			"defaultValue": "https://ukw-akv-d365int-ft-dev.vault.azure.net/"
		},
		"default_properties_GeneralJournalConfigFile_value": {
			"type": "string",
			"defaultValue": "GeneralJournalConfig.json"
		},
		"default_properties_SelfBillingConfigFile_value": {
			"type": "string",
			"defaultValue": "SelfBillingConfig.json"
		},
		"default_properties_FreeTextInvoiceConfigFile_value": {
			"type": "string",
			"defaultValue": "FreeTextInvoiceConfig.json"
		},
		"default_properties_ConfigurationFolder_value": {
			"type": "string",
			"defaultValue": "json/dev02"
		},
		"default_properties_LSMIServiceEndpoint_value": {
			"type": "string",
			"defaultValue": "https://ukwd365intdev.blob.core.windows.net/"
		},
		"default_properties_ErrorStorageAccountName_value": {
			"type": "string",
			"defaultValue": "ukwd365intdev"
		},
		"default_properties_ParagonOutboundConfigFile_value": {
			"type": "string",
			"defaultValue": "ParagonOutboundConfig.json"
		},
		"default_properties_OutboundOnPremStorageHost_value": {
			"type": "string",
			"defaultValue": "\\\\dom-paragonfs\\paragon\\outbound"
		},
		"default_properties_OnPremStorageUserName_value": {
			"type": "string",
			"defaultValue": "shiruser"
		},
		"default_properties_ParagonAzureKeyVault_value": {
			"type": "string",
			"defaultValue": "https://ukw-akv-d365int-Para-dev.vault.azure.net/"
		},
		"default_properties_LSMIParagonServiceEndPoint_value": {
			"type": "string",
			"defaultValue": "https://ukwd365intdev.blob.core.windows.net/"
		},
		"default_properties_ParagonInboundConfigFile_value": {
			"type": "string",
			"defaultValue": "ParagonInboundConfig.json"
		},
		"default_properties_OnPremStorageHostInbound_value": {
			"type": "string",
			"defaultValue": "\\\\dom-paragonfs\\paragon\\inbound"
		},
		"default_properties_CoreSuccessEmailLogicAppSecret_value": {
			"type": "string",
			"defaultValue": "ADF-Core-Pipeline-Success-Email"
		},
		"default_properties_CoreErrorEmailLogicAppSecret_value": {
			"type": "string",
			"defaultValue": "ADF-Core-Exception-Email"
		},
		"default_properties_CoreAzureKeyVault_value": {
			"type": "string",
			"defaultValue": "https://ukw-akv-d365int-core-dev.vault.azure.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_01_FTIC_Transfer_To_Pending')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get FreeTextInvoice Configuration",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DS_Json_MSI",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().globalParameters.ConfigurationContainer",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().globalParameters.FreeTextInvoiceConfigFile",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().globalParameters.ConfigurationFolder",
										"type": "Expression"
									},
									"ls_prm_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set FTI Configuration Array",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get FreeTextInvoice Configuration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "FTI_ConfigurationArray",
							"value": {
								"value": "@activity('Get FreeTextInvoice Configuration').output.value[0].DataIngestionD365FSCMDefinition",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Sharepoint File List",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set FTI Configuration Array",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Folder_MSI",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@variables('FTI_ConfigurationArray')[0]['IntegrationContainer']",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@pipeline().parameters.SharepointFolder",
										"type": "Expression"
									},
									"ls_prm_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Foreach Sharepoint File",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter XLSX Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter XLSX Files').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 1,
							"activities": [
								{
									"name": "Copy To Pending",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_Excel_MSI",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@variables('FTI_ConfigurationArray')[0]['IntegrationContainer']",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.SharepointFolder",
													"type": "Expression"
												},
												"Filename": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"SheetIndex": {
													"value": "@variables('FTI_ConfigurationArray')[0]['ExcelSheetIndex']",
													"type": "Expression"
												},
												"FirstRowCell": {
													"value": "@variables('FTI_ConfigurationArray')[0]['ExcelFirstRowCell']",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_CSV_MSI",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('FTI_ConfigurationArray')[0]['IntegrationContainer']",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat(replace(item().name,'.xlsx',''),'.csv')",
													"type": "Expression"
												},
												"Folder": {
													"value": "@concat(\n    variables('FTI_ConfigurationArray')[0]['IngestionFolderPath'],'/',\n    pipeline().parameters.PipelineRunId\n)",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete Temporary Sharepoint File",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy To Pending",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_CSV_MSI",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('FTI_ConfigurationArray')[0]['IntegrationContainer']",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"Folder": {
													"value": "@pipeline().parameters.SharepointFolder",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Log Error - Copy To Pending",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Copy To Pending",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_ProcessError",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ErrorCode": {
												"value": "@activity('Copy To Pending').error.errorCode",
												"type": "Expression"
											},
											"ErrorMessage": {
												"value": "@activity('Copy To Pending').error.message",
												"type": "Expression"
											},
											"ErrorLogicAppURL": {
												"value": "@variables('FTI_ConfigurationArray')[0]['ErrorLogicAppURL']",
												"type": "Expression"
											},
											"ErrorActivity": {
												"value": "@concat('Download Sharepoint Files')",
												"type": "Expression"
											},
											"StorageAccountKey": {
												"value": "@variables('FTI_BlobStorageAccessKey')",
												"type": "Expression"
											},
											"LogContainer": {
												"value": "@variables('FTI_ConfigurationArray')[0]['LogContainer']",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"PipelineTimeStamp": {
												"value": "@pipeline().parameters.PipelineFilenameTimestamp",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											},
											"IntegrationContainer": {
												"value": "@variables('FTI_ConfigurationArray')[0]['IntegrationContainer']",
												"type": "Expression"
											},
											"IntegrationInputFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['IngestionFolderPath']",
												"type": "Expression"
											},
											"IntegrationFailureFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['FailureFolder']",
												"type": "Expression"
											},
											"InProgressFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['InProgressFolderPath']",
												"type": "Expression"
											},
											"TransformedFolderPath": {
												"value": "@variables('FTI_ConfigurationArray')[0]['TransformedFolderPath']",
												"type": "Expression"
											},
											"SuccessFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['SuccessFolder']",
												"type": "Expression"
											},
											"ZippedFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['ZippedFolderPath']",
												"type": "Expression"
											},
											"ErroredZipFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['ErroredZipFolder']",
												"type": "Expression"
											},
											"IntegrationId": {
												"value": "@pipeline().parameters.IntegrationTypeId",
												"type": "Expression"
											},
											"SharepointFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['SharepointDownloadFolder']",
												"type": "Expression"
											},
											"PendingFileName": {
												"value": "@item().Name",
												"type": "Expression"
											},
											"LegalEntityId": {
												"value": "@pipeline().parameters.LegalEntityId",
												"type": "Expression"
											},
											"SharepointFolderGUID": {
												"value": "@pipeline().parameters.SharepointFolder",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Log Error - Delete Temporary Sharepoint File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Delete Temporary Sharepoint File",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_ProcessError",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ErrorCode": {
												"value": "@activity('Copy To Pending').error.errorCode",
												"type": "Expression"
											},
											"ErrorMessage": {
												"value": "@activity('Copy To Pending').error.message",
												"type": "Expression"
											},
											"ErrorLogicAppURL": {
												"value": "@variables('FTI_ConfigurationArray')[0]['ErrorLogicAppURL']",
												"type": "Expression"
											},
											"ErrorActivity": {
												"value": "@concat('Copy To Pending')",
												"type": "Expression"
											},
											"StorageAccountKey": {
												"value": "@variables('FTI_BlobStorageAccessKey')",
												"type": "Expression"
											},
											"LogContainer": {
												"value": "@variables('FTI_ConfigurationArray')[0]['LogContainer']",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"PipelineTimeStamp": {
												"value": "@pipeline().parameters.PipelineFilenameTimestamp",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											},
											"IntegrationContainer": {
												"value": "@variables('FTI_ConfigurationArray')[0]['IntegrationContainer']",
												"type": "Expression"
											},
											"IntegrationInputFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['IngestionFolderPath']",
												"type": "Expression"
											},
											"IntegrationFailureFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['FailureFolder']",
												"type": "Expression"
											},
											"InProgressFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['InProgressFolderPath']",
												"type": "Expression"
											},
											"TransformedFolderPath": {
												"value": "@variables('FTI_ConfigurationArray')[0]['TransformedFolderPath']",
												"type": "Expression"
											},
											"SuccessFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['SuccessFolder']",
												"type": "Expression"
											},
											"ZippedFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['ZippedFolderPath']",
												"type": "Expression"
											},
											"ErroredZipFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['ErroredZipFolder']",
												"type": "Expression"
											},
											"IntegrationId": {
												"value": "@pipeline().parameters.IntegrationTypeId",
												"type": "Expression"
											},
											"SharepointFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['SharepointDownloadFolder']",
												"type": "Expression"
											},
											"PendingFileName": {
												"value": "@item().Name",
												"type": "Expression"
											},
											"LegalEntityId": {
												"value": "@pipeline().parameters.LegalEntityId",
												"type": "Expression"
											},
											"SharepointFolderGUID": {
												"value": "@pipeline().parameters.SharepointFolder",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Filter XLSX Files",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Sharepoint File List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Sharepoint File List').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().Name,'.xlsx')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Log Error - Download Sharepoint Files_copy1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Get Sharepoint File List",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ProcessError",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ErrorCode": {
									"value": "@activity('Get Sharepoint File List').error.errorCode",
									"type": "Expression"
								},
								"ErrorMessage": {
									"value": "@activity('Get Sharepoint File List').error.message",
									"type": "Expression"
								},
								"ErrorLogicAppURL": {
									"value": "@variables('FTI_ConfigurationArray')[0]['ErrorLogicAppURL']",
									"type": "Expression"
								},
								"ErrorActivity": {
									"value": "@concat('Get Sharepoint File List')",
									"type": "Expression"
								},
								"StorageAccountKey": {
									"value": "@variables('FTI_BlobStorageAccessKey')",
									"type": "Expression"
								},
								"LogContainer": {
									"value": "@variables('FTI_ConfigurationArray')[0]['LogContainer']",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@variables('FTI_ConfigurationArray')[0]['LogDirectory']",
									"type": "Expression"
								},
								"PipelineTimeStamp": {
									"value": "@pipeline().parameters.PipelineFilenameTimestamp",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().parameters.PipelineRunId",
									"type": "Expression"
								},
								"IntegrationContainer": {
									"value": "@variables('FTI_ConfigurationArray')[0]['IntegrationContainer']",
									"type": "Expression"
								},
								"IntegrationInputFolder": {
									"value": "@variables('FTI_ConfigurationArray')[0]['IngestionFolderPath']",
									"type": "Expression"
								},
								"IntegrationFailureFolder": {
									"value": "@variables('FTI_ConfigurationArray')[0]['FailureFolder']",
									"type": "Expression"
								},
								"InProgressFolder": {
									"value": "@variables('FTI_ConfigurationArray')[0]['InProgressFolderPath']",
									"type": "Expression"
								},
								"TransformedFolderPath": {
									"value": "@variables('FTI_ConfigurationArray')[0]['TransformedFolderPath']",
									"type": "Expression"
								},
								"SuccessFolder": {
									"value": "@variables('FTI_ConfigurationArray')[0]['SuccessFolder']",
									"type": "Expression"
								},
								"ZippedFolder": {
									"value": "@variables('FTI_ConfigurationArray')[0]['ZippedFolderPath']",
									"type": "Expression"
								},
								"ErroredZipFolder": {
									"value": "@variables('FTI_ConfigurationArray')[0]['ErroredZipFolder']",
									"type": "Expression"
								},
								"IntegrationId": {
									"value": "@pipeline().parameters.IntegrationTypeId",
									"type": "Expression"
								},
								"SharepointFolder": {
									"value": "@variables('FTI_ConfigurationArray')[0]['SharepointDownloadFolder']",
									"type": "Expression"
								},
								"LegalEntityId": {
									"value": "@pipeline().parameters.LegalEntityId",
									"type": "Expression"
								},
								"SharepointFolderGUID": {
									"value": "@pipeline().parameters.SharepointFolder",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Check Pending Folder Exists",
						"description": "",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Foreach Sharepoint File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Folder_MSI",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@variables('FTI_ConfigurationArray')[0]['IntegrationContainer']",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@concat(\n    variables('FTI_ConfigurationArray')[0]['IngestionFolderPath'],'/',\n    pipeline().parameters.PipelineRunId\n)",
										"type": "Expression"
									},
									"ls_prm_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "If Pending Folder Exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Pending Folder Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Check Pending Folder Exists').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Process FTI Export Delivery Note Ledger Excel Files",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_02_FTIC_Process_Files",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PipelineRunId": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											},
											"PipelineFilenameTimestamp": {
												"value": "@pipeline().parameters.PipelineFilenameTimestamp",
												"type": "Expression"
											},
											"IntegrationTypeId": {
												"value": "@pipeline().parameters.IntegrationTypeId",
												"type": "Expression"
											},
											"ConfigurationArray": {
												"value": "@variables('FTI_ConfigurationArray')",
												"type": "Expression"
											},
											"LegalEntityId": {
												"value": "@pipeline().parameters.LegalEntityId",
												"type": "Expression"
											},
											"IntegrationName": {
												"value": "@pipeline().parameters.IntegrationName",
												"type": "Expression"
											},
											"SharepointFolder": {
												"value": "@pipeline().parameters.SharepointFolder",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PipelineRunId": {
						"type": "string"
					},
					"PipelineFilenameTimestamp": {
						"type": "string"
					},
					"IntegrationTypeId": {
						"type": "string"
					},
					"LegalEntityId": {
						"type": "string"
					},
					"IntegrationName": {
						"type": "string"
					},
					"SharepointFolder": {
						"type": "string"
					}
				},
				"variables": {
					"FTI_BlobStorageAccessKey": {
						"type": "String"
					},
					"FTI_ConfigurationArray": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "02-Free-Text-Invoice"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-20T08:14:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Json_MSI')]",
				"[concat(variables('factoryId'), '/datasets/DS_Folder_MSI')]",
				"[concat(variables('factoryId'), '/pipelines/PL_ProcessError')]",
				"[concat(variables('factoryId'), '/datasets/DS_Excel_MSI')]",
				"[concat(variables('factoryId'), '/datasets/DS_CSV_MSI')]",
				"[concat(variables('factoryId'), '/pipelines/PL_02_FTIC_Process_Files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_01_GJC_Transfer_To_Pending')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get GeneralJournal Configuration",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DS_Json_MSI",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().globalParameters.ConfigurationContainer",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().globalParameters.GeneralJournalConfigFile",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().globalParameters.ConfigurationFolder",
										"type": "Expression"
									},
									"ls_prm_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set GJ Configuration Array",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get GeneralJournal Configuration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "GJ_ConfigurationArray",
							"value": {
								"value": "@activity('Get GeneralJournal Configuration').output.value[0].DataIngestionD365FSCMDefinition",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Sharepoint File List",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set GJ Configuration Array",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Folder_MSI",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@variables('GJ_ConfigurationArray')[0]['IntegrationContainer']",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@pipeline().parameters.SharepointFolder",
										"type": "Expression"
									},
									"ls_prm_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Foreach Sharepoint File",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter XLSX Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter XLSX Files').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 1,
							"activities": [
								{
									"name": "Copy To Pending",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Extract FileName Portion",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_Excel_MSI",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@variables('GJ_ConfigurationArray')[0]['IntegrationContainer']",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.SharepointFolder",
													"type": "Expression"
												},
												"Filename": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"SheetIndex": {
													"value": "@variables('GJ_ConfigurationArray')[0]['ExcelSheetIndex']",
													"type": "Expression"
												},
												"FirstRowCell": {
													"value": "@variables('GJ_ConfigurationArray')[0]['ExcelFirstRowCell']",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_CSV_MSI",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('GJ_ConfigurationArray')[0]['IntegrationContainer']",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat(replace(item().name,'.xlsx',''),'.csv')",
													"type": "Expression"
												},
												"Folder": {
													"value": "@concat(\n    variables('GJ_ConfigurationArray')[0]['IngestionFolderPath'],'/',pipeline().parameters.PipelineRunId\n)",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete Temporary Sharepoint File",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy To Pending",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_CSV_MSI",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('GJ_ConfigurationArray')[0]['IntegrationContainer']",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"Folder": {
													"value": "@pipeline().parameters.SharepointFolder",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Log Error - Copy To Pending",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Copy To Pending",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_ProcessError",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ErrorCode": {
												"value": "@activity('Copy To Pending').error.errorCode",
												"type": "Expression"
											},
											"ErrorMessage": {
												"value": "@activity('Copy To Pending').error.message",
												"type": "Expression"
											},
											"ErrorLogicAppURL": {
												"value": "@variables('GJ_ConfigurationArray')[0]['ErrorLogicAppURL']",
												"type": "Expression"
											},
											"ErrorActivity": {
												"value": "@concat('Download Sharepoint Files')",
												"type": "Expression"
											},
											"StorageAccountKey": {
												"value": "@variables('GJ_BlobStorageAccessKey')",
												"type": "Expression"
											},
											"LogContainer": {
												"value": "@variables('GJ_ConfigurationArray')[0]['LogContainer']",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"PipelineTimeStamp": {
												"value": "@pipeline().parameters.PipelineFilenameTimestamp",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											},
											"IntegrationContainer": {
												"value": "@variables('GJ_ConfigurationArray')[0]['IntegrationContainer']",
												"type": "Expression"
											},
											"IntegrationInputFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['IngestionFolderPath']",
												"type": "Expression"
											},
											"IntegrationFailureFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['FailureFolder']",
												"type": "Expression"
											},
											"InProgressFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['InProgressFolderPath']",
												"type": "Expression"
											},
											"TransformedFolderPath": {
												"value": "@variables('GJ_ConfigurationArray')[0]['TransformedFolderPath']",
												"type": "Expression"
											},
											"SuccessFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['SuccessFolder']",
												"type": "Expression"
											},
											"ZippedFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['ZippedFolderPath']",
												"type": "Expression"
											},
											"ErroredZipFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['ErroredZipFolder']",
												"type": "Expression"
											},
											"IntegrationId": {
												"value": "@pipeline().parameters.IntegrationTypeId",
												"type": "Expression"
											},
											"SharepointFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['SharepointDownloadFolder']",
												"type": "Expression"
											},
											"PendingFileName": {
												"value": "@item().Name",
												"type": "Expression"
											},
											"LegalEntityId": {
												"value": "@pipeline().parameters.LegalEntityId",
												"type": "Expression"
											},
											"SharepointFolderGUID": {
												"value": "@pipeline().parameters.SharepointFolder",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Log Error - Delete Temporary Sharepoint File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Delete Temporary Sharepoint File",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_ProcessError",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ErrorCode": {
												"value": "@activity('Copy To Pending').error.errorCode",
												"type": "Expression"
											},
											"ErrorMessage": {
												"value": "@activity('Copy To Pending').error.message",
												"type": "Expression"
											},
											"ErrorLogicAppURL": {
												"value": "@variables('GJ_ConfigurationArray')[0]['ErrorLogicAppURL']",
												"type": "Expression"
											},
											"ErrorActivity": {
												"value": "@concat('Copy To Pending')",
												"type": "Expression"
											},
											"StorageAccountKey": {
												"value": "@variables('GJ_BlobStorageAccessKey')",
												"type": "Expression"
											},
											"LogContainer": {
												"value": "@variables('GJ_ConfigurationArray')[0]['LogContainer']",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"PipelineTimeStamp": {
												"value": "@pipeline().parameters.PipelineFilenameTimestamp",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											},
											"IntegrationContainer": {
												"value": "@variables('GJ_ConfigurationArray')[0]['IntegrationContainer']",
												"type": "Expression"
											},
											"IntegrationInputFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['IngestionFolderPath']",
												"type": "Expression"
											},
											"IntegrationFailureFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['FailureFolder']",
												"type": "Expression"
											},
											"InProgressFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['InProgressFolderPath']",
												"type": "Expression"
											},
											"TransformedFolderPath": {
												"value": "@variables('GJ_ConfigurationArray')[0]['TransformedFolderPath']",
												"type": "Expression"
											},
											"SuccessFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['SuccessFolder']",
												"type": "Expression"
											},
											"ZippedFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['ZippedFolderPath']",
												"type": "Expression"
											},
											"ErroredZipFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['ErroredZipFolder']",
												"type": "Expression"
											},
											"IntegrationId": {
												"value": "@pipeline().parameters.IntegrationTypeId",
												"type": "Expression"
											},
											"SharepointFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['SharepointDownloadFolder']",
												"type": "Expression"
											},
											"PendingFileName": {
												"value": "@item().Name",
												"type": "Expression"
											},
											"LegalEntityId": {
												"value": "@pipeline().parameters.LegalEntityId",
												"type": "Expression"
											},
											"SharepointFolderGUID": {
												"value": "@pipeline().parameters.SharepointFolder",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Extract FileName Portion",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "GJ_ProcessFileName",
										"value": {
											"value": "@replace(item().Name,'.xlsx','')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Filter XLSX Files",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Sharepoint File List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Sharepoint File List').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().Name,'.xlsx')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Log Error - Download Sharepoint Files_copy1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Get Sharepoint File List",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ProcessError",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ErrorCode": {
									"value": "@activity('Get Sharepoint File List').error.errorCode",
									"type": "Expression"
								},
								"ErrorMessage": {
									"value": "@activity('Get Sharepoint File List').error.message",
									"type": "Expression"
								},
								"ErrorLogicAppURL": {
									"value": "@variables('GJ_ConfigurationArray')[0]['ErrorLogicAppURL']",
									"type": "Expression"
								},
								"ErrorActivity": {
									"value": "@concat('Get Sharepoint File List')",
									"type": "Expression"
								},
								"StorageAccountKey": {
									"value": "@variables('GJ_BlobStorageAccessKey')",
									"type": "Expression"
								},
								"LogContainer": {
									"value": "@variables('GJ_ConfigurationArray')[0]['LogContainer']",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@variables('GJ_ConfigurationArray')[0]['LogDirectory']",
									"type": "Expression"
								},
								"PipelineTimeStamp": {
									"value": "@pipeline().parameters.PipelineFilenameTimestamp",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().parameters.PipelineRunId",
									"type": "Expression"
								},
								"IntegrationContainer": {
									"value": "@variables('GJ_ConfigurationArray')[0]['IntegrationContainer']",
									"type": "Expression"
								},
								"IntegrationInputFolder": {
									"value": "@variables('GJ_ConfigurationArray')[0]['IngestionFolderPath']",
									"type": "Expression"
								},
								"IntegrationFailureFolder": {
									"value": "@variables('GJ_ConfigurationArray')[0]['FailureFolder']",
									"type": "Expression"
								},
								"InProgressFolder": {
									"value": "@variables('GJ_ConfigurationArray')[0]['InProgressFolderPath']",
									"type": "Expression"
								},
								"TransformedFolderPath": {
									"value": "@variables('GJ_ConfigurationArray')[0]['TransformedFolderPath']",
									"type": "Expression"
								},
								"SuccessFolder": {
									"value": "@variables('GJ_ConfigurationArray')[0]['SuccessFolder']",
									"type": "Expression"
								},
								"ZippedFolder": {
									"value": "@variables('GJ_ConfigurationArray')[0]['ZippedFolderPath']",
									"type": "Expression"
								},
								"ErroredZipFolder": {
									"value": "@variables('GJ_ConfigurationArray')[0]['ErroredZipFolder']",
									"type": "Expression"
								},
								"IntegrationId": {
									"value": "@pipeline().parameters.IntegrationTypeId",
									"type": "Expression"
								},
								"SharepointFolder": {
									"value": "@variables('GJ_ConfigurationArray')[0]['SharepointDownloadFolder']",
									"type": "Expression"
								},
								"LegalEntityId": {
									"value": "@pipeline().parameters.LegalEntityId",
									"type": "Expression"
								},
								"SharepointFolderGUID": {
									"value": "@pipeline().parameters.SharepointFolder",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Check Pending Folder Exists",
						"description": "",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Foreach Sharepoint File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Folder_MSI",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@variables('GJ_ConfigurationArray')[0]['IntegrationContainer']",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@concat(\n    variables('GJ_ConfigurationArray')[0]['IngestionFolderPath'],'/',pipeline().parameters.PipelineRunId\n)",
										"type": "Expression"
									},
									"ls_prm_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "If Pending Folder Exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Pending Folder Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Check Pending Folder Exists').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Process GJ Export Delivery Note Ledger Excel Files",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_02_GJC_Process_Files",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PipelineRunId": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											},
											"PipelineFilenameTimestamp": {
												"value": "@pipeline().parameters.PipelineFilenameTimestamp",
												"type": "Expression"
											},
											"IntegrationTypeId": {
												"value": "@pipeline().parameters.IntegrationTypeId",
												"type": "Expression"
											},
											"ConfigurationArray": {
												"value": "@variables('GJ_ConfigurationArray')",
												"type": "Expression"
											},
											"LegalEntityId": {
												"value": "@pipeline().parameters.LegalEntityId",
												"type": "Expression"
											},
											"IntegrationName": {
												"value": "@pipeline().parameters.IntegrationName",
												"type": "Expression"
											},
											"ProcessFileName": {
												"value": "@variables('GJ_ProcessFileName')",
												"type": "Expression"
											},
											"SharepointFolder": {
												"value": "@pipeline().parameters.SharepointFolder",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PipelineRunId": {
						"type": "string"
					},
					"PipelineFilenameTimestamp": {
						"type": "string"
					},
					"IntegrationTypeId": {
						"type": "string"
					},
					"LegalEntityId": {
						"type": "string"
					},
					"IntegrationName": {
						"type": "string"
					},
					"SharepointFolder": {
						"type": "string"
					}
				},
				"variables": {
					"GJ_BlobStorageAccessKey": {
						"type": "String"
					},
					"GJ_ConfigurationArray": {
						"type": "Array"
					},
					"GJ_ProcessFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "01-General-Journal"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-20T08:14:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Json_MSI')]",
				"[concat(variables('factoryId'), '/datasets/DS_Folder_MSI')]",
				"[concat(variables('factoryId'), '/pipelines/PL_ProcessError')]",
				"[concat(variables('factoryId'), '/datasets/DS_Excel_MSI')]",
				"[concat(variables('factoryId'), '/datasets/DS_CSV_MSI')]",
				"[concat(variables('factoryId'), '/pipelines/PL_02_GJC_Process_Files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_01_ParagonInbound_Copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set Inbound Config Array",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "InboundConfigArray",
							"value": {
								"value": "@pipeline().parameters.InboundConfig",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get FileNames - On Prem",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set Inbound Config Array",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Paragon_CSV_OnPrem_Folder",
								"type": "DatasetReference",
								"parameters": {
									"OnPremHost": {
										"value": "@concat(\n    pipeline().globalParameters.OnPremStorageHostInbound,'/',variables('InboundConfigArray')[0]['ParagonOnPremisesSourceFolder'])",
										"type": "Expression"
									},
									"OnPremUserName": {
										"value": "@pipeline().globalParameters.OnPremStorageUserName",
										"type": "Expression"
									},
									"ParagonAzureKeyVault": {
										"value": "@pipeline().globalParameters.ParagonAzureKeyVault",
										"type": "Expression"
									},
									"SecretName": {
										"value": "@variables('InboundConfigArray')[0]['ParagonSecretName']",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Clean Blob Folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter CSV Files').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy datato to Blob",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_Paragon_CSV_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"Filename": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"OnPremHost": {
													"value": "@concat(\n    pipeline().globalParameters.OnPremStorageHostInbound,'/',variables('InboundConfigArray')[0]['ParagonOnPremisesSourceFolder'])",
													"type": "Expression"
												},
												"OnPremUserName": {
													"value": "@pipeline().globalParameters.OnPremStorageUserName",
													"type": "Expression"
												},
												"ParagonAzureKeyVault": {
													"value": "@pipeline().globalParameters.ParagonAzureKeyVault",
													"type": "Expression"
												},
												"SecretName": {
													"value": "@variables('InboundConfigArray')[0]['ParagonSecretName']",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_Paragon_CSV_MSI",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('InboundConfigArray')[0]['ParagonADFContainer']",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"Folder": {
													"value": "@variables('InboundConfigArray')[0]['ParagonADFSinkFolder']",
													"type": "Expression"
												},
												"ls_paragon_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIParagonServiceEndPoint",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Copy To Processing",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copy datato to Blob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "FileServerWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_Paragon_CSV_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"Filename": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"OnPremHost": {
													"value": "@concat(\n    pipeline().globalParameters.OnPremStorageHostInbound,'/',variables('InboundConfigArray')[0]['ParagonOnPremisesSourceFolder'])",
													"type": "Expression"
												},
												"OnPremUserName": {
													"value": "@pipeline().globalParameters.OnPremStorageUserName",
													"type": "Expression"
												},
												"ParagonAzureKeyVault": {
													"value": "@pipeline().globalParameters.ParagonAzureKeyVault",
													"type": "Expression"
												},
												"SecretName": {
													"value": "@variables('InboundConfigArray')[0]['ParagonSecretName']",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_Paragon_CSV_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"Filename": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"OnPremHost": {
													"value": "@concat(\n    pipeline().globalParameters.OnPremStorageHostInbound,'/',variables('InboundConfigArray')[0]['ParagonOnPremisesProcessingFolder'])",
													"type": "Expression"
												},
												"OnPremUserName": {
													"value": "@pipeline().globalParameters.OnPremStorageUserName",
													"type": "Expression"
												},
												"ParagonAzureKeyVault": {
													"value": "@pipeline().globalParameters.ParagonAzureKeyVault",
													"type": "Expression"
												},
												"SecretName": {
													"value": "@variables('InboundConfigArray')[0]['ParagonSecretName']",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete Source Files",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy To Processing",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_Paragon_CSV_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"Filename": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"OnPremHost": {
													"value": "@concat(\n    pipeline().globalParameters.OnPremStorageHostInbound,'/',variables('InboundConfigArray')[0]['ParagonOnPremisesSourceFolder'])",
													"type": "Expression"
												},
												"OnPremUserName": {
													"value": "@pipeline().globalParameters.OnPremStorageUserName",
													"type": "Expression"
												},
												"ParagonAzureKeyVault": {
													"value": "@pipeline().globalParameters.ParagonAzureKeyVault",
													"type": "Expression"
												},
												"SecretName": {
													"value": "@variables('InboundConfigArray')[0]['ParagonSecretName']",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "FileServerReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Filter CSV Files",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get FileNames - On Prem",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get FileNames - On Prem').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().Name,'.csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Clean Blob Folder",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Filter CSV Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Paragon_Folder_MSI",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@variables('InboundConfigArray')[0]['ParagonADFContainer']",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@variables('InboundConfigArray')[0]['ParagonADFSinkFolder']",
										"type": "Expression"
									},
									"ls_paragon_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIParagonServiceEndPoint",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"InboundConfig": {
						"type": "array"
					}
				},
				"variables": {
					"InboundConfigArray": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "06_Paragon_Inbound"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Paragon_CSV_OnPrem_Folder')]",
				"[concat(variables('factoryId'), '/datasets/DS_Paragon_Folder_MSI')]",
				"[concat(variables('factoryId'), '/datasets/DS_Paragon_CSV_OnPrem')]",
				"[concat(variables('factoryId'), '/datasets/DS_Paragon_CSV_MSI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_01_SBC_Transfer_To_Pending')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get SelfBilling Configuration",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DS_Json_MSI",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().globalParameters.ConfigurationContainer",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().globalParameters.SelfBillingConfigFile",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().globalParameters.ConfigurationFolder",
										"type": "Expression"
									},
									"ls_prm_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set SB Configuration Array",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get SelfBilling Configuration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "SB_ConfigurationArray",
							"value": {
								"value": "@activity('Get SelfBilling Configuration').output.value[0].DataIngestionD365FSCMDefinition",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Sharepoint File List",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set SB Configuration Array",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Folder_MSI",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@variables('SB_ConfigurationArray')[0]['IntegrationContainer']",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@pipeline().parameters.SharepointFolder",
										"type": "Expression"
									},
									"ls_prm_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Foreach Sharepoint File",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter XLSX Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter XLSX Files').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy To Pending",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_Excel_MSI",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@variables('SB_ConfigurationArray')[0]['IntegrationContainer']",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.SharepointFolder",
													"type": "Expression"
												},
												"Filename": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"SheetIndex": {
													"value": "@variables('SB_ConfigurationArray')[0]['ExcelSheetIndex']",
													"type": "Expression"
												},
												"FirstRowCell": {
													"value": "@variables('SB_ConfigurationArray')[0]['ExcelFirstRowCell']",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_CSV_MSI",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('SB_ConfigurationArray')[0]['IntegrationContainer']",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat(replace(item().name,'.xlsx',''),'.csv')",
													"type": "Expression"
												},
												"Folder": {
													"value": "@concat(\n    variables('SB_ConfigurationArray')[0]['IngestionFolderPath'],'/',pipeline().parameters.PipelineRunId\n)",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete Temporary Sharepoint File",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy To Pending",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_CSV_MSI",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('SB_ConfigurationArray')[0]['IntegrationContainer']",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"Folder": {
													"value": "@pipeline().parameters.SharepointFolder",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Log Error - Copy To Pending",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Copy To Pending",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_ProcessError",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ErrorCode": {
												"value": "@activity('Copy To Pending').error.errorCode",
												"type": "Expression"
											},
											"ErrorMessage": {
												"value": "@activity('Copy To Pending').error.message",
												"type": "Expression"
											},
											"ErrorLogicAppURL": {
												"value": "@variables('SB_ConfigurationArray')[0]['ErrorLogicAppURL']",
												"type": "Expression"
											},
											"ErrorActivity": {
												"value": "@concat('Download Sharepoint Files')",
												"type": "Expression"
											},
											"StorageAccountKey": {
												"value": "@variables('SB_BlobStorageAccessKey')",
												"type": "Expression"
											},
											"LogContainer": {
												"value": "@variables('SB_ConfigurationArray')[0]['LogContainer']",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('SB_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"PipelineTimeStamp": {
												"value": "@pipeline().parameters.PipelineFilenameTimestamp",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											},
											"IntegrationContainer": {
												"value": "@variables('SB_ConfigurationArray')[0]['IntegrationContainer']",
												"type": "Expression"
											},
											"IntegrationInputFolder": {
												"value": "@variables('SB_ConfigurationArray')[0]['IngestionFolderPath']",
												"type": "Expression"
											},
											"IntegrationFailureFolder": {
												"value": "@variables('SB_ConfigurationArray')[0]['FailureFolder']",
												"type": "Expression"
											},
											"InProgressFolder": {
												"value": "@variables('SB_ConfigurationArray')[0]['InProgressFolderPath']",
												"type": "Expression"
											},
											"TransformedFolderPath": {
												"value": "@variables('SB_ConfigurationArray')[0]['TransformedFolderPath']",
												"type": "Expression"
											},
											"SuccessFolder": {
												"value": "@variables('SB_ConfigurationArray')[0]['SuccessFolder']",
												"type": "Expression"
											},
											"ZippedFolder": {
												"value": "@variables('SB_ConfigurationArray')[0]['ZippedFolderPath']",
												"type": "Expression"
											},
											"ErroredZipFolder": {
												"value": "@variables('SB_ConfigurationArray')[0]['ErroredZipFolder']",
												"type": "Expression"
											},
											"IntegrationId": {
												"value": "@pipeline().parameters.IntegrationTypeId",
												"type": "Expression"
											},
											"SharepointFolder": {
												"value": "@variables('SB_ConfigurationArray')[0]['SharepointDownloadFolder']",
												"type": "Expression"
											},
											"PendingFileName": {
												"value": "@item().Name",
												"type": "Expression"
											},
											"LegalEntityId": {
												"value": "@pipeline().parameters.LegalEntityId",
												"type": "Expression"
											},
											"SharepointFolderGUID": {
												"value": "@pipeline().parameters.SharepointFolder",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Log Error - Delete Temporary Sharepoint File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Delete Temporary Sharepoint File",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_ProcessError",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ErrorCode": {
												"value": "@activity('Copy To Pending').error.errorCode",
												"type": "Expression"
											},
											"ErrorMessage": {
												"value": "@activity('Copy To Pending').error.message",
												"type": "Expression"
											},
											"ErrorLogicAppURL": {
												"value": "@variables('SB_ConfigurationArray')[0]['ErrorLogicAppURL']",
												"type": "Expression"
											},
											"ErrorActivity": {
												"value": "@concat('Copy To Pending')",
												"type": "Expression"
											},
											"StorageAccountKey": {
												"value": "@variables('SB_BlobStorageAccessKey')",
												"type": "Expression"
											},
											"LogContainer": {
												"value": "@variables('SB_ConfigurationArray')[0]['LogContainer']",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('SB_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"PipelineTimeStamp": {
												"value": "@pipeline().parameters.PipelineFilenameTimestamp",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											},
											"IntegrationContainer": {
												"value": "@variables('SB_ConfigurationArray')[0]['IntegrationContainer']",
												"type": "Expression"
											},
											"IntegrationInputFolder": {
												"value": "@variables('SB_ConfigurationArray')[0]['IngestionFolderPath']",
												"type": "Expression"
											},
											"IntegrationFailureFolder": {
												"value": "@variables('SB_ConfigurationArray')[0]['FailureFolder']",
												"type": "Expression"
											},
											"InProgressFolder": {
												"value": "@variables('SB_ConfigurationArray')[0]['InProgressFolderPath']",
												"type": "Expression"
											},
											"TransformedFolderPath": {
												"value": "@variables('SB_ConfigurationArray')[0]['TransformedFolderPath']",
												"type": "Expression"
											},
											"SuccessFolder": {
												"value": "@variables('SB_ConfigurationArray')[0]['SuccessFolder']",
												"type": "Expression"
											},
											"ZippedFolder": {
												"value": "@variables('SB_ConfigurationArray')[0]['ZippedFolderPath']",
												"type": "Expression"
											},
											"ErroredZipFolder": {
												"value": "@variables('SB_ConfigurationArray')[0]['ErroredZipFolder']",
												"type": "Expression"
											},
											"IntegrationId": {
												"value": "@pipeline().parameters.IntegrationTypeId",
												"type": "Expression"
											},
											"SharepointFolder": {
												"value": "@variables('SB_ConfigurationArray')[0]['SharepointDownloadFolder']",
												"type": "Expression"
											},
											"PendingFileName": {
												"value": "@item().Name",
												"type": "Expression"
											},
											"LegalEntityId": {
												"value": "@pipeline().parameters.LegalEntityId",
												"type": "Expression"
											},
											"SharepointFolderGUID": {
												"value": "@pipeline().parameters.SharepointFolder",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Filter XLSX Files",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Sharepoint File List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Sharepoint File List').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().Name,'.xlsx')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Log Error - Download Sharepoint Files_copy1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Get Sharepoint File List",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ProcessError",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ErrorCode": {
									"value": "@activity('Get Sharepoint File List').error.errorCode",
									"type": "Expression"
								},
								"ErrorMessage": {
									"value": "@activity('Get Sharepoint File List').error.message",
									"type": "Expression"
								},
								"ErrorLogicAppURL": {
									"value": "@variables('SB_ConfigurationArray')[0]['ErrorLogicAppURL']",
									"type": "Expression"
								},
								"ErrorActivity": {
									"value": "@concat('Get Sharepoint File List')",
									"type": "Expression"
								},
								"StorageAccountKey": {
									"value": "@variables('SB_BlobStorageAccessKey')",
									"type": "Expression"
								},
								"LogContainer": {
									"value": "@variables('SB_ConfigurationArray')[0]['LogContainer']",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@variables('SB_ConfigurationArray')[0]['LogDirectory']",
									"type": "Expression"
								},
								"PipelineTimeStamp": {
									"value": "@pipeline().parameters.PipelineFilenameTimestamp",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().parameters.PipelineRunId",
									"type": "Expression"
								},
								"IntegrationContainer": {
									"value": "@variables('SB_ConfigurationArray')[0]['IntegrationContainer']",
									"type": "Expression"
								},
								"IntegrationInputFolder": {
									"value": "@variables('SB_ConfigurationArray')[0]['IngestionFolderPath']",
									"type": "Expression"
								},
								"IntegrationFailureFolder": {
									"value": "@variables('SB_ConfigurationArray')[0]['FailureFolder']",
									"type": "Expression"
								},
								"InProgressFolder": {
									"value": "@variables('SB_ConfigurationArray')[0]['InProgressFolderPath']",
									"type": "Expression"
								},
								"TransformedFolderPath": {
									"value": "@variables('SB_ConfigurationArray')[0]['TransformedFolderPath']",
									"type": "Expression"
								},
								"SuccessFolder": {
									"value": "@variables('SB_ConfigurationArray')[0]['SuccessFolder']",
									"type": "Expression"
								},
								"ZippedFolder": {
									"value": "@variables('SB_ConfigurationArray')[0]['ZippedFolderPath']",
									"type": "Expression"
								},
								"ErroredZipFolder": {
									"value": "@variables('SB_ConfigurationArray')[0]['ErroredZipFolder']",
									"type": "Expression"
								},
								"IntegrationId": {
									"value": "@pipeline().parameters.IntegrationTypeId",
									"type": "Expression"
								},
								"SharepointFolder": {
									"value": "@variables('SB_ConfigurationArray')[0]['SharepointDownloadFolder']",
									"type": "Expression"
								},
								"LegalEntityId": {
									"value": "@pipeline().parameters.LegalEntityId",
									"type": "Expression"
								},
								"SharepointFolderGUID": {
									"value": "@pipeline().parameters.SharepointFolder",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Check Pending Folder Exists",
						"description": "",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Foreach Sharepoint File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Folder_MSI",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@variables('SB_ConfigurationArray')[0]['IntegrationContainer']",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@concat(\n    variables('SB_ConfigurationArray')[0]['IngestionFolderPath'],'/',pipeline().parameters.PipelineRunId\n)",
										"type": "Expression"
									},
									"ls_prm_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "If Pending Folder Exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Pending Folder Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Check Pending Folder Exists').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Process SB Export Delivery Note Ledger Excel Files",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_02_SBC_Process_Files",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PipelineRunId": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											},
											"PipelineFilenameTimestamp": {
												"value": "@pipeline().parameters.PipelineFilenameTimestamp",
												"type": "Expression"
											},
											"IntegrationTypeId": {
												"value": "@pipeline().parameters.IntegrationTypeId",
												"type": "Expression"
											},
											"ConfigurationArray": {
												"value": "@variables('SB_ConfigurationArray')",
												"type": "Expression"
											},
											"LegalEntityId": {
												"value": "@pipeline().parameters.LegalEntityId",
												"type": "Expression"
											},
											"IntegrationName": {
												"value": "@pipeline().parameters.IntegrationName",
												"type": "Expression"
											},
											"SharepointFolder": {
												"value": "@pipeline().parameters.SharepointFolder",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PipelineRunId": {
						"type": "string"
					},
					"PipelineFilenameTimestamp": {
						"type": "string"
					},
					"IntegrationTypeId": {
						"type": "string"
					},
					"LegalEntityId": {
						"type": "string"
					},
					"IntegrationName": {
						"type": "string"
					},
					"SharepointFolder": {
						"type": "string"
					}
				},
				"variables": {
					"SB_BlobStorageAccessKey": {
						"type": "String"
					},
					"SB_ConfigurationArray": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "03_Self-Billing"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-20T08:14:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Json_MSI')]",
				"[concat(variables('factoryId'), '/datasets/DS_Folder_MSI')]",
				"[concat(variables('factoryId'), '/pipelines/PL_ProcessError')]",
				"[concat(variables('factoryId'), '/datasets/DS_Excel_MSI')]",
				"[concat(variables('factoryId'), '/datasets/DS_CSV_MSI')]",
				"[concat(variables('factoryId'), '/pipelines/PL_02_SBC_Process_Files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_02_FTIC_Process_Files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set FTI Configuration Array",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "FTI_ConfigurationArray",
							"value": {
								"value": "@pipeline().parameters.ConfigurationArray",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Check Pending Folder",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set FTI Configuration Array",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Folder_MSI",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@variables('FTI_ConfigurationArray')[0]['IntegrationContainer']",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@concat(variables('FTI_ConfigurationArray')[0]['IngestionFolderPath'],'/',\n\tpipeline().parameters.PipelineRunId)",
										"type": "Expression"
									},
									"ls_prm_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Log Error - Check Pending Folder",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Check Pending Folder",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ProcessError",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ErrorCode": {
									"value": "@activity('Check Pending Folder').error.errorCode",
									"type": "Expression"
								},
								"ErrorMessage": {
									"value": "@activity('Check Pending Folder').error.message",
									"type": "Expression"
								},
								"ErrorLogicAppURL": {
									"value": "@variables('FTI_ConfigurationArray')[0]['ErrorLogicAppURL']",
									"type": "Expression"
								},
								"ErrorActivity": {
									"value": "@concat('Download Sharepoint Files')",
									"type": "Expression"
								},
								"StorageAccountKey": {
									"value": "@variables('FTI_BlobStorageAccessKey')",
									"type": "Expression"
								},
								"LogContainer": {
									"value": "@variables('FTI_ConfigurationArray')[0]['LogContainer']",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@variables('FTI_ConfigurationArray')[0]['LogDirectory']",
									"type": "Expression"
								},
								"PipelineTimeStamp": {
									"value": "@pipeline().parameters.PipelineFilenameTimestamp",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().parameters.PipelineRunId",
									"type": "Expression"
								},
								"IntegrationContainer": {
									"value": "@variables('FTI_ConfigurationArray')[0]['IntegrationContainer']",
									"type": "Expression"
								},
								"IntegrationInputFolder": {
									"value": "@variables('FTI_ConfigurationArray')[0]['IngestionFolderPath']",
									"type": "Expression"
								},
								"IntegrationFailureFolder": {
									"value": "@variables('FTI_ConfigurationArray')[0]['FailureFolder']",
									"type": "Expression"
								},
								"InProgressFolder": {
									"value": "@variables('FTI_ConfigurationArray')[0]['InProgressFolderPath']",
									"type": "Expression"
								},
								"TransformedFolderPath": {
									"value": "@variables('FTI_ConfigurationArray')[0]['TransformedFolderPath']",
									"type": "Expression"
								},
								"SuccessFolder": {
									"value": "@variables('FTI_ConfigurationArray')[0]['SuccessFolder']",
									"type": "Expression"
								},
								"ZippedFolder": {
									"value": "@variables('FTI_ConfigurationArray')[0]['ZippedFolderPath']",
									"type": "Expression"
								},
								"ErroredZipFolder": {
									"value": "@variables('FTI_ConfigurationArray')[0]['ErroredZipFolder']",
									"type": "Expression"
								},
								"IntegrationId": {
									"value": "@pipeline().parameters.IntegrationTypeId",
									"type": "Expression"
								},
								"SharepointFolder": {
									"value": "@pipeline().parameters.SharepointFolder",
									"type": "Expression"
								},
								"LegalEntityId": {
									"value": "@pipeline().parameters.LegalEntityId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "For Each CSV File",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Check Pending Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Check Pending Folder').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy To InProgress",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_CSV_MSI",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('FTI_ConfigurationArray')[0]['IntegrationContainer']",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"Folder": {
													"value": "@concat(\n\tvariables('FTI_ConfigurationArray')[0]['IngestionFolderPath'],'/',\n\tpipeline().parameters.PipelineRunId\n)",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_CSV_MSI",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('FTI_ConfigurationArray')[0]['IntegrationContainer']",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"Folder": {
													"value": "@concat(\n    variables('FTI_ConfigurationArray')[0]['InProgressFolderPath'],'/',    \n    pipeline().parameters.PipelineRunId\n)",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "FreeTextInvoice Dataflow",
									"description": "Run the dataflow to transform the ingested file and store it in the InProgress Folder path",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "Copy To InProgress",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "DF_Core_Transformation_FreeTextInvoice",
											"type": "DataFlowReference",
											"parameters": {
												"FileName": {
													"value": "'@{variables('FTI_ConfigurationArray')[0]['UploadFileName']}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {
													"container": {
														"value": "@variables('FTI_ConfigurationArray')[0]['IntegrationContainer']",
														"type": "Expression"
													},
													"directory": {
														"value": "@concat(\n    variables('FTI_ConfigurationArray')[0]['InProgressFolderPath'],'/',pipeline().parameters.PipelineRunId\n)",
														"type": "Expression"
													},
													"FileName": {
														"value": "@item().Name",
														"type": "Expression"
													},
													"ls_prm_blob_mi": {
														"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
														"type": "Expression"
													}
												},
												"sink1": {
													"container": {
														"value": "@variables('FTI_ConfigurationArray')[0]['IntegrationContainer']",
														"type": "Expression"
													},
													"filename": {
														"value": "@variables('FTI_ConfigurationArray')[0]['UploadFileName']",
														"type": "Expression"
													},
													"Folder": {
														"value": "@concat(variables('FTI_ConfigurationArray')[0]['TransformedFolderPath'],'/',pipeline().parameters.PipelineRunId\n)",
														"type": "Expression"
													},
													"ls_prm_blob_mi": {
														"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 16,
											"computeType": "General"
											"computeType": "ComputeReference",
											"referenceName": "shir-dev-core"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "Clear InProgress Folder",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "FreeTextInvoice Dataflow",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_CSV_MSI",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('FTI_ConfigurationArray')[0]['IntegrationContainer']",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"Folder": {
													"value": "@concat(\n    variables('FTI_ConfigurationArray')[0]['InProgressFolderPath'],'/',pipeline().parameters.PipelineRunId\n)",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"wildcardFileName": {
												"value": "*.csv",
												"type": "Expression"
											},
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "ExecuteUploadPackagePipeline_FTI",
									"description": "Zipping the file and uploading to D365",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Clear InProgress Folder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Upload_Package",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Container": {
												"value": "@variables('FTI_ConfigurationArray')[0]['IntegrationContainer']",
												"type": "Expression"
											},
											"definitionGroupId": {
												"value": "@variables('FTI_ConfigurationArray')[0]['DefinitionGroupId']",
												"type": "Expression"
											},
											"StorageAccountKey": {
												"value": "@variables('FTI_BlobStorageAccessKey')",
												"type": "Expression"
											},
											"ZippedFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['ZippedFolderPath']",
												"type": "Expression"
											},
											"SecretName": {
												"value": "@variables('FTI_ConfigurationArray')[0]['PasswordSecretName']",
												"type": "Expression"
											},
											"AppID": {
												"value": "@variables('FTI_ConfigurationArray')[0]['AppID']",
												"type": "Expression"
											},
											"TenantID": {
												"value": "@variables('FTI_ConfigurationArray')[0]['TenantIDSecret']",
												"type": "Expression"
											},
											"d365URL": {
												"value": "@variables('FTI_ConfigurationArray')[0]['D365URL']",
												"type": "Expression"
											},
											"LogContainer": {
												"value": "@variables('FTI_ConfigurationArray')[0]['LogContainer']",
												"type": "Expression"
											},
											"PackageFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['MetadataFolderPath']",
												"type": "Expression"
											},
											"PackageContainer": {
												"value": "@pipeline().globalParameters.ConfigurationContainer",
												"type": "Expression"
											},
											"InProgressFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['InProgressFolderPath']",
												"type": "Expression"
											},
											"ErrorLogicAppURL": {
												"value": "@variables('FTI_ConfigurationArray')[0]['ErrorLogicAppURL']",
												"type": "Expression"
											},
											"PipeLineRunId": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											},
											"PipeLineTimeStamp": {
												"value": "@pipeline().parameters.PipelineFilenameTimestamp",
												"type": "Expression"
											},
											"LegalEntityId": {
												"value": "@pipeline().parameters.LegalEntityId",
												"type": "Expression"
											},
											"ErrorSourceContainer": {
												"value": "@variables('FTI_ConfigurationArray')[0]['IntegrationContainer']",
												"type": "Expression"
											},
											"LogDirectory": {
												"value": "@variables('FTI_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"IntegrationContainer": {
												"value": "@variables('FTI_ConfigurationArray')[0]['IntegrationContainer']",
												"type": "Expression"
											},
											"IntegrationInputFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['IngestionFolderPath']",
												"type": "Expression"
											},
											"IntegrationFailureFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['FailureFolder']",
												"type": "Expression"
											},
											"TransformedFolderPath": {
												"value": "@variables('FTI_ConfigurationArray')[0]['TransformedFolderPath']",
												"type": "Expression"
											},
											"CompleteFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['CompleteFolder']",
												"type": "Expression"
											},
											"UploadFileName": {
												"value": "@variables('FTI_ConfigurationArray')[0]['UploadFileName']",
												"type": "Expression"
											},
											"FileName": {
												"value": "@variables('FTI_ConfigurationArray')[0]['FileName']",
												"type": "Expression"
											},
											"ErroredZipFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['ErroredZipFolder']",
												"type": "Expression"
											},
											"UploadedZipFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['UploadedZipFolder']",
												"type": "Expression"
											},
											"FileCounter": {
												"value": "@if(less(int(variables('FTI_TempCounter')),10),concat('0',variables('FTI_TempCounter')),variables('FTI_TempCounter'))",
												"type": "Expression"
											},
											"FilenameTimestamp": {
												"value": "@pipeline().parameters.PipelineFilenameTimestamp",
												"type": "Expression"
											},
											"IntegrationId": {
												"value": "@pipeline().parameters.IntegrationTypeId",
												"type": "Expression"
											},
											"SharepointFolder": {
												"value": "@pipeline().parameters.SharepointFolder",
												"type": "Expression"
											},
											"PendingFileName": {
												"value": "@item().Name",
												"type": "Expression"
											},
											"IntegrationName": {
												"value": "@pipeline().parameters.IntegrationName",
												"type": "Expression"
											},
											"ImportLogFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['D365ImportLogFolder']",
												"type": "Expression"
											},
											"AzureKeyVault": {
												"value": "@pipeline().globalParameters.FreeTextInvoiceAzureKeyVault",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Move To Complete",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "ExecuteUploadPackagePipeline_FTI",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_CSV_MSI",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('FTI_ConfigurationArray')[0]['IntegrationContainer']",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"Folder": {
													"value": "@concat(\n    variables('FTI_ConfigurationArray')[0]['IngestionFolderPath'],'/',pipeline().parameters.PipelineRunId\n)",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_CSV_MSI",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('FTI_ConfigurationArray')[0]['IntegrationContainer']",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"Folder": {
													"value": "@concat(\n    variables('FTI_ConfigurationArray')[0]['SuccessFolder'],'/',substring(pipeline().parameters.PipelineFilenameTimestamp,0,17)\n)",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Log Error - Copy To InProgress",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Copy To InProgress",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_ProcessError",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ErrorCode": {
												"value": "@activity('Copy To InProgress').error.errorCode",
												"type": "Expression"
											},
											"ErrorMessage": {
												"value": "@activity('Copy To InProgress').error.message",
												"type": "Expression"
											},
											"ErrorLogicAppURL": {
												"value": "@variables('FTI_ConfigurationArray')[0]['ErrorLogicAppURL']",
												"type": "Expression"
											},
											"ErrorActivity": {
												"value": "@concat('Copy To InProgess')",
												"type": "Expression"
											},
											"StorageAccountKey": {
												"value": "@variables('FTI_BlobStorageAccessKey')",
												"type": "Expression"
											},
											"LogContainer": {
												"value": "@variables('FTI_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"PipelineTimeStamp": {
												"value": "@pipeline().parameters.PipelineFilenameTimestamp",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											},
											"IntegrationContainer": {
												"value": "@variables('FTI_ConfigurationArray')[0]['IntegrationContainer']",
												"type": "Expression"
											},
											"IntegrationInputFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['IngestionFolderPath']",
												"type": "Expression"
											},
											"IntegrationFailureFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['FailureFolder']",
												"type": "Expression"
											},
											"InProgressFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['InProgressFolderPath']",
												"type": "Expression"
											},
											"TransformedFolderPath": {
												"value": "@variables('FTI_ConfigurationArray')[0]['TransformedFolderPath']",
												"type": "Expression"
											},
											"SuccessFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['SuccessFolder']",
												"type": "Expression"
											},
											"ZippedFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['ZippedFolderPath']",
												"type": "Expression"
											},
											"ErroredZipFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['ErroredZipFolder']",
												"type": "Expression"
											},
											"IntegrationId": {
												"value": "@pipeline().parameters.IntegrationTypeId",
												"type": "Expression"
											},
											"SharepointFolder": {
												"value": "@pipeline().parameters.SharepointFolder",
												"type": "Expression"
											},
											"PendingFileName": {
												"value": "@item().Name",
												"type": "Expression"
											},
											"LegalEntityId": {
												"value": "@pipeline().parameters.LegalEntityId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Log Error - General Journal Dataflow",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "FreeTextInvoice Dataflow",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_ProcessError",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ErrorCode": {
												"value": "@activity('FreeTextInvoice Dataflow').error.errorCode",
												"type": "Expression"
											},
											"ErrorMessage": {
												"value": "@activity('FreeTextInvoice Dataflow').error.message",
												"type": "Expression"
											},
											"ErrorLogicAppURL": {
												"value": "@variables('FTI_ConfigurationArray')[0]['ErrorLogicAppURL']",
												"type": "Expression"
											},
											"ErrorActivity": {
												"value": "@concat('General Journal DataFlow')",
												"type": "Expression"
											},
											"StorageAccountKey": {
												"value": "@variables('FTI_BlobStorageAccessKey')",
												"type": "Expression"
											},
											"LogContainer": {
												"value": "@variables('FTI_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"PipelineTimeStamp": {
												"value": "@pipeline().parameters.PipelineFilenameTimestamp",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											},
											"IntegrationContainer": {
												"value": "@variables('FTI_ConfigurationArray')[0]['IntegrationContainer']",
												"type": "Expression"
											},
											"IntegrationInputFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['IngestionFolderPath']",
												"type": "Expression"
											},
											"IntegrationFailureFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['FailureFolder']",
												"type": "Expression"
											},
											"InProgressFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['InProgressFolderPath']",
												"type": "Expression"
											},
											"TransformedFolderPath": {
												"value": "@variables('FTI_ConfigurationArray')[0]['TransformedFolderPath']",
												"type": "Expression"
											},
											"SuccessFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['SuccessFolder']",
												"type": "Expression"
											},
											"ZippedFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['ZippedFolderPath']",
												"type": "Expression"
											},
											"ErroredZipFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['ErroredZipFolder']",
												"type": "Expression"
											},
											"IntegrationId": {
												"value": "@pipeline().parameters.IntegrationTypeId",
												"type": "Expression"
											},
											"SharepointFolder": {
												"value": "@pipeline().parameters.SharepointFolder",
												"type": "Expression"
											},
											"PendingFileName": {
												"value": "@item().Name",
												"type": "Expression"
											},
											"LegalEntityId": {
												"value": "@pipeline().parameters.LegalEntityId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Log Error - Clear InProgress Folder",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Clear InProgress Folder",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_ProcessError",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ErrorCode": {
												"value": "@activity('Clear InProgress Folder').error.errorCode",
												"type": "Expression"
											},
											"ErrorMessage": {
												"value": "@activity('Clear InProgress Folder').error.message",
												"type": "Expression"
											},
											"ErrorLogicAppURL": {
												"value": "@variables('FTI_ConfigurationArray')[0]['ErrorLogicAppURL']",
												"type": "Expression"
											},
											"ErrorActivity": {
												"value": "@concat('Clear InProgress Folder')",
												"type": "Expression"
											},
											"StorageAccountKey": {
												"value": "@variables('FTI_BlobStorageAccessKey')",
												"type": "Expression"
											},
											"LogContainer": {
												"value": "@variables('FTI_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"PipelineTimeStamp": {
												"value": "@pipeline().parameters.PipelineFilenameTimestamp",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											},
											"IntegrationContainer": {
												"value": "@variables('FTI_ConfigurationArray')[0]['IntegrationContainer']",
												"type": "Expression"
											},
											"IntegrationInputFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['IngestionFolderPath']",
												"type": "Expression"
											},
											"IntegrationFailureFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['FailureFolder']",
												"type": "Expression"
											},
											"InProgressFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['InProgressFolderPath']",
												"type": "Expression"
											},
											"TransformedFolderPath": {
												"value": "@variables('FTI_ConfigurationArray')[0]['TransformedFolderPath']",
												"type": "Expression"
											},
											"SuccessFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['SuccessFolder']",
												"type": "Expression"
											},
											"ZippedFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['ZippedFolderPath']",
												"type": "Expression"
											},
											"ErroredZipFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['ErroredZipFolder']",
												"type": "Expression"
											},
											"IntegrationId": {
												"value": "@pipeline().parameters.IntegrationTypeId",
												"type": "Expression"
											},
											"SharepointFolder": {
												"value": "@pipeline().parameters.SharepointFolder",
												"type": "Expression"
											},
											"PendingFileName": {
												"value": "@item().Name",
												"type": "Expression"
											},
											"LegalEntityId": {
												"value": "@pipeline().parameters.LegalEntityId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Log Error - Move To Complete",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Move To Complete",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_ProcessError",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ErrorCode": {
												"value": "@activity('Move To Complete').error.errorCode",
												"type": "Expression"
											},
											"ErrorMessage": {
												"value": "@activity('Move To Complete').error.message",
												"type": "Expression"
											},
											"ErrorLogicAppURL": {
												"value": "@variables('FTI_ConfigurationArray')[0]['ErrorLogicAppURL']",
												"type": "Expression"
											},
											"ErrorActivity": {
												"value": "@concat('Move To Complete')",
												"type": "Expression"
											},
											"StorageAccountKey": {
												"value": "@variables('FTI_BlobStorageAccessKey')",
												"type": "Expression"
											},
											"LogContainer": {
												"value": "@variables('FTI_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"PipelineTimeStamp": {
												"value": "@pipeline().parameters.PipelineFilenameTimestamp",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											},
											"IntegrationContainer": {
												"value": "@variables('FTI_ConfigurationArray')[0]['IntegrationContainer']",
												"type": "Expression"
											},
											"IntegrationInputFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['IngestionFolderPath']",
												"type": "Expression"
											},
											"IntegrationFailureFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['FailureFolder']",
												"type": "Expression"
											},
											"InProgressFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['InProgressFolderPath']",
												"type": "Expression"
											},
											"TransformedFolderPath": {
												"value": "@variables('FTI_ConfigurationArray')[0]['TransformedFolderPath']",
												"type": "Expression"
											},
											"SuccessFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['SuccessFolder']",
												"type": "Expression"
											},
											"ZippedFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['ZippedFolderPath']",
												"type": "Expression"
											},
											"ErroredZipFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['ErroredZipFolder']",
												"type": "Expression"
											},
											"IntegrationId": {
												"value": "@pipeline().parameters.IntegrationTypeId",
												"type": "Expression"
											},
											"SharepointFolder": {
												"value": "@pipeline().parameters.SharepointFolder",
												"type": "Expression"
											},
											"PendingFileName": {
												"value": "@item().Name",
												"type": "Expression"
											},
											"LegalEntityId": {
												"value": "@pipeline().parameters.LegalEntityId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Delete From Pending",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Move To Complete",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_CSV_MSI",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('FTI_ConfigurationArray')[0]['IntegrationContainer']",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"Folder": {
													"value": "@concat(\n    variables('FTI_ConfigurationArray')[0]['IngestionFolderPath'],'/',pipeline().parameters.PipelineRunId\n)",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Log Error - Delete From Pending",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Delete From Pending",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_ProcessError",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ErrorCode": {
												"value": "@activity('Delete From Pending').error.errorCode",
												"type": "Expression"
											},
											"ErrorMessage": {
												"value": "@activity('Delete From Pending').error.message",
												"type": "Expression"
											},
											"ErrorLogicAppURL": {
												"value": "@variables('FTI_ConfigurationArray')[0]['ErrorLogicAppURL']",
												"type": "Expression"
											},
											"ErrorActivity": {
												"value": "@concat('Delete From Pending')",
												"type": "Expression"
											},
											"StorageAccountKey": {
												"value": "@variables('FTI_BlobStorageAccessKey')",
												"type": "Expression"
											},
											"LogContainer": {
												"value": "@variables('FTI_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"PipelineTimeStamp": {
												"value": "@pipeline().parameters.PipelineFilenameTimestamp",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											},
											"IntegrationContainer": {
												"value": "@variables('FTI_ConfigurationArray')[0]['IntegrationContainer']",
												"type": "Expression"
											},
											"IntegrationInputFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['IngestionFolderPath']",
												"type": "Expression"
											},
											"IntegrationFailureFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['FailureFolder']",
												"type": "Expression"
											},
											"InProgressFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['InProgressFolderPath']",
												"type": "Expression"
											},
											"TransformedFolderPath": {
												"value": "@variables('FTI_ConfigurationArray')[0]['TransformedFolderPath']",
												"type": "Expression"
											},
											"SuccessFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['SuccessFolder']",
												"type": "Expression"
											},
											"ZippedFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['ZippedFolderPath']",
												"type": "Expression"
											},
											"ErroredZipFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['ErroredZipFolder']",
												"type": "Expression"
											},
											"IntegrationId": {
												"value": "@pipeline().parameters.IntegrationTypeId",
												"type": "Expression"
											},
											"SharepointFolder": {
												"value": "@variables('FTI_ConfigurationArray')[0]['SharepointDownloadFolder']",
												"type": "Expression"
											},
											"PendingFileName": {
												"value": "@item().Name",
												"type": "Expression"
											},
											"LegalEntityId": {
												"value": "@pipeline().parameters.LegalEntityId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Processed Folder Exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Processed Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Check Processed Folder').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete Processed Folder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_Folder_MSI",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.ConfigurationArray[0]['IntegrationContainer']",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@concat(pipeline().parameters.ConfigurationArray[0]['TransformedFolderPath'],'/',pipeline().parameters.PipelineRunId)",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIParagonServiceEndPoint",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Check Processed Folder",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "For Each CSV File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Folder_MSI",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.ConfigurationArray[0]['IntegrationContainer']",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@concat(pipeline().parameters.ConfigurationArray[0]['TransformedFolderPath'],'/',pipeline().parameters.PipelineRunId)",
										"type": "Expression"
									},
									"ls_prm_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PipelineRunId": {
						"type": "string"
					},
					"PipelineFilenameTimestamp": {
						"type": "string"
					},
					"IntegrationTypeId": {
						"type": "string"
					},
					"ConfigurationArray": {
						"type": "array"
					},
					"LegalEntityId": {
						"type": "string"
					},
					"IntegrationName": {
						"type": "string"
					},
					"SharepointFolder": {
						"type": "string"
					}
				},
				"variables": {
					"FTI_BlobStorageAccessKey": {
						"type": "String"
					},
					"FTI_ConfigurationArray": {
						"type": "Array"
					},
					"FTI_Counter": {
						"type": "String",
						"defaultValue": "0"
					},
					"FTI_TempCounter": {
						"type": "String",
						"defaultValue": "0"
					}
				},
				"folder": {
					"name": "02-Free-Text-Invoice"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-20T08:33:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Folder_MSI')]",
				"[concat(variables('factoryId'), '/pipelines/PL_ProcessError')]",
				"[concat(variables('factoryId'), '/datasets/DS_CSV_MSI')]",
				"[concat(variables('factoryId'), '/dataflows/DF_Core_Transformation_FreeTextInvoice')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Upload_Package')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_02_GJC_Process_Files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set GJ Configuration Array",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "GJ_ConfigurationArray",
							"value": {
								"value": "@pipeline().parameters.ConfigurationArray",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Check Pending Folder",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set GJ Configuration Array",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Folder_MSI",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@variables('GJ_ConfigurationArray')[0]['IntegrationContainer']",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@concat(variables('GJ_ConfigurationArray')[0]['IngestionFolderPath'],'/',\n\tpipeline().parameters.PipelineRunId\n)",
										"type": "Expression"
									},
									"ls_prm_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Log Error - Check Pending Folder",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Check Pending Folder",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ProcessError",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ErrorCode": {
									"value": "@activity('Check Pending Folder').error.errorCode",
									"type": "Expression"
								},
								"ErrorMessage": {
									"value": "@activity('Check Pending Folder').error.message",
									"type": "Expression"
								},
								"ErrorLogicAppURL": {
									"value": "@variables('GJ_ConfigurationArray')[0]['ErrorLogicAppURL']",
									"type": "Expression"
								},
								"ErrorActivity": {
									"value": "@concat('Download Sharepoint Files')",
									"type": "Expression"
								},
								"StorageAccountKey": {
									"value": "@variables('GJ_BlobStorageAccessKey')",
									"type": "Expression"
								},
								"LogContainer": {
									"value": "@variables('GJ_ConfigurationArray')[0]['LogContainer']",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@variables('GJ_ConfigurationArray')[0]['LogDirectory']",
									"type": "Expression"
								},
								"PipelineTimeStamp": {
									"value": "@pipeline().parameters.PipelineFilenameTimestamp",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().parameters.PipelineRunId",
									"type": "Expression"
								},
								"IntegrationContainer": {
									"value": "@variables('GJ_ConfigurationArray')[0]['IntegrationContainer']",
									"type": "Expression"
								},
								"IntegrationInputFolder": {
									"value": "@variables('GJ_ConfigurationArray')[0]['IngestionFolderPath']",
									"type": "Expression"
								},
								"IntegrationFailureFolder": {
									"value": "@variables('GJ_ConfigurationArray')[0]['FailureFolder']",
									"type": "Expression"
								},
								"InProgressFolder": {
									"value": "@variables('GJ_ConfigurationArray')[0]['InProgressFolderPath']",
									"type": "Expression"
								},
								"TransformedFolderPath": {
									"value": "@variables('GJ_ConfigurationArray')[0]['TransformedFolderPath']",
									"type": "Expression"
								},
								"SuccessFolder": {
									"value": "@variables('GJ_ConfigurationArray')[0]['SuccessFolder']",
									"type": "Expression"
								},
								"ZippedFolder": {
									"value": "@variables('GJ_ConfigurationArray')[0]['ZippedFolderPath']",
									"type": "Expression"
								},
								"ErroredZipFolder": {
									"value": "@variables('GJ_ConfigurationArray')[0]['ErroredZipFolder']",
									"type": "Expression"
								},
								"IntegrationId": {
									"value": "@pipeline().parameters.IntegrationTypeId",
									"type": "Expression"
								},
								"SharepointFolder": {
									"value": "@pipeline().parameters.SharepointFolder",
									"type": "Expression"
								},
								"LegalEntityId": {
									"value": "@pipeline().parameters.LegalEntityId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "For Each CSV File",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Check Pending Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Check Pending Folder').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 1,
							"activities": [
								{
									"name": "Copy To InProgress",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_CSV_MSI",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('GJ_ConfigurationArray')[0]['IntegrationContainer']",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"Folder": {
													"value": "@concat(\n\tvariables('GJ_ConfigurationArray')[0]['IngestionFolderPath'],'/',pipeline().parameters.PipelineRunId\n)",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_CSV_MSI",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('GJ_ConfigurationArray')[0]['IntegrationContainer']",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"Folder": {
													"value": "@concat(\n    variables('GJ_ConfigurationArray')[0]['InProgressFolderPath'],'/',\n    pipeline().parameters.PipelineRunId\n)",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "General Journal Dataflow",
									"description": "Run the dataflow to transform the ingested file and store it in the InProgress Folder path",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "Copy To InProgress",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "DF_Core_Transformation_GeneralJournal",
											"type": "DataFlowReference",
											"parameters": {
												"FileName": {
													"value": "'@{variables('GJ_ConfigurationArray')[0]['UploadFileName']}'",
													"type": "Expression"
												},
												"ProcessFileName": {
													"value": "'@{pipeline().parameters.ProcessFileName}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"Source": {
													"container": {
														"value": "@variables('GJ_ConfigurationArray')[0]['IntegrationContainer']",
														"type": "Expression"
													},
													"directory": {
														"value": "@concat(\n    variables('GJ_ConfigurationArray')[0]['InProgressFolderPath'],'/',pipeline().parameters.PipelineRunId\n)",
														"type": "Expression"
													},
													"FileName": {
														"value": "@item().Name",
														"type": "Expression"
													},
													"ls_prm_blob_mi": {
														"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
														"type": "Expression"
													}
												},
												"Sink": {
													"container": {
														"value": "@variables('GJ_ConfigurationArray')[0]['IntegrationContainer']",
														"type": "Expression"
													},
													"filename": {
														"value": "@variables('GJ_ConfigurationArray')[0]['UploadFileName']",
														"type": "Expression"
													},
													"Folder": {
														"value": "@concat(\n    variables('GJ_ConfigurationArray')[0]['TransformedFolderPath'],'/',pipeline().parameters.PipelineRunId\n)",
														"type": "Expression"
													},
													"ls_prm_blob_mi": {
														"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 16,
											"computeType": "General"
											"computeType": "ComputeReference",
											"referenceName": "shir-dev-core"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "Clear InProgress Folder",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "General Journal Dataflow",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_CSV_MSI",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('GJ_ConfigurationArray')[0]['IntegrationContainer']",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"Folder": {
													"value": "@concat(\n    variables('GJ_ConfigurationArray')[0]['InProgressFolderPath'],'/',pipeline().parameters.PipelineRunId\n)",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"wildcardFileName": {
												"value": "*.csv",
												"type": "Expression"
											},
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "ExecuteUploadPackagePipeline_GJ",
									"description": "Zipping the file and uploading to D365",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Clear InProgress Folder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Upload_Package",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Container": {
												"value": "@variables('GJ_ConfigurationArray')[0]['IntegrationContainer']",
												"type": "Expression"
											},
											"definitionGroupId": {
												"value": "@variables('GJ_ConfigurationArray')[0]['DefinitionGroupId']",
												"type": "Expression"
											},
											"StorageAccountKey": {
												"value": "@variables('GJ_BlobStorageAccessKey')",
												"type": "Expression"
											},
											"ZippedFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['ZippedFolderPath']",
												"type": "Expression"
											},
											"SecretName": {
												"value": "@variables('GJ_ConfigurationArray')[0]['PasswordSecretName']",
												"type": "Expression"
											},
											"AppID": {
												"value": "@variables('GJ_ConfigurationArray')[0]['AppID']",
												"type": "Expression"
											},
											"TenantID": {
												"value": "@variables('GJ_ConfigurationArray')[0]['TenantIDSecret']",
												"type": "Expression"
											},
											"d365URL": {
												"value": "@variables('GJ_ConfigurationArray')[0]['D365URL']",
												"type": "Expression"
											},
											"LogContainer": {
												"value": "@variables('GJ_ConfigurationArray')[0]['LogContainer']",
												"type": "Expression"
											},
											"PackageFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['MetadataFolderPath']",
												"type": "Expression"
											},
											"PackageContainer": {
												"value": "@pipeline().globalParameters.ConfigurationContainer",
												"type": "Expression"
											},
											"InProgressFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['InProgressFolderPath']",
												"type": "Expression"
											},
											"ErrorLogicAppURL": {
												"value": "@variables('GJ_ConfigurationArray')[0]['ErrorLogicAppURL']",
												"type": "Expression"
											},
											"PipeLineRunId": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											},
											"PipeLineTimeStamp": {
												"value": "@pipeline().parameters.PipelineFilenameTimestamp",
												"type": "Expression"
											},
											"LegalEntityId": {
												"value": "@pipeline().parameters.LegalEntityId",
												"type": "Expression"
											},
											"ErrorSourceContainer": {
												"value": "@variables('GJ_ConfigurationArray')[0]['IntegrationContainer']",
												"type": "Expression"
											},
											"LogDirectory": {
												"value": "@variables('GJ_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"IntegrationContainer": {
												"value": "@variables('GJ_ConfigurationArray')[0]['IntegrationContainer']",
												"type": "Expression"
											},
											"IntegrationInputFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['IngestionFolderPath']",
												"type": "Expression"
											},
											"IntegrationFailureFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['FailureFolder']",
												"type": "Expression"
											},
											"TransformedFolderPath": {
												"value": "@variables('GJ_ConfigurationArray')[0]['TransformedFolderPath']",
												"type": "Expression"
											},
											"CompleteFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['CompleteFolder']",
												"type": "Expression"
											},
											"UploadFileName": {
												"value": "@variables('GJ_ConfigurationArray')[0]['UploadFileName']",
												"type": "Expression"
											},
											"FileName": {
												"value": "@variables('GJ_ConfigurationArray')[0]['FileName']",
												"type": "Expression"
											},
											"ErroredZipFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['ErroredZipFolder']",
												"type": "Expression"
											},
											"UploadedZipFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['UploadedZipFolder']",
												"type": "Expression"
											},
											"FilenameTimestamp": {
												"value": "@pipeline().parameters.PipelineFilenameTimestamp",
												"type": "Expression"
											},
											"IntegrationId": {
												"value": "@pipeline().parameters.IntegrationTypeId",
												"type": "Expression"
											},
											"SharepointFolder": {
												"value": "@pipeline().parameters.SharepointFolder",
												"type": "Expression"
											},
											"PendingFileName": {
												"value": "@item().Name",
												"type": "Expression"
											},
											"IntegrationName": {
												"value": "@pipeline().parameters.IntegrationName",
												"type": "Expression"
											},
											"ImportLogFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['D365ImportLogFolder']",
												"type": "Expression"
											},
											"AzureKeyVault": {
												"value": "@pipeline().globalParameters.GeneralJournalAzureKeyVault",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Move To Complete",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "ExecuteUploadPackagePipeline_GJ",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_CSV_MSI",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('GJ_ConfigurationArray')[0]['IntegrationContainer']",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"Folder": {
													"value": "@concat(\n    variables('GJ_ConfigurationArray')[0]['IngestionFolderPath'],'/',pipeline().parameters.PipelineRunId\n    )",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_CSV_MSI",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('GJ_ConfigurationArray')[0]['IntegrationContainer']",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"Folder": {
													"value": "@concat(\n    variables('GJ_ConfigurationArray')[0]['SuccessFolder'],'/',\n    substring(pipeline().parameters.PipelineFilenameTimestamp,0,17)\n)",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Log Error - Copy To InProgress",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Copy To InProgress",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_ProcessError",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ErrorCode": {
												"value": "@activity('Copy To InProgress').error.errorCode",
												"type": "Expression"
											},
											"ErrorMessage": {
												"value": "@activity('Copy To InProgress').error.message",
												"type": "Expression"
											},
											"ErrorLogicAppURL": {
												"value": "@variables('GJ_ConfigurationArray')[0]['ErrorLogicAppURL']",
												"type": "Expression"
											},
											"ErrorActivity": {
												"value": "@concat('Copy To InProgess')",
												"type": "Expression"
											},
											"StorageAccountKey": {
												"value": "@variables('GJ_BlobStorageAccessKey')",
												"type": "Expression"
											},
											"LogContainer": {
												"value": "@variables('GJ_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"PipelineTimeStamp": {
												"value": "@pipeline().parameters.PipelineFilenameTimestamp",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											},
											"IntegrationContainer": {
												"value": "@variables('GJ_ConfigurationArray')[0]['IntegrationContainer']",
												"type": "Expression"
											},
											"IntegrationInputFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['IngestionFolderPath']",
												"type": "Expression"
											},
											"IntegrationFailureFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['FailureFolder']",
												"type": "Expression"
											},
											"InProgressFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['InProgressFolderPath']",
												"type": "Expression"
											},
											"TransformedFolderPath": {
												"value": "@variables('GJ_ConfigurationArray')[0]['TransformedFolderPath']",
												"type": "Expression"
											},
											"SuccessFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['SuccessFolder']",
												"type": "Expression"
											},
											"ZippedFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['ZippedFolderPath']",
												"type": "Expression"
											},
											"ErroredZipFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['ErroredZipFolder']",
												"type": "Expression"
											},
											"IntegrationId": {
												"value": "@pipeline().parameters.IntegrationTypeId",
												"type": "Expression"
											},
											"SharepointFolder": {
												"value": "@pipeline().parameters.SharepointFolder",
												"type": "Expression"
											},
											"PendingFileName": {
												"value": "@item().Name",
												"type": "Expression"
											},
											"LegalEntityId": {
												"value": "@pipeline().parameters.LegalEntityId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Log Error - General Journal Dataflow",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "General Journal Dataflow",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_ProcessError",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ErrorCode": {
												"value": "@activity('General Journal Dataflow').error.errorCode",
												"type": "Expression"
											},
											"ErrorMessage": {
												"value": "@activity('General Journal Dataflow').error.message",
												"type": "Expression"
											},
											"ErrorLogicAppURL": {
												"value": "@variables('GJ_ConfigurationArray')[0]['ErrorLogicAppURL']",
												"type": "Expression"
											},
											"ErrorActivity": {
												"value": "@concat('General Journal DataFlow')",
												"type": "Expression"
											},
											"StorageAccountKey": {
												"value": "@variables('GJ_BlobStorageAccessKey')",
												"type": "Expression"
											},
											"LogContainer": {
												"value": "@variables('GJ_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"PipelineTimeStamp": {
												"value": "@pipeline().parameters.PipelineFilenameTimestamp",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											},
											"IntegrationContainer": {
												"value": "@variables('GJ_ConfigurationArray')[0]['IntegrationContainer']",
												"type": "Expression"
											},
											"IntegrationInputFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['IngestionFolderPath']",
												"type": "Expression"
											},
											"IntegrationFailureFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['FailureFolder']",
												"type": "Expression"
											},
											"InProgressFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['InProgressFolderPath']",
												"type": "Expression"
											},
											"TransformedFolderPath": {
												"value": "@variables('GJ_ConfigurationArray')[0]['TransformedFolderPath']",
												"type": "Expression"
											},
											"SuccessFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['SuccessFolder']",
												"type": "Expression"
											},
											"ZippedFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['ZippedFolderPath']",
												"type": "Expression"
											},
											"ErroredZipFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['ErroredZipFolder']",
												"type": "Expression"
											},
											"IntegrationId": {
												"value": "@pipeline().parameters.IntegrationTypeId",
												"type": "Expression"
											},
											"SharepointFolder": {
												"value": "@pipeline().parameters.SharepointFolder",
												"type": "Expression"
											},
											"PendingFileName": {
												"value": "@item().Name",
												"type": "Expression"
											},
											"LegalEntityId": {
												"value": "@pipeline().parameters.LegalEntityId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Log Error - Clear InProgress Folder",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Clear InProgress Folder",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_ProcessError",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ErrorCode": {
												"value": "@activity('Clear InProgress Folder').error.errorCode",
												"type": "Expression"
											},
											"ErrorMessage": {
												"value": "@activity('Clear InProgress Folder').error.message",
												"type": "Expression"
											},
											"ErrorLogicAppURL": {
												"value": "@variables('GJ_ConfigurationArray')[0]['ErrorLogicAppURL']",
												"type": "Expression"
											},
											"ErrorActivity": {
												"value": "@concat('Clear InProgress Folder')",
												"type": "Expression"
											},
											"StorageAccountKey": {
												"value": "@variables('GJ_BlobStorageAccessKey')",
												"type": "Expression"
											},
											"LogContainer": {
												"value": "@variables('GJ_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"PipelineTimeStamp": {
												"value": "@pipeline().parameters.PipelineFilenameTimestamp",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											},
											"IntegrationContainer": {
												"value": "@variables('GJ_ConfigurationArray')[0]['IntegrationContainer']",
												"type": "Expression"
											},
											"IntegrationInputFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['IngestionFolderPath']",
												"type": "Expression"
											},
											"IntegrationFailureFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['FailureFolder']",
												"type": "Expression"
											},
											"InProgressFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['InProgressFolderPath']",
												"type": "Expression"
											},
											"TransformedFolderPath": {
												"value": "@variables('GJ_ConfigurationArray')[0]['TransformedFolderPath']",
												"type": "Expression"
											},
											"SuccessFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['SuccessFolder']",
												"type": "Expression"
											},
											"ZippedFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['ZippedFolderPath']",
												"type": "Expression"
											},
											"ErroredZipFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['ErroredZipFolder']",
												"type": "Expression"
											},
											"IntegrationId": {
												"value": "@pipeline().parameters.IntegrationTypeId",
												"type": "Expression"
											},
											"SharepointFolder": {
												"value": "@pipeline().parameters.SharepointFolder",
												"type": "Expression"
											},
											"PendingFileName": {
												"value": "@item().Name",
												"type": "Expression"
											},
											"LegalEntityId": {
												"value": "@pipeline().parameters.LegalEntityId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Log Error - Move To Complete",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Move To Complete",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_ProcessError",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ErrorCode": {
												"value": "@activity('Move To Complete').error.errorCode",
												"type": "Expression"
											},
											"ErrorMessage": {
												"value": "@activity('Move To Complete').error.message",
												"type": "Expression"
											},
											"ErrorLogicAppURL": {
												"value": "@variables('GJ_ConfigurationArray')[0]['ErrorLogicAppURL']",
												"type": "Expression"
											},
											"ErrorActivity": {
												"value": "@concat('Move To Complete')",
												"type": "Expression"
											},
											"StorageAccountKey": {
												"value": "@variables('GJ_BlobStorageAccessKey')",
												"type": "Expression"
											},
											"LogContainer": {
												"value": "@variables('GJ_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"PipelineTimeStamp": {
												"value": "@pipeline().parameters.PipelineFilenameTimestamp",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											},
											"IntegrationContainer": {
												"value": "@variables('GJ_ConfigurationArray')[0]['IntegrationContainer']",
												"type": "Expression"
											},
											"IntegrationInputFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['IngestionFolderPath']",
												"type": "Expression"
											},
											"IntegrationFailureFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['FailureFolder']",
												"type": "Expression"
											},
											"InProgressFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['InProgressFolderPath']",
												"type": "Expression"
											},
											"TransformedFolderPath": {
												"value": "@variables('GJ_ConfigurationArray')[0]['TransformedFolderPath']",
												"type": "Expression"
											},
											"SuccessFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['SuccessFolder']",
												"type": "Expression"
											},
											"ZippedFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['ZippedFolderPath']",
												"type": "Expression"
											},
											"ErroredZipFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['ErroredZipFolder']",
												"type": "Expression"
											},
											"IntegrationId": {
												"value": "@pipeline().parameters.IntegrationTypeId",
												"type": "Expression"
											},
											"SharepointFolder": {
												"value": "@pipeline().parameters.SharepointFolder",
												"type": "Expression"
											},
											"PendingFileName": {
												"value": "@item().Name",
												"type": "Expression"
											},
											"LegalEntityId": {
												"value": "@pipeline().parameters.LegalEntityId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Delete From Pending",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Move To Complete",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_CSV_MSI",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('GJ_ConfigurationArray')[0]['IntegrationContainer']",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"Folder": {
													"value": "@concat(\n    variables('GJ_ConfigurationArray')[0]['IngestionFolderPath'],'/',pipeline().parameters.PipelineRunId\n)",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Log Error - Delete From Pending",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Delete From Pending",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_ProcessError",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ErrorCode": {
												"value": "@activity('Delete From Pending').error.errorCode",
												"type": "Expression"
											},
											"ErrorMessage": {
												"value": "@activity('Delete From Pending').error.message",
												"type": "Expression"
											},
											"ErrorLogicAppURL": {
												"value": "@variables('GJ_ConfigurationArray')[0]['ErrorLogicAppURL']",
												"type": "Expression"
											},
											"ErrorActivity": {
												"value": "@concat('Delete From Pending')",
												"type": "Expression"
											},
											"StorageAccountKey": {
												"value": "@variables('GJ_BlobStorageAccessKey')",
												"type": "Expression"
											},
											"LogContainer": {
												"value": "@variables('GJ_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"PipelineTimeStamp": {
												"value": "@pipeline().parameters.PipelineFilenameTimestamp",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											},
											"IntegrationContainer": {
												"value": "@variables('GJ_ConfigurationArray')[0]['IntegrationContainer']",
												"type": "Expression"
											},
											"IntegrationInputFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['IngestionFolderPath']",
												"type": "Expression"
											},
											"IntegrationFailureFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['FailureFolder']",
												"type": "Expression"
											},
											"InProgressFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['InProgressFolderPath']",
												"type": "Expression"
											},
											"TransformedFolderPath": {
												"value": "@variables('GJ_ConfigurationArray')[0]['TransformedFolderPath']",
												"type": "Expression"
											},
											"SuccessFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['SuccessFolder']",
												"type": "Expression"
											},
											"ZippedFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['ZippedFolderPath']",
												"type": "Expression"
											},
											"ErroredZipFolder": {
												"value": "@variables('GJ_ConfigurationArray')[0]['ErroredZipFolder']",
												"type": "Expression"
											},
											"IntegrationId": {
												"value": "@pipeline().parameters.IntegrationTypeId",
												"type": "Expression"
											},
											"SharepointFolder": {
												"value": "@pipeline().parameters.SharepointFolder",
												"type": "Expression"
											},
											"PendingFileName": {
												"value": "@item().Name",
												"type": "Expression"
											},
											"LegalEntityId": {
												"value": "@pipeline().parameters.LegalEntityId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Processed Folder Exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Processed Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Check Processed Folder').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete Processed Folder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_Folder_MSI",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.ConfigurationArray[0]['IntegrationContainer']",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@concat(pipeline().parameters.ConfigurationArray[0]['TransformedFolderPath'],'/',pipeline().parameters.PipelineRunId)",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Check Processed Folder",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "For Each CSV File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Folder_MSI",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.ConfigurationArray[0]['IntegrationContainer']",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@concat(pipeline().parameters.ConfigurationArray[0]['TransformedFolderPath'],'/',pipeline().parameters.PipelineRunId)",
										"type": "Expression"
									},
									"ls_prm_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PipelineRunId": {
						"type": "string"
					},
					"PipelineFilenameTimestamp": {
						"type": "string"
					},
					"IntegrationTypeId": {
						"type": "string"
					},
					"ConfigurationArray": {
						"type": "array"
					},
					"LegalEntityId": {
						"type": "string"
					},
					"IntegrationName": {
						"type": "string"
					},
					"ProcessFileName": {
						"type": "string"
					},
					"SharepointFolder": {
						"type": "string"
					}
				},
				"variables": {
					"GJ_BlobStorageAccessKey": {
						"type": "String"
					},
					"GJ_ConfigurationArray": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "01-General-Journal"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-20T08:33:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Folder_MSI')]",
				"[concat(variables('factoryId'), '/pipelines/PL_ProcessError')]",
				"[concat(variables('factoryId'), '/datasets/DS_CSV_MSI')]",
				"[concat(variables('factoryId'), '/dataflows/DF_Core_Transformation_GeneralJournal')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Upload_Package')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_02_SBC_Process_Files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set SBC Configuration Array",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "SBC_ConfigurationArray",
							"value": {
								"value": "@pipeline().parameters.ConfigurationArray",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Check Pending Folder",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set SBC Configuration Array",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Folder_MSI",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@variables('SBC_ConfigurationArray')[0]['IntegrationContainer']",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@concat(variables('SBC_ConfigurationArray')[0]['IngestionFolderPath'],'/',\n\tpipeline().parameters.PipelineRunId\n)",
										"type": "Expression"
									},
									"ls_prm_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Log Error - Check Pending Folder",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Check Pending Folder",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ProcessError",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ErrorCode": {
									"value": "@activity('Check Pending Folder').error.errorCode",
									"type": "Expression"
								},
								"ErrorMessage": {
									"value": "@activity('Check Pending Folder').error.message",
									"type": "Expression"
								},
								"ErrorLogicAppURL": {
									"value": "@variables('SBC_ConfigurationArray')[0]['ErrorLogicAppURL']",
									"type": "Expression"
								},
								"ErrorActivity": {
									"value": "@concat('Download Sharepoint Files')",
									"type": "Expression"
								},
								"StorageAccountKey": {
									"value": "@variables('SBC_BlobStorageAccessKey')",
									"type": "Expression"
								},
								"LogContainer": {
									"value": "@variables('SBC_ConfigurationArray')[0]['LogContainer']",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@variables('SBC_ConfigurationArray')[0]['LogDirectory']",
									"type": "Expression"
								},
								"PipelineTimeStamp": {
									"value": "@pipeline().parameters.PipelineFilenameTimestamp",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().parameters.PipelineRunId",
									"type": "Expression"
								},
								"IntegrationContainer": {
									"value": "@variables('SBC_ConfigurationArray')[0]['IntegrationContainer']",
									"type": "Expression"
								},
								"IntegrationInputFolder": {
									"value": "@variables('SBC_ConfigurationArray')[0]['IngestionFolderPath']",
									"type": "Expression"
								},
								"IntegrationFailureFolder": {
									"value": "@variables('SBC_ConfigurationArray')[0]['FailureFolder']",
									"type": "Expression"
								},
								"InProgressFolder": {
									"value": "@variables('SBC_ConfigurationArray')[0]['InProgressFolderPath']",
									"type": "Expression"
								},
								"TransformedFolderPath": {
									"value": "@variables('SBC_ConfigurationArray')[0]['TransformedFolderPath']",
									"type": "Expression"
								},
								"SuccessFolder": {
									"value": "@variables('SBC_ConfigurationArray')[0]['SuccessFolder']",
									"type": "Expression"
								},
								"ZippedFolder": {
									"value": "@variables('SBC_ConfigurationArray')[0]['ZippedFolderPath']",
									"type": "Expression"
								},
								"ErroredZipFolder": {
									"value": "@variables('SBC_ConfigurationArray')[0]['ErroredZipFolder']",
									"type": "Expression"
								},
								"IntegrationId": {
									"value": "@pipeline().parameters.IntegrationTypeId",
									"type": "Expression"
								},
								"SharepointFolder": {
									"value": "@variables('SBC_ConfigurationArray')[0]['SharepointDownloadFolder']",
									"type": "Expression"
								},
								"LegalEntityId": {
									"value": "@pipeline().parameters.LegalEntityId",
									"type": "Expression"
								},
								"ZipFileName": {
									"value": "@pipeline().parameters.PipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "For Each CSV File",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Check Pending Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Check Pending Folder').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy To InProgress",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_CSV_MSI",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('SBC_ConfigurationArray')[0]['IntegrationContainer']",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"Folder": {
													"value": "@concat(\n\tvariables('SBC_ConfigurationArray')[0]['IngestionFolderPath'],'/',\n\tpipeline().parameters.PipelineRunId\n)",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_CSV_MSI",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('SBC_ConfigurationArray')[0]['IntegrationContainer']",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"Folder": {
													"value": "@concat(\n    variables('SBC_ConfigurationArray')[0]['InProgressFolderPath'],'/',    \n    pipeline().parameters.PipelineRunId\n)",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SelfBilling Dataflow",
									"description": "Run the dataflow to transform the ingested file and store it in the InProgress Folder path",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "Copy To InProgress",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "DF_Core_Transformation_SelfBilling",
											"type": "DataFlowReference",
											"parameters": {
												"FileName": {
													"value": "'@{variables('SBC_ConfigurationArray')[0]['UploadFileName']}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {
													"container": {
														"value": "@variables('SBC_ConfigurationArray')[0]['IntegrationContainer']",
														"type": "Expression"
													},
													"directory": {
														"value": "@concat(\n    variables('SBC_ConfigurationArray')[0]['InProgressFolderPath'],'/',pipeline().parameters.PipelineRunId\n)",
														"type": "Expression"
													},
													"FileName": {
														"value": "@item().Name",
														"type": "Expression"
													},
													"ls_prm_blob_mi": {
														"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
														"type": "Expression"
													}
												},
												"sink1": {
													"container": {
														"value": "@variables('SBC_ConfigurationArray')[0]['IntegrationContainer']",
														"type": "Expression"
													},
													"filename": {
														"value": "@variables('SBC_ConfigurationArray')[0]['UploadFileName']",
														"type": "Expression"
													},
													"Folder": {
														"value": "@concat(variables('SBC_ConfigurationArray')[0]['TransformedFolderPath'],'/',pipeline().parameters.PipelineRunId\n)",
														"type": "Expression"
													},
													"ls_prm_blob_mi": {
														"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 16,
											"computeType": "General"
											"computeType": "ComputeReference",
											"referenceName": "shir-dev-core"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "Clear InProgress Folder",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "SelfBilling Dataflow",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_CSV_MSI",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('SBC_ConfigurationArray')[0]['IntegrationContainer']",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"Folder": {
													"value": "@concat(\n    variables('SBC_ConfigurationArray')[0]['InProgressFolderPath'],'/',pipeline().parameters.PipelineRunId\n)",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"wildcardFileName": {
												"value": "*.csv",
												"type": "Expression"
											},
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "ExecuteUploadPackagePipeline_SBC",
									"description": "Zipping the file and uploading to D365",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Clear InProgress Folder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Upload_Package",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Container": {
												"value": "@variables('SBC_ConfigurationArray')[0]['IntegrationContainer']",
												"type": "Expression"
											},
											"definitionGroupId": {
												"value": "@variables('SBC_ConfigurationArray')[0]['DefinitionGroupId']",
												"type": "Expression"
											},
											"StorageAccountKey": {
												"value": "@variables('SBC_BlobStorageAccessKey')",
												"type": "Expression"
											},
											"ZippedFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['ZippedFolderPath']",
												"type": "Expression"
											},
											"SecretName": {
												"value": "@variables('SBC_ConfigurationArray')[0]['PasswordSecretName']",
												"type": "Expression"
											},
											"AppID": {
												"value": "@variables('SBC_ConfigurationArray')[0]['AppID']",
												"type": "Expression"
											},
											"TenantID": {
												"value": "@variables('SBC_ConfigurationArray')[0]['TenantIDSecret']",
												"type": "Expression"
											},
											"d365URL": {
												"value": "@variables('SBC_ConfigurationArray')[0]['D365URL']",
												"type": "Expression"
											},
											"LogContainer": {
												"value": "@variables('SBC_ConfigurationArray')[0]['LogContainer']",
												"type": "Expression"
											},
											"PackageFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['MetadataFolderPath']",
												"type": "Expression"
											},
											"PackageContainer": {
												"value": "@pipeline().globalParameters.ConfigurationContainer",
												"type": "Expression"
											},
											"InProgressFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['InProgressFolderPath']",
												"type": "Expression"
											},
											"ErrorLogicAppURL": {
												"value": "@variables('SBC_ConfigurationArray')[0]['ErrorLogicAppURL']",
												"type": "Expression"
											},
											"PipeLineRunId": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											},
											"PipeLineTimeStamp": {
												"value": "@pipeline().parameters.PipelineFilenameTimestamp",
												"type": "Expression"
											},
											"LegalEntityId": {
												"value": "@pipeline().parameters.LegalEntityId",
												"type": "Expression"
											},
											"ErrorSourceContainer": {
												"value": "@variables('SBC_ConfigurationArray')[0]['IntegrationContainer']",
												"type": "Expression"
											},
											"LogDirectory": {
												"value": "@variables('SBC_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"IntegrationContainer": {
												"value": "@variables('SBC_ConfigurationArray')[0]['IntegrationContainer']",
												"type": "Expression"
											},
											"IntegrationInputFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['IngestionFolderPath']",
												"type": "Expression"
											},
											"IntegrationFailureFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['FailureFolder']",
												"type": "Expression"
											},
											"TransformedFolderPath": {
												"value": "@variables('SBC_ConfigurationArray')[0]['TransformedFolderPath']",
												"type": "Expression"
											},
											"CompleteFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['CompleteFolder']",
												"type": "Expression"
											},
											"UploadFileName": {
												"value": "@variables('SBC_ConfigurationArray')[0]['UploadFileName']",
												"type": "Expression"
											},
											"FileName": {
												"value": "@variables('SBC_ConfigurationArray')[0]['FileName']",
												"type": "Expression"
											},
											"ErroredZipFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['ErroredZipFolder']",
												"type": "Expression"
											},
											"UploadedZipFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['UploadedZipFolder']",
												"type": "Expression"
											},
											"FilenameTimestamp": {
												"value": "@pipeline().parameters.PipelineFilenameTimestamp",
												"type": "Expression"
											},
											"IntegrationId": {
												"value": "@pipeline().parameters.IntegrationTypeId",
												"type": "Expression"
											},
											"SharepointFolder": {
												"value": "@pipeline().parameters.SharepointFolder",
												"type": "Expression"
											},
											"PendingFileName": {
												"value": "@item().Name",
												"type": "Expression"
											},
											"IntegrationName": {
												"value": "@pipeline().parameters.IntegrationName",
												"type": "Expression"
											},
											"ImportLogFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['D365ImportLogFolder']",
												"type": "Expression"
											},
											"AzureKeyVault": {
												"value": "@pipeline().globalParameters.SelfBillingAzureKeyVault",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Move To Complete",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "ExecuteUploadPackagePipeline_SBC",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_CSV_MSI",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('SBC_ConfigurationArray')[0]['IntegrationContainer']",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"Folder": {
													"value": "@concat(\n    variables('SBC_ConfigurationArray')[0]['IngestionFolderPath'],'/',pipeline().parameters.PipelineRunId\n)",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_CSV_MSI",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('SBC_ConfigurationArray')[0]['IntegrationContainer']",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"Folder": {
													"value": "@concat(variables('SBC_ConfigurationArray')[0]['SuccessFolder'],'/',substring(pipeline().parameters.PipelineFilenameTimestamp,0,17)\n)\n",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Log Error - Copy To InProgress",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Copy To InProgress",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_ProcessError",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ErrorCode": {
												"value": "@activity('Copy To InProgress').error.errorCode",
												"type": "Expression"
											},
											"ErrorMessage": {
												"value": "@activity('Copy To InProgress').error.message",
												"type": "Expression"
											},
											"ErrorLogicAppURL": {
												"value": "@variables('SBC_ConfigurationArray')[0]['ErrorLogicAppURL']",
												"type": "Expression"
											},
											"ErrorActivity": {
												"value": "@concat('Copy To InProgess')",
												"type": "Expression"
											},
											"StorageAccountKey": {
												"value": "@variables('SBC_BlobStorageAccessKey')",
												"type": "Expression"
											},
											"LogContainer": {
												"value": "@variables('SBC_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"PipelineTimeStamp": {
												"value": "@pipeline().parameters.PipelineFilenameTimestamp",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											},
											"IntegrationContainer": {
												"value": "@variables('SBC_ConfigurationArray')[0]['IntegrationContainer']",
												"type": "Expression"
											},
											"IntegrationInputFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['IngestionFolderPath']",
												"type": "Expression"
											},
											"IntegrationFailureFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['FailureFolder']",
												"type": "Expression"
											},
											"InProgressFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['InProgressFolderPath']",
												"type": "Expression"
											},
											"TransformedFolderPath": {
												"value": "@variables('SBC_ConfigurationArray')[0]['TransformedFolderPath']",
												"type": "Expression"
											},
											"SuccessFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['SuccessFolder']",
												"type": "Expression"
											},
											"ZippedFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['ZippedFolderPath']",
												"type": "Expression"
											},
											"ErroredZipFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['ErroredZipFolder']",
												"type": "Expression"
											},
											"IntegrationId": {
												"value": "@pipeline().parameters.IntegrationTypeId",
												"type": "Expression"
											},
											"SharepointFolder": {
												"value": "@pipeline().parameters.SharepointFolder",
												"type": "Expression"
											},
											"PendingFileName": {
												"value": "@item().Name",
												"type": "Expression"
											},
											"LegalEntityId": {
												"value": "@pipeline().parameters.LegalEntityId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Log Error - General Journal Dataflow",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "SelfBilling Dataflow",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_ProcessError",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ErrorCode": {
												"value": "@activity('SelfBilling Dataflow').error.errorCode",
												"type": "Expression"
											},
											"ErrorMessage": {
												"value": "@activity('SelfBilling Dataflow').error.message",
												"type": "Expression"
											},
											"ErrorLogicAppURL": {
												"value": "@variables('SBC_ConfigurationArray')[0]['ErrorLogicAppURL']",
												"type": "Expression"
											},
											"ErrorActivity": {
												"value": "@concat('General Journal DataFlow')",
												"type": "Expression"
											},
											"StorageAccountKey": {
												"value": "@variables('SBC_BlobStorageAccessKey')",
												"type": "Expression"
											},
											"LogContainer": {
												"value": "@variables('SBC_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"PipelineTimeStamp": {
												"value": "@pipeline().parameters.PipelineFilenameTimestamp",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											},
											"IntegrationContainer": {
												"value": "@variables('SBC_ConfigurationArray')[0]['IntegrationContainer']",
												"type": "Expression"
											},
											"IntegrationInputFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['IngestionFolderPath']",
												"type": "Expression"
											},
											"IntegrationFailureFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['FailureFolder']",
												"type": "Expression"
											},
											"InProgressFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['InProgressFolderPath']",
												"type": "Expression"
											},
											"TransformedFolderPath": {
												"value": "@variables('SBC_ConfigurationArray')[0]['TransformedFolderPath']",
												"type": "Expression"
											},
											"SuccessFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['SuccessFolder']",
												"type": "Expression"
											},
											"ZippedFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['ZippedFolderPath']",
												"type": "Expression"
											},
											"ErroredZipFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['ErroredZipFolder']",
												"type": "Expression"
											},
											"IntegrationId": {
												"value": "@pipeline().parameters.IntegrationTypeId",
												"type": "Expression"
											},
											"SharepointFolder": {
												"value": "@pipeline().parameters.SharepointFolder",
												"type": "Expression"
											},
											"PendingFileName": {
												"value": "@item().Name",
												"type": "Expression"
											},
											"LegalEntityId": {
												"value": "@pipeline().parameters.LegalEntityId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Log Error - Clear InProgress Folder",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Clear InProgress Folder",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_ProcessError",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ErrorCode": {
												"value": "@activity('Clear InProgress Folder').error.errorCode",
												"type": "Expression"
											},
											"ErrorMessage": {
												"value": "@activity('Clear InProgress Folder').error.message",
												"type": "Expression"
											},
											"ErrorLogicAppURL": {
												"value": "@variables('SBC_ConfigurationArray')[0]['ErrorLogicAppURL']",
												"type": "Expression"
											},
											"ErrorActivity": {
												"value": "@concat('Clear InProgress Folder')",
												"type": "Expression"
											},
											"StorageAccountKey": {
												"value": "@variables('SBC_BlobStorageAccessKey')",
												"type": "Expression"
											},
											"LogContainer": {
												"value": "@variables('SBC_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"PipelineTimeStamp": {
												"value": "@pipeline().parameters.PipelineFilenameTimestamp",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											},
											"IntegrationContainer": {
												"value": "@variables('SBC_ConfigurationArray')[0]['IntegrationContainer']",
												"type": "Expression"
											},
											"IntegrationInputFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['IngestionFolderPath']",
												"type": "Expression"
											},
											"IntegrationFailureFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['FailureFolder']",
												"type": "Expression"
											},
											"InProgressFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['InProgressFolderPath']",
												"type": "Expression"
											},
											"TransformedFolderPath": {
												"value": "@variables('SBC_ConfigurationArray')[0]['TransformedFolderPath']",
												"type": "Expression"
											},
											"SuccessFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['SuccessFolder']",
												"type": "Expression"
											},
											"ZippedFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['ZippedFolderPath']",
												"type": "Expression"
											},
											"ErroredZipFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['ErroredZipFolder']",
												"type": "Expression"
											},
											"IntegrationId": {
												"value": "@pipeline().parameters.IntegrationTypeId",
												"type": "Expression"
											},
											"SharepointFolder": {
												"value": "@pipeline().parameters.SharepointFolder",
												"type": "Expression"
											},
											"PendingFileName": {
												"value": "@item().Name",
												"type": "Expression"
											},
											"LegalEntityId": {
												"value": "@pipeline().parameters.LegalEntityId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Log Error - Move To Complete",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Move To Complete",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_ProcessError",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ErrorCode": {
												"value": "@activity('Move To Complete').error.errorCode",
												"type": "Expression"
											},
											"ErrorMessage": {
												"value": "@activity('Move To Complete').error.message",
												"type": "Expression"
											},
											"ErrorLogicAppURL": {
												"value": "@variables('SBC_ConfigurationArray')[0]['ErrorLogicAppURL']",
												"type": "Expression"
											},
											"ErrorActivity": {
												"value": "@concat('Move To Complete')",
												"type": "Expression"
											},
											"StorageAccountKey": {
												"value": "@variables('SBC_BlobStorageAccessKey')",
												"type": "Expression"
											},
											"LogContainer": {
												"value": "@variables('SBC_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"PipelineTimeStamp": {
												"value": "@pipeline().parameters.PipelineFilenameTimestamp",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											},
											"IntegrationContainer": {
												"value": "@variables('SBC_ConfigurationArray')[0]['IntegrationContainer']",
												"type": "Expression"
											},
											"IntegrationInputFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['IngestionFolderPath']",
												"type": "Expression"
											},
											"IntegrationFailureFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['FailureFolder']",
												"type": "Expression"
											},
											"InProgressFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['InProgressFolderPath']",
												"type": "Expression"
											},
											"TransformedFolderPath": {
												"value": "@variables('SBC_ConfigurationArray')[0]['TransformedFolderPath']",
												"type": "Expression"
											},
											"SuccessFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['SuccessFolder']",
												"type": "Expression"
											},
											"ZippedFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['ZippedFolderPath']",
												"type": "Expression"
											},
											"ErroredZipFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['ErroredZipFolder']",
												"type": "Expression"
											},
											"IntegrationId": {
												"value": "@pipeline().parameters.IntegrationTypeId",
												"type": "Expression"
											},
											"SharepointFolder": {
												"value": "@pipeline().parameters.SharepointFolder",
												"type": "Expression"
											},
											"PendingFileName": {
												"value": "@item().Name",
												"type": "Expression"
											},
											"LegalEntityId": {
												"value": "@pipeline().parameters.LegalEntityId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Delete From Pending",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Move To Complete",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_CSV_MSI",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('SBC_ConfigurationArray')[0]['IntegrationContainer']",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"Folder": {
													"value": "@concat(\n    variables('SBC_ConfigurationArray')[0]['IngestionFolderPath'],'/',pipeline().parameters.PipelineRunId\n)",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Log Error - Delete From Pending",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Delete From Pending",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_ProcessError",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ErrorCode": {
												"value": "@activity('Delete From Pending').error.errorCode",
												"type": "Expression"
											},
											"ErrorMessage": {
												"value": "@activity('Delete From Pending').error.message",
												"type": "Expression"
											},
											"ErrorLogicAppURL": {
												"value": "@variables('SBC_ConfigurationArray')[0]['ErrorLogicAppURL']",
												"type": "Expression"
											},
											"ErrorActivity": {
												"value": "@concat('Delete From Pending')",
												"type": "Expression"
											},
											"StorageAccountKey": {
												"value": "@variables('SBC_BlobStorageAccessKey')",
												"type": "Expression"
											},
											"LogContainer": {
												"value": "@variables('SBC_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['LogDirectory']",
												"type": "Expression"
											},
											"PipelineTimeStamp": {
												"value": "@pipeline().parameters.PipelineFilenameTimestamp",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											},
											"IntegrationContainer": {
												"value": "@variables('SBC_ConfigurationArray')[0]['IntegrationContainer']",
												"type": "Expression"
											},
											"IntegrationInputFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['IngestionFolderPath']",
												"type": "Expression"
											},
											"IntegrationFailureFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['FailureFolder']",
												"type": "Expression"
											},
											"InProgressFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['InProgressFolderPath']",
												"type": "Expression"
											},
											"TransformedFolderPath": {
												"value": "@variables('SBC_ConfigurationArray')[0]['TransformedFolderPath']",
												"type": "Expression"
											},
											"SuccessFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['SuccessFolder']",
												"type": "Expression"
											},
											"ZippedFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['ZippedFolderPath']",
												"type": "Expression"
											},
											"ErroredZipFolder": {
												"value": "@variables('SBC_ConfigurationArray')[0]['ErroredZipFolder']",
												"type": "Expression"
											},
											"IntegrationId": {
												"value": "@pipeline().parameters.IntegrationTypeId",
												"type": "Expression"
											},
											"SharepointFolder": {
												"value": "@pipeline().parameters.SharepointFolder",
												"type": "Expression"
											},
											"PendingFileName": {
												"value": "@item().Name",
												"type": "Expression"
											},
											"LegalEntityId": {
												"value": "@pipeline().parameters.LegalEntityId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.PipelineRunId",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Processed Folder Exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Processed Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Check Processed Folder').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete Processed Folder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_Folder_MSI",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.ConfigurationArray[0]['IntegrationContainer']",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@concat(pipeline().parameters.ConfigurationArray[0]['TransformedFolderPath'],'/',pipeline().parameters.PipelineRunId)",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Check Processed Folder",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "For Each CSV File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Folder_MSI",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.ConfigurationArray[0]['IntegrationContainer']",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@concat(pipeline().parameters.ConfigurationArray[0]['TransformedFolderPath'],'/',pipeline().parameters.PipelineRunId)",
										"type": "Expression"
									},
									"ls_prm_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PipelineRunId": {
						"type": "string"
					},
					"PipelineFilenameTimestamp": {
						"type": "string"
					},
					"IntegrationTypeId": {
						"type": "string"
					},
					"ConfigurationArray": {
						"type": "array"
					},
					"LegalEntityId": {
						"type": "string"
					},
					"IntegrationName": {
						"type": "string"
					},
					"SharepointFolder": {
						"type": "string"
					}
				},
				"variables": {
					"SBC_BlobStorageAccessKey": {
						"type": "String"
					},
					"SBC_ConfigurationArray": {
						"type": "Array"
					},
					"SBC_Counter": {
						"type": "String"
					}
				},
				"folder": {
					"name": "03_Self-Billing"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-20T08:33:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Folder_MSI')]",
				"[concat(variables('factoryId'), '/pipelines/PL_ProcessError')]",
				"[concat(variables('factoryId'), '/datasets/DS_CSV_MSI')]",
				"[concat(variables('factoryId'), '/dataflows/DF_Core_Transformation_SelfBilling')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Upload_Package')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ClearFolders')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Check InProgress Folder",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Pending Folder File to Delete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Folder_MSI",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.IntegrationContainer",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@concat(\n    pipeline().parameters.InProgressFolder, '/',    \n    pipeline().parameters.PipelineRunId\n)",
										"type": "Expression"
									},
									"ls_prm_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "InProgress Subfolders to Delete",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check InProgress Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Check InProgress Folder').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete InProgress Subfolder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_Folder_MSI",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.IntegrationContainer",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@concat(\n    pipeline().parameters.InProgressFolder,'/',pipeline().parameters.PipelineRunId\n)",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Check Processed Folder",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "InProgress Subfolders to Delete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Folder_MSI",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.IntegrationContainer",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@pipeline().parameters.TransformedFolderPath\n",
										"type": "Expression"
									},
									"ls_prm_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Processed Subfolders to Delete",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Processed Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Check Processed Folder').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete Processed Subfolder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_Folder_MSI",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.IntegrationContainer",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@pipeline().parameters.TransformedFolderPath",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Check Zipped File",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Processed Subfolders to Delete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Binary_MSI",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.IntegrationContainer",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.ZippedFolderPath",
										"type": "Expression"
									},
									"Filename": {
										"value": "@concat(pipeline().parameters.ZipFileName,'.zip')",
										"type": "Expression"
									},
									"ls_prm_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Zipped Files to Delete",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Zipped File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Check Zipped File').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete Errored Zipped File",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy To ErrorZipFolder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_Binary_MSI",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.IntegrationContainer",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.ZippedFolderPath",
													"type": "Expression"
												},
												"Filename": {
													"value": "@concat(pipeline().parameters.ZipFileName,'.zip')",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Copy To ErrorZipFolder",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings",
												"compressionProperties": {
													"type": "ZipDeflateReadSettings"
												}
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_Binary_MSI",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.IntegrationContainer",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.ZippedFolderPath",
													"type": "Expression"
												},
												"Filename": {
													"value": "@concat(pipeline().parameters.ZipFileName,'.zip')",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_Binary_MSI",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.IntegrationContainer",
													"type": "Expression"
												},
												"Directory": {
													"value": "@concat(\n    pipeline().parameters.ZippedFolderPath,'/',\n    pipeline().parameters.ErroredZipFolder,'/',\n    pipeline().parameters.PipelineTimeStamp,'-',\n    pipeline().parameters.PipelineRunId\n)",
													"type": "Expression"
												},
												"Filename": {
													"value": "@concat(pipeline().parameters.ZipFileName,'.zip')",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check Pending Folder File",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_CSV_MSI",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.IntegrationContainer",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.PendingFileName",
										"type": "Expression"
									},
									"Folder": {
										"value": "@concat(\n    pipeline().parameters.IntegrationInputFolder,'/',    \n    pipeline().parameters.PipelineRunId\n)",
										"type": "Expression"
									},
									"ls_prm_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Pending Folder File to Delete",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Pending Folder File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Check Pending Folder File').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete Pending File",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy To Errored",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_CSV_MSI",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.IntegrationContainer",
													"type": "Expression"
												},
												"filename": {
													"value": "@pipeline().parameters.PendingFileName",
													"type": "Expression"
												},
												"Folder": {
													"value": "@concat(\n    pipeline().parameters.IntegrationInputFolder,'/',    \n\tpipeline().parameters.PipelineRunId\n)",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Copy To Errored",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_CSV_MSI",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.IntegrationContainer",
													"type": "Expression"
												},
												"filename": {
													"value": "@pipeline().parameters.PendingFileName",
													"type": "Expression"
												},
												"Folder": {
													"value": "@concat(\n    pipeline().parameters.IntegrationInputFolder,'/',    \n\tpipeline().parameters.PipelineRunId\n)",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_CSV_MSI",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.IntegrationContainer",
													"type": "Expression"
												},
												"filename": {
													"value": "@pipeline().parameters.PendingFileName",
													"type": "Expression"
												},
												"Folder": {
													"value": "@concat(\n    pipeline().parameters.IntegrationFailureFolder,'/',    \n\tsubstring(pipeline().parameters.PipelineTimeStamp,0,17)\n)",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check Sharepoint Folder",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Zipped Files to Delete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Folder_MSI",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.IntegrationContainer",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@pipeline().parameters.SharepointFolder",
										"type": "Expression"
									},
									"ls_prm_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Processed Subfolders to Delete_copy1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Sharepoint Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Check Sharepoint Folder').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete Sharepoint Folder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_Folder_MSI",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.IntegrationContainer",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@pipeline().parameters.SharepointFolder",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"StorageAccountKey": {
						"type": "string"
					},
					"PipelineTimeStamp": {
						"type": "string"
					},
					"PipelineRunId": {
						"type": "string"
					},
					"IntegrationContainer": {
						"type": "string"
					},
					"IntegrationInputFolder": {
						"type": "string"
					},
					"InProgressFolder": {
						"type": "string"
					},
					"TransformedFolderPath": {
						"type": "string"
					},
					"IntegrationFailureFolder": {
						"type": "string"
					},
					"ZippedFolderPath": {
						"type": "string"
					},
					"ErroredZipFolder": {
						"type": "string"
					},
					"SharepointFolder": {
						"type": "string"
					},
					"PendingFileName": {
						"type": "string"
					},
					"FileCounter": {
						"type": "string"
					},
					"LegalEntityId": {
						"type": "string"
					},
					"ZipFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "04_Common"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-15T11:20:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Folder_MSI')]",
				"[concat(variables('factoryId'), '/datasets/DS_Binary_MSI')]",
				"[concat(variables('factoryId'), '/datasets/DS_CSV_MSI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_CopyToMockFolder')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy To Mock Folder",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Paragon_CSV_MSI",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.MockConfig[0]['ParagonContainer']",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.PendingFileName",
										"type": "Expression"
									},
									"Folder": {
										"value": "@pipeline().parameters.MockConfig[0]['ParagonSourceFolder']",
										"type": "Expression"
									},
									"ls_paragon_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIParagonServiceEndPoint",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Paragon_CSV_MSI",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.MockConfig[0]['ParagonContainer']",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.PendingFileName",
										"type": "Expression"
									},
									"Folder": {
										"value": "@pipeline().parameters.MockConfig[0]['ParagonMockOnPremFolder']",
										"type": "Expression"
									},
									"ls_paragon_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIParagonServiceEndPoint",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy To Outbound Processed Folder",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy To Mock Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Paragon_CSV_MSI",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.MockConfig[0]['ParagonContainer']",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.PendingFileName",
										"type": "Expression"
									},
									"Folder": {
										"value": "@pipeline().parameters.MockConfig[0]['ParagonSourceFolder']",
										"type": "Expression"
									},
									"ls_paragon_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIParagonServiceEndPoint",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Paragon_CSV_MSI",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.MockConfig[0]['ParagonContainer']",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.PendingFileName",
										"type": "Expression"
									},
									"Folder": {
										"value": "@pipeline().parameters.MockConfig[0]['ParagonProcessedFolder']",
										"type": "Expression"
									},
									"ls_paragon_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIParagonServiceEndPoint",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy To Outbound Errored Folder",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy To Mock Folder",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Paragon_CSV_MSI",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.MockConfig[0]['ParagonContainer']",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.PendingFileName",
										"type": "Expression"
									},
									"Folder": {
										"value": "@pipeline().parameters.MockConfig[0]['ParagonSourceFolder']",
										"type": "Expression"
									},
									"ls_paragon_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIParagonServiceEndPoint",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Paragon_CSV_MSI",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.MockConfig[0]['ParagonContainer']",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.PendingFileName",
										"type": "Expression"
									},
									"Folder": {
										"value": "@pipeline().parameters.MockConfig[0]['ParagonErroredFolder']",
										"type": "Expression"
									},
									"ls_paragon_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIParagonServiceEndPoint",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"MockConfig": {
						"type": "array"
					},
					"PendingFileName": {
						"type": "string"
					}
				},
				"variables": {
					"MockRunErrorMessage": {
						"type": "String"
					},
					"ErrorMessage": {
						"type": "String"
					}
				},
				"folder": {
					"name": "05_Paragon_Outbound"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Paragon_CSV_MSI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_CopyToOnPremFolder')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy To OnPrem Folder",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "FileServerWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Paragon_CSV_MSI",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.OnPremConfig[0]['ParagonContainer']",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.PendingFileName",
										"type": "Expression"
									},
									"Folder": {
										"value": "@pipeline().parameters.OnPremConfig[0]['ParagonSourceFolder']",
										"type": "Expression"
									},
									"ls_paragon_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIParagonServiceEndPoint",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Paragon_CSV_OnPrem",
								"type": "DatasetReference",
								"parameters": {
									"Filename": {
										"value": "@pipeline().parameters.PendingFileName",
										"type": "Expression"
									},
									"OnPremHost": {
										"value": "@pipeline().globalParameters.OutboundOnPremStorageHost",
										"type": "Expression"
									},
									"OnPremUserName": {
										"value": "@pipeline().globalParameters.OnPremStorageUserName",
										"type": "Expression"
									},
									"ParagonAzureKeyVault": {
										"value": "@pipeline().globalParameters.ParagonAzureKeyVault",
										"type": "Expression"
									},
									"SecretName": {
										"value": "@pipeline().parameters.OnPremConfig[0]['ParagonSecretName']",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy To Outbound Processed Folder",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy To OnPrem Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Paragon_CSV_MSI",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.OnPremConfig[0]['ParagonContainer']",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.PendingFileName",
										"type": "Expression"
									},
									"Folder": {
										"value": "@pipeline().parameters.OnPremConfig[0]['ParagonSourceFolder']",
										"type": "Expression"
									},
									"ls_paragon_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIParagonServiceEndPoint",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Paragon_CSV_MSI",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.OnPremConfig[0]['ParagonContainer']",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.PendingFileName",
										"type": "Expression"
									},
									"Folder": {
										"value": "@pipeline().parameters.OnPremConfig[0]['ParagonProcessedFolder']",
										"type": "Expression"
									},
									"ls_paragon_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIParagonServiceEndPoint",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy To Outbound Errored Folder",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy To OnPrem Folder",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Paragon_CSV_MSI",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.OnPremConfig[0]['ParagonContainer']",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.PendingFileName",
										"type": "Expression"
									},
									"Folder": {
										"value": "@pipeline().parameters.OnPremConfig[0]['ParagonSourceFolder']",
										"type": "Expression"
									},
									"ls_paragon_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIParagonServiceEndPoint",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Paragon_CSV_MSI",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.OnPremConfig[0]['ParagonContainer']",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.PendingFileName",
										"type": "Expression"
									},
									"Folder": {
										"value": "@pipeline().parameters.OnPremConfig[0]['ParagonErroredFolder']",
										"type": "Expression"
									},
									"ls_paragon_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIParagonServiceEndPoint",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"OnPremConfig": {
						"type": "array"
					},
					"PendingFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "05_Paragon_Outbound"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Paragon_CSV_MSI')]",
				"[concat(variables('factoryId'), '/datasets/DS_Paragon_CSV_OnPrem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Core_Integrations')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Check Logic App Integration Code",
						"description": "Check the parameter passed from the logic app to see which integration file to ingest",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Set Pipeline RunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@toUpper(pipeline().parameters.IntegrationTypeId)",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "GJC",
									"activities": [
										{
											"name": "GJC_Set Pipeline End Timestamp",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "GJC_ Move To Pending",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "PipelineEndTimestamp",
												"value": {
													"value": "@utcNow()",
													"type": "Expression"
												}
											}
										},
										{
											"name": "GJC_Send Success Email",
											"type": "ExecutePipeline",
											"state": "Inactive",
											"onInactiveMarkAs": "Succeeded",
											"dependsOn": [
												{
													"activity": "GJC_Set Pipeline End Timestamp",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "PL_SuccessEmail",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"PipelineFactory": {
														"value": "@pipeline().DataFactory",
														"type": "Expression"
													},
													"PipelineName": {
														"value": "@pipeline()?.TriggeredByPipelineName",
														"type": "Expression"
													},
													"PipelineRunId": {
														"value": "@variables('PipelineRunId')",
														"type": "Expression"
													},
													"PipelineStartTimestamp": {
														"value": "@variables('PipelineStartTimestamp')",
														"type": "Expression"
													},
													"PipelineEndTimestamp": {
														"value": "@variables('PipelineEndTimestamp')",
														"type": "Expression"
													},
													"IntegrationTypeId": {
														"value": "@pipeline().parameters.IntegrationTypeId",
														"type": "Expression"
													},
													"FormattedTimestamp": {
														"value": "@variables('PiplelineFileNameTimestamp')",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Set GJC Integration Name",
											"type": "SetVariable",
											"dependsOn": [],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "IntegrationName",
												"value": {
													"value": "Core General Journal",
													"type": "Expression"
												}
											}
										},
										{
											"name": "GJC_ Move To Pending",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Set GJC Integration Name",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "PL_01_GJC_Transfer_To_Pending",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"PipelineRunId": {
														"value": "@variables('PipelineRunId')",
														"type": "Expression"
													},
													"PipelineFilenameTimestamp": {
														"value": "@variables('PiplelineFileNameTimestamp')",
														"type": "Expression"
													},
													"IntegrationTypeId": {
														"value": "@pipeline().parameters.IntegrationTypeId",
														"type": "Expression"
													},
													"LegalEntityId": {
														"value": "@pipeline().parameters.LegalEntityId",
														"type": "Expression"
													},
													"IntegrationName": {
														"value": "@variables('IntegrationName')",
														"type": "Expression"
													},
													"SharepointFolder": {
														"value": "@pipeline().parameters.SharepointFolder",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "FTIC",
									"activities": [
										{
											"name": "FTIC Set Pipeline End Timestamp",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "FTIC Move To Pending",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "PipelineEndTimestamp",
												"value": {
													"value": "@utcNow()",
													"type": "Expression"
												}
											}
										},
										{
											"name": "FTIC Send Success Email",
											"type": "ExecutePipeline",
											"state": "Inactive",
											"onInactiveMarkAs": "Succeeded",
											"dependsOn": [
												{
													"activity": "FTIC Set Pipeline End Timestamp",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "PL_SuccessEmail",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"PipelineFactory": {
														"value": "@pipeline().DataFactory",
														"type": "Expression"
													},
													"PipelineName": {
														"value": "@pipeline()?.TriggeredByPipelineName",
														"type": "Expression"
													},
													"PipelineRunId": {
														"value": "@variables('PipelineRunId')",
														"type": "Expression"
													},
													"PipelineStartTimestamp": {
														"value": "@variables('PipelineStartTimestamp')",
														"type": "Expression"
													},
													"PipelineEndTimestamp": {
														"value": "@variables('PipelineEndTimestamp')",
														"type": "Expression"
													},
													"IntegrationTypeId": {
														"value": "@pipeline().parameters.IntegrationTypeId",
														"type": "Expression"
													},
													"FormattedTimestamp": {
														"value": "@variables('PiplelineFileNameTimestamp')",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Set FTIC Integration Name",
											"type": "SetVariable",
											"dependsOn": [],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "IntegrationName",
												"value": {
													"value": "Free Text Invoice",
													"type": "Expression"
												}
											}
										},
										{
											"name": "FTIC Move To Pending",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Set FTIC Integration Name",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "PL_01_FTIC_Transfer_To_Pending",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"PipelineRunId": {
														"value": "@variables('PipelineRunId')",
														"type": "Expression"
													},
													"PipelineFilenameTimestamp": {
														"value": "@variables('PiplelineFileNameTimestamp')",
														"type": "Expression"
													},
													"IntegrationTypeId": {
														"value": "@pipeline().parameters.IntegrationTypeId",
														"type": "Expression"
													},
													"LegalEntityId": {
														"value": "@pipeline().parameters.LegalEntityId",
														"type": "Expression"
													},
													"IntegrationName": {
														"value": "@variables('IntegrationName')",
														"type": "Expression"
													},
													"SharepointFolder": {
														"value": "@pipeline().parameters.SharepointFolder",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "SBC",
									"activities": [
										{
											"name": "SBC Set Pipeline End Timestamp",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "SBC Move To Pending",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "PipelineEndTimestamp",
												"value": {
													"value": "@utcNow()",
													"type": "Expression"
												}
											}
										},
										{
											"name": "SBC Send Success Email",
											"type": "ExecutePipeline",
											"state": "Inactive",
											"onInactiveMarkAs": "Succeeded",
											"dependsOn": [
												{
													"activity": "SBC Set Pipeline End Timestamp",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "PL_SuccessEmail",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"PipelineFactory": {
														"value": "@pipeline().DataFactory",
														"type": "Expression"
													},
													"PipelineName": {
														"value": "@pipeline()?.TriggeredByPipelineName",
														"type": "Expression"
													},
													"PipelineRunId": {
														"value": "@variables('PipelineRunId')",
														"type": "Expression"
													},
													"PipelineStartTimestamp": {
														"value": "@variables('PipelineStartTimestamp')",
														"type": "Expression"
													},
													"PipelineEndTimestamp": {
														"value": "@variables('PipelineEndTimestamp')",
														"type": "Expression"
													},
													"IntegrationTypeId": {
														"value": "@pipeline().parameters.IntegrationTypeId",
														"type": "Expression"
													},
													"FormattedTimestamp": {
														"value": "@variables('PiplelineFileNameTimestamp')",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Set SBC Integration Name",
											"type": "SetVariable",
											"dependsOn": [],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "IntegrationName",
												"value": {
													"value": "Self Billing",
													"type": "Expression"
												}
											}
										},
										{
											"name": "SBC Move To Pending",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Set SBC Integration Name",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "PL_01_SBC_Transfer_To_Pending",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"PipelineRunId": {
														"value": "@variables('PipelineRunId')",
														"type": "Expression"
													},
													"PipelineFilenameTimestamp": {
														"value": "@variables('PiplelineFileNameTimestamp')",
														"type": "Expression"
													},
													"IntegrationTypeId": {
														"value": "@pipeline().parameters.IntegrationTypeId",
														"type": "Expression"
													},
													"LegalEntityId": {
														"value": "@pipeline().parameters.LegalEntityId",
														"type": "Expression"
													},
													"IntegrationName": {
														"value": "@variables('IntegrationName')",
														"type": "Expression"
													},
													"SharepointFolder": {
														"value": "@pipeline().parameters.SharepointFolder",
														"type": "Expression"
													}
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Set Pipeline RunId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set FileName Timestamp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineRunId",
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Pipeline Start Timestamp",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineStartTimestamp",
							"value": {
								"value": "@utcNow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set FileName Timestamp",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Pipeline Start Timestamp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PiplelineFileNameTimestamp",
							"value": {
								"value": "@concat('D',replace(substring(variables('PipelineStartTimestamp'),0,19),':','-'))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"IntegrationTypeId": {
						"type": "string"
					},
					"LegalEntityId": {
						"type": "string"
					},
					"SharepointFolder": {
						"type": "string"
					}
				},
				"variables": {
					"PipelineStartTimestamp": {
						"type": "String"
					},
					"PipelineEndTimestamp": {
						"type": "String"
					},
					"PiplelineFileNameTimestamp": {
						"type": "String"
					},
					"PipelineRunId": {
						"type": "String"
					},
					"IntegrationName": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_SuccessEmail')]",
				"[concat(variables('factoryId'), '/pipelines/PL_01_GJC_Transfer_To_Pending')]",
				"[concat(variables('factoryId'), '/pipelines/PL_01_FTIC_Transfer_To_Pending')]",
				"[concat(variables('factoryId'), '/pipelines/PL_01_SBC_Transfer_To_Pending')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ErrorEmail')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Send Error Email",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Error Email Secret",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"content-type": {
									"value": "application/json",
									"type": "Expression"
								}
							},
							"url": {
								"value": "@activity('Get Error Email Secret').output.value",
								"type": "Expression"
							},
							"body": {
								"ErrorPipelineFactory": "@{pipeline().parameters.ErrorPipelineFactory}",
								"ErrorPipelineName": "@{pipeline().parameters.ErrorPipelineName}",
								"ErrorPipelineTimestamp": "@{pipeline().parameters.ErrorPipelineTimestamp}",
								"ErrorPipelineRunId": "@{pipeline().parameters.ErrorPipelineRunId}",
								"ErrorIntegrationId": "@{pipeline().parameters.ErrorIntegrationId}",
								"ErrorLogContainer": "@{pipeline().parameters.ErrorLogContainer}",
								"ErrorLogDirectory": "@{pipeline().parameters.ErrorLogDirectory}",
								"ErrorLogFilename": "@{pipeline().parameters.ErrorLogFilename}",
								"ErrorStorageAccountName": "@{pipeline().parameters.ErrorStorageAccountName}"
							}
						}
					},
					{
						"name": "Get Error Email Secret",
						"description": "Get Azure Key Secret from the Key Vault",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "@concat(pipeline().globalParameters.CoreAzureKeyVault,'/secrets/',pipeline().globalParameters.CoreErrorEmailLogicAppSecret,'?api-version=7.0')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ErrorEmailAppURL": {
						"type": "string"
					},
					"ErrorPipelineFactory": {
						"type": "string"
					},
					"ErrorPipelineName": {
						"type": "string"
					},
					"ErrorPipelineTimestamp": {
						"type": "string"
					},
					"ErrorPipelineRunId": {
						"type": "string"
					},
					"ErrorIntegrationId": {
						"type": "string"
					},
					"ErrorLogContainer": {
						"type": "string"
					},
					"ErrorLogDirectory": {
						"type": "string"
					},
					"ErrorLogFileName": {
						"type": "string"
					},
					"ErrorStorageAccountName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "04_Common"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-16T12:43:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Log_D365Import')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set Log FileName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Integration Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "LogFileName",
							"value": {
								"value": "@concat('d365import-log-',replace(substring(utcNow(),0,20),':','-'),'-',pipeline().parameters.PipelineRunId,'.csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Generate Import Log File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Log FolderDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "PipelineFactory",
										"value": {
											"value": "@pipeline().DataFactory",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineName",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineRunId",
										"value": {
											"value": "@pipeline().parameters.PipelineRunId",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineStartTimestamp",
										"value": {
											"value": "@pipeline().parameters.PipelineStartTimestamp",
											"type": "Expression"
										}
									},
									{
										"name": "IntegrationName",
										"value": {
											"value": "@pipeline().parameters.IntegrationName",
											"type": "Expression"
										}
									},
									{
										"name": "LegalEntityId",
										"value": {
											"value": "@pipeline().parameters.LegalEntityId",
											"type": "Expression"
										}
									},
									{
										"name": "DefinitionGroupId",
										"value": {
											"value": "@pipeline().parameters.DefinitionGroupId",
											"type": "Expression"
										}
									},
									{
										"name": "ExecutionId",
										"value": {
											"value": "@pipeline().parameters.ExecutionId",
											"type": "Expression"
										}
									},
									{
										"name": "DataPackageName",
										"value": {
											"value": "@pipeline().parameters.DataPackageName",
											"type": "Expression"
										}
									},
									{
										"name": "ImportTimeStamp",
										"value": {
											"value": "@pipeline().parameters.ImportTimestamp",
											"type": "Expression"
										}
									},
									{
										"name": "ImportStatus",
										"value": {
											"value": "@pipeline().parameters.ImportStatus",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_CSVImportLog_Empty_MSI",
								"type": "DatasetReference",
								"parameters": {
									"ls_prm_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_CSV_Log_MSI",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.ImportLogContainer",
										"type": "Expression"
									},
									"Directory": {
										"value": "@concat(pipeline().parameters.ImportLogFolder,'/',variables('LogFolderDate'))",
										"type": "Expression"
									},
									"FileName": {
										"value": "@variables('LogFileName')",
										"type": "Expression"
									},
									"ls_prm_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Set Integration Name",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "IntegrationName",
							"value": {
								"value": "@pipeline().parameters.IntegrationName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Log FolderDate",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Log FileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "LogFolderDate",
							"value": {
								"value": "@concat('D',substring(utcNow(),0,10))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PipelineFactory": {
						"type": "string"
					},
					"PipelineName": {
						"type": "string"
					},
					"PipelineStartTimestamp": {
						"type": "string"
					},
					"PipelineRunId": {
						"type": "string"
					},
					"IntegrationName": {
						"type": "string"
					},
					"LegalEntityId": {
						"type": "string"
					},
					"DefinitionGroupId": {
						"type": "string"
					},
					"ExecutionId": {
						"type": "string"
					},
					"DataPackageName": {
						"type": "string"
					},
					"ImportTimestamp": {
						"type": "string"
					},
					"ImportStatus": {
						"type": "string"
					},
					"ImportLogContainer": {
						"type": "string"
					},
					"ImportLogFolder": {
						"type": "string"
					}
				},
				"variables": {
					"LogFileName": {
						"type": "String"
					},
					"IntegrationName": {
						"type": "String"
					},
					"LogFolderDate": {
						"type": "String"
					}
				},
				"folder": {
					"name": "04_Common"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-26T12:17:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_CSVImportLog_Empty_MSI')]",
				"[concat(variables('factoryId'), '/datasets/DS_CSV_Log_MSI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ProcessError')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set Log FileName",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "LogFileName",
							"value": {
								"value": "@concat('error-log-',replace(substring(utcNow(),0,20),':','-'),'-',pipeline().parameters.PipelineRunId,'.csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send Error Email",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Cleanse Work Folders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ErrorEmail",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ErrorEmailAppURL": {
									"value": "@pipeline().parameters.ErrorLogicAppURL",
									"type": "Expression"
								},
								"ErrorPipelineFactory": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"ErrorPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"ErrorPipelineTimestamp": {
									"value": "@pipeline().parameters.PipelineTimeStamp",
									"type": "Expression"
								},
								"ErrorPipelineRunId": {
									"value": "@pipeline().parameters.PipelineRunId",
									"type": "Expression"
								},
								"ErrorIntegrationId": {
									"value": "@pipeline().parameters.IntegrationId",
									"type": "Expression"
								},
								"ErrorLogContainer": {
									"value": "@pipeline().parameters.LogContainer",
									"type": "Expression"
								},
								"ErrorLogDirectory": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"ErrorLogFileName": {
									"value": "@variables('LogFileName')",
									"type": "Expression"
								},
								"ErrorStorageAccountName": {
									"value": "@pipeline().globalParameters.ErrorStorageAccountName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Generate Error Log File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Log Folder Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "PipelineFactory",
										"value": {
											"value": "@pipeline().DataFactory",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineName",
										"value": {
											"value": "@pipeline()?.TriggeredByPipelineName",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineRunId",
										"value": {
											"value": "@pipeline().parameters.PipelineRunId",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineTimestamp",
										"value": {
											"value": "@pipeline().parameters.PipelineTimeStamp",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineActivity",
										"value": {
											"value": "@pipeline().parameters.ErrorActivity",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineErrorCode",
										"value": {
											"value": "@pipeline().parameters.ErrorCode",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineErrorMessage",
										"value": {
											"value": "@pipeline().parameters.ErrorMessage",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_CSVLog_Empty_MSI",
								"type": "DatasetReference",
								"parameters": {
									"ls_prm_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_CSV_Log_MSI",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.LogContainer",
										"type": "Expression"
									},
									"Directory": {
										"value": "@concat(pipeline().parameters.LogFolder,'/',variables('LogFolderDate'))",
										"type": "Expression"
									},
									"FileName": {
										"value": "@variables('LogFileName')",
										"type": "Expression"
									},
									"ls_prm_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Cleanse Work Folders",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Generate Error Log File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ClearFolders",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"StorageAccountKey": {
									"value": "@pipeline().parameters.StorageAccountKey",
									"type": "Expression"
								},
								"PipelineTimeStamp": {
									"value": "@pipeline().parameters.PipelineTimeStamp",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().parameters.PipelineRunId",
									"type": "Expression"
								},
								"IntegrationContainer": {
									"value": "@pipeline().parameters.IntegrationContainer",
									"type": "Expression"
								},
								"IntegrationInputFolder": {
									"value": "@pipeline().parameters.IntegrationInputFolder",
									"type": "Expression"
								},
								"InProgressFolder": {
									"value": "@pipeline().parameters.InProgressFolder",
									"type": "Expression"
								},
								"TransformedFolderPath": {
									"value": "@pipeline().parameters.TransformedFolderPath",
									"type": "Expression"
								},
								"IntegrationFailureFolder": {
									"value": "@pipeline().parameters.IntegrationFailureFolder",
									"type": "Expression"
								},
								"ZippedFolderPath": {
									"value": "@pipeline().parameters.ZippedFolder",
									"type": "Expression"
								},
								"ErroredZipFolder": {
									"value": "@pipeline().parameters.ErroredZipFolder",
									"type": "Expression"
								},
								"SharepointFolder": {
									"value": "@pipeline().parameters.SharepointFolder",
									"type": "Expression"
								},
								"PendingFileName": {
									"value": "@pipeline().parameters.PendingFileName",
									"type": "Expression"
								},
								"LegalEntityId": {
									"value": "@pipeline().parameters.LegalEntityId",
									"type": "Expression"
								},
								"ZipFileName": {
									"value": "@pipeline().parameters.ZipFileName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set Log Folder Date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Log FileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "LogFolderDate",
							"value": {
								"value": "@concat('D',substring(utcNow(),0,10))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ErrorCode": {
						"type": "string"
					},
					"ErrorMessage": {
						"type": "string"
					},
					"ErrorLogicAppURL": {
						"type": "string"
					},
					"ErrorActivity": {
						"type": "string"
					},
					"StorageAccountKey": {
						"type": "string"
					},
					"LogContainer": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"PipelineTimeStamp": {
						"type": "string"
					},
					"PipelineRunId": {
						"type": "string"
					},
					"IntegrationContainer": {
						"type": "string"
					},
					"IntegrationInputFolder": {
						"type": "string"
					},
					"IntegrationFailureFolder": {
						"type": "string"
					},
					"InProgressFolder": {
						"type": "string"
					},
					"TransformedFolderPath": {
						"type": "string"
					},
					"SuccessFolder": {
						"type": "string"
					},
					"ZippedFolder": {
						"type": "string"
					},
					"ErroredZipFolder": {
						"type": "string"
					},
					"IntegrationId": {
						"type": "string"
					},
					"SharepointFolder": {
						"type": "string"
					},
					"PendingFileName": {
						"type": "string"
					},
					"LegalEntityId": {
						"type": "string"
					},
					"ZipFileName": {
						"type": "string"
					}
				},
				"variables": {
					"LogFileName": {
						"type": "String"
					},
					"LogFolderDate": {
						"type": "String"
					}
				},
				"folder": {
					"name": "04_Common"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-26T12:17:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_ErrorEmail')]",
				"[concat(variables('factoryId'), '/datasets/DS_CSVLog_Empty_MSI')]",
				"[concat(variables('factoryId'), '/datasets/DS_CSV_Log_MSI')]",
				"[concat(variables('factoryId'), '/pipelines/PL_ClearFolders')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Process_ParagonInbound')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ADFActivity to decide what to do.\nTRIGGER: Copy file from on Prem to Blob\nERROR: Copy Processing file to Error Folder in File Share\nSUCCESS: Copy Processing File to Archive Folder in File Share\n\nProcessedFileName:\nis blank for Trigger and file name is expected for the Error or Success in ADFActivity",
				"activities": [
					{
						"name": "Get ParagonInbound Configuration",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DS_Json_MSI",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().globalParameters.ConfigurationContainer",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().globalParameters.ParagonInboundConfigFile",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().globalParameters.ConfigurationFolder",
										"type": "Expression"
									},
									"ls_prm_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set Configuration Array",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get ParagonInbound Configuration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "InboundConfig",
							"value": {
								"value": "@activity('Get ParagonInbound Configuration').output.value[0].ADFParagonInbound",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Switch1",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Set Configuration Array",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@toUpper(pipeline().parameters.ADFActivity)",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "ERROR",
									"activities": [
										{
											"name": "Copy To Errored",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "DelimitedTextSource",
													"storeSettings": {
														"type": "FileServerReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													},
													"formatSettings": {
														"type": "DelimitedTextReadSettings"
													}
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "FileServerWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".txt"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "DS_Paragon_CSV_OnPrem",
													"type": "DatasetReference",
													"parameters": {
														"Filename": {
															"value": "@pipeline().parameters.ProcessedFileName",
															"type": "Expression"
														},
														"OnPremHost": {
															"value": "@concat(\n    pipeline().globalParameters.OnPremStorageHostInbound,'/',variables('InboundConfig')[0]['ParagonOnPremisesProcessingFolder'])",
															"type": "Expression"
														},
														"OnPremUserName": {
															"value": "@pipeline().globalParameters.OnPremStorageUserName",
															"type": "Expression"
														},
														"ParagonAzureKeyVault": {
															"value": "@pipeline().globalParameters.ParagonAzureKeyVault",
															"type": "Expression"
														},
														"SecretName": {
															"value": "@variables('InboundConfig')[0]['ParagonSecretName']",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "DS_Paragon_CSV_OnPrem",
													"type": "DatasetReference",
													"parameters": {
														"Filename": {
															"value": "@concat(\n    replace(pipeline().parameters.ProcessedFileName,'.csv',''),'-',pipeline().RunId,'.csv')",
															"type": "Expression"
														},
														"OnPremHost": {
															"value": "@concat(\n    pipeline().globalParameters.OnPremStorageHostInbound,'/',variables('InboundConfig')[0]['ParagonOnPremisesErrorFolder'])",
															"type": "Expression"
														},
														"OnPremUserName": {
															"value": "@pipeline().globalParameters.OnPremStorageUserName",
															"type": "Expression"
														},
														"ParagonAzureKeyVault": {
															"value": "@pipeline().globalParameters.ParagonAzureKeyVault",
															"type": "Expression"
														},
														"SecretName": {
															"value": "@variables('InboundConfig')[0]['ParagonSecretName']",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "Delete Processing Files",
											"type": "Delete",
											"dependsOn": [
												{
													"activity": "Copy To Errored",
													"dependencyConditions": [
														"Completed"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"dataset": {
													"referenceName": "DS_Paragon_CSV_OnPrem",
													"type": "DatasetReference",
													"parameters": {
														"Filename": {
															"value": "@pipeline().parameters.ProcessedFileName",
															"type": "Expression"
														},
														"OnPremHost": {
															"value": "@concat(\n    pipeline().globalParameters.OnPremStorageHostInbound,'/',variables('InboundConfig')[0]['ParagonOnPremisesProcessingFolder'])",
															"type": "Expression"
														},
														"OnPremUserName": {
															"value": "@pipeline().globalParameters.OnPremStorageUserName",
															"type": "Expression"
														},
														"ParagonAzureKeyVault": {
															"value": "@pipeline().globalParameters.ParagonAzureKeyVault",
															"type": "Expression"
														},
														"SecretName": {
															"value": "@variables('InboundConfig')[0]['ParagonSecretName']",
															"type": "Expression"
														}
													}
												},
												"enableLogging": false,
												"storeSettings": {
													"type": "FileServerReadSettings",
													"recursive": true,
													"enablePartitionDiscovery": false
												}
											}
										}
									]
								},
								{
									"value": "SUCCESS",
									"activities": [
										{
											"name": "Copy To Success",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "DelimitedTextSource",
													"storeSettings": {
														"type": "FileServerReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													},
													"formatSettings": {
														"type": "DelimitedTextReadSettings"
													}
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "FileServerWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".txt"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "DS_Paragon_CSV_OnPrem",
													"type": "DatasetReference",
													"parameters": {
														"Filename": {
															"value": "@pipeline().parameters.ProcessedFileName",
															"type": "Expression"
														},
														"OnPremHost": {
															"value": "@concat(\n    pipeline().globalParameters.OnPremStorageHostInbound,'/',variables('InboundConfig')[0]['ParagonOnPremisesProcessingFolder'])",
															"type": "Expression"
														},
														"OnPremUserName": {
															"value": "@pipeline().globalParameters.OnPremStorageUserName",
															"type": "Expression"
														},
														"ParagonAzureKeyVault": {
															"value": "@pipeline().globalParameters.ParagonAzureKeyVault",
															"type": "Expression"
														},
														"SecretName": {
															"value": "@variables('InboundConfig')[0]['ParagonSecretName']",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "DS_Paragon_CSV_OnPrem",
													"type": "DatasetReference",
													"parameters": {
														"Filename": {
															"value": "@concat(\n    replace(pipeline().parameters.ProcessedFileName,'.csv',''),'-',pipeline().RunId,'.csv')",
															"type": "Expression"
														},
														"OnPremHost": {
															"value": "@concat(\n    pipeline().globalParameters.OnPremStorageHostInbound,'/',variables('InboundConfig')[0]['ParagonOnPremisesArchiveFolder'])",
															"type": "Expression"
														},
														"OnPremUserName": {
															"value": "@pipeline().globalParameters.OnPremStorageUserName",
															"type": "Expression"
														},
														"ParagonAzureKeyVault": {
															"value": "@pipeline().globalParameters.ParagonAzureKeyVault",
															"type": "Expression"
														},
														"SecretName": {
															"value": "@variables('InboundConfig')[0]['ParagonSecretName']",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "Delete Processing Files_copy1",
											"type": "Delete",
											"dependsOn": [
												{
													"activity": "Copy To Success",
													"dependencyConditions": [
														"Completed"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"dataset": {
													"referenceName": "DS_Paragon_CSV_OnPrem",
													"type": "DatasetReference",
													"parameters": {
														"Filename": {
															"value": "@pipeline().parameters.ProcessedFileName",
															"type": "Expression"
														},
														"OnPremHost": {
															"value": "@concat(\n    pipeline().globalParameters.OnPremStorageHostInbound,'/',variables('InboundConfig')[0]['ParagonOnPremisesProcessingFolder'])",
															"type": "Expression"
														},
														"OnPremUserName": {
															"value": "@pipeline().globalParameters.OnPremStorageUserName",
															"type": "Expression"
														},
														"ParagonAzureKeyVault": {
															"value": "@pipeline().globalParameters.ParagonAzureKeyVault",
															"type": "Expression"
														},
														"SecretName": {
															"value": "@variables('InboundConfig')[0]['ParagonSecretName']",
															"type": "Expression"
														}
													}
												},
												"enableLogging": false,
												"storeSettings": {
													"type": "FileServerReadSettings",
													"recursive": true,
													"enablePartitionDiscovery": false
												}
											}
										}
									]
								},
								{
									"value": "TRIGGER",
									"activities": [
										{
											"name": "Move File OnPrem-AzureStorage",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "PL_01_ParagonInbound_Copy",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"InboundConfig": {
														"value": "@variables('InboundConfig')",
														"type": "Expression"
													}
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ProcessedFileName": {
						"type": "string"
					},
					"ADFActivity": {
						"type": "string"
					}
				},
				"variables": {
					"InboundConfig": {
						"type": "Array"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Json_MSI')]",
				"[concat(variables('factoryId'), '/datasets/DS_Paragon_CSV_OnPrem')]",
				"[concat(variables('factoryId'), '/pipelines/PL_01_ParagonInbound_Copy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Process_ParagonOutbound')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get ParagonOutbound Configuration",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DS_Json_MSI",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().globalParameters.ConfigurationContainer",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().globalParameters.ParagonOutboundConfigFile",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().globalParameters.ConfigurationFolder",
										"type": "Expression"
									},
									"ls_prm_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set Configuration Array",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get ParagonOutbound Configuration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "OutboundConfig",
							"value": {
								"value": "@activity('Get ParagonOutbound Configuration').output.value[0].ADFParagonOutbound",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send Fail Message to Logic App",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "ForEach Pending CSV File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": {
								"value": "Paragon file transfer process failed for one or more files.",
								"type": "Expression"
							},
							"errorCode": {
								"value": "@string('500')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Pending Files List",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set Configuration Array",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Folder_MSI",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@variables('OutboundConfig')[0]['ParagonContainer']",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@variables('OutboundConfig')[0]['ParagonSourceFolder']",
										"type": "Expression"
									},
									"ls_prm_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIParagonServiceEndPoint",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEach Pending CSV File",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter CSV",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter CSV').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Check for MockRun",
									"description": "",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set Pending FileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@pipeline().parameters.MockRun",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Copy To OnPrem Folder",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "PL_CopyToOnPremFolder",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"OnPremConfig": {
															"value": "@variables('OutboundConfig')",
															"type": "Expression"
														},
														"PendingFileName": {
															"value": "@variables('PendingFileName')",
															"type": "Expression"
														}
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Copy To Mock Folder",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "PL_CopyToMockFolder",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"MockConfig": {
															"value": "@variables('OutboundConfig')",
															"type": "Expression"
														},
														"PendingFileName": {
															"value": "@variables('PendingFileName')",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "Set Pending FileName",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PendingFileName",
										"value": {
											"value": "@item().Name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete Azure Pending CSV File",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Check for MockRun",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_Paragon_CSV_MSI",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('OutboundConfig')[0]['ParagonContainer']",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"Folder": {
													"value": "@variables('OutboundConfig')[0]['ParagonSourceFolder']",
													"type": "Expression"
												},
												"ls_paragon_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIParagonServiceEndPoint",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Filter CSV",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Pending Files List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Pending Files List').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().Name,'.csv')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"MockRun": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"variables": {
					"OutboundConfig": {
						"type": "Array"
					},
					"PendingFileName": {
						"type": "String"
					},
					"ErrorMessage": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Json_MSI')]",
				"[concat(variables('factoryId'), '/datasets/DS_Folder_MSI')]",
				"[concat(variables('factoryId'), '/datasets/DS_Paragon_CSV_MSI')]",
				"[concat(variables('factoryId'), '/pipelines/PL_CopyToOnPremFolder')]",
				"[concat(variables('factoryId'), '/pipelines/PL_CopyToMockFolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_SuccessEmail')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Send Success Email",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Success Email Secret",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"content-type": {
									"value": "application/json",
									"type": "Expression"
								}
							},
							"url": {
								"value": "@activity('Get Success Email Secret').output.value",
								"type": "Expression"
							},
							"body": {
								"PipelineFactory": "@{pipeline().DataFactory}",
								"PipelineName": "@{pipeline().parameters.PipelineName}",
								"PipelineRunId": "@{pipeline().parameters.PipelineRunId}",
								"PipelineStartTimestamp": "@{pipeline().parameters.PipelineStartTimestamp}",
								"PipelineEndTimestamp": "@{pipeline().parameters.PipelineEndTimestamp}",
								"IntegrationType": "@{pipeline().parameters.IntegrationTypeId}",
								"FormattedTimestamp": "@{pipeline().parameters.FormattedTimestamp}"
							}
						}
					},
					{
						"name": "Get Success Email Secret",
						"description": "Get Azure Key Secret from the Key Vault",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "@concat(pipeline().globalParameters.CoreAzureKeyVault,'/secrets/',pipeline().globalParameters.CoreSuccessEmailLogicAppSecret,'?api-version=7.0')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PipelineFactory": {
						"type": "string"
					},
					"PipelineName": {
						"type": "string"
					},
					"PipelineRunId": {
						"type": "string"
					},
					"PipelineStartTimestamp": {
						"type": "string"
					},
					"PipelineEndTimestamp": {
						"type": "string"
					},
					"IntegrationTypeId": {
						"type": "string"
					},
					"FormattedTimestamp": {
						"type": "string"
					},
					"SuccessEmailAppURL": {
						"type": "string"
					}
				},
				"folder": {
					"name": "04_Common"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-16T12:43:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Upload_Package')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Move files from one folder to another folder",
				"activities": [
					{
						"name": "AuthenticationLogin",
						"description": "Authenticate with D365 ",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Azure Key Secret",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"url": {
								"value": "@concat('https://login.microsoftonline.com/',activity('Get TenantID').output.value,'/oauth2/token')",
								"type": "Expression"
							},
							"body": {
								"value": "@concat('grant_type=client_credentials&client_id=',pipeline().parameters.AppID,'&client_secret=',activity('Get Azure Key Secret').output.value,'&resource=',pipeline().parameters.d365URL)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetAzureWriteUrl",
						"description": "Get the Azure Blob url of the D365",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "AuthenticationLogin",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "5.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Authorization": {
									"value": "Bearer @{activity('AuthenticationLogin').output.access_token}",
									"type": "Expression"
								}
							},
							"url": {
								"value": "@concat(pipeline().parameters.d365URL,'/data/DataManagementDefinitionGroups/Microsoft.Dynamics.DataEntities.GetAzureWriteUrl')",
								"type": "Expression"
							},
							"body": {
								"value": "@concat('{ uniqueFileName: \"',pipeline().parameters.ZipFileName,'.zip','\" }')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Azure Key Secret",
						"description": "Get Azure Key Secret from the Key Vault",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get TenantID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "@concat(pipeline().parameters.AzureKeyVault,'/secrets/',pipeline().parameters.SecretName,'?api-version=7.0')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Check Zipped File Already Exists",
						"description": "Check if file name.zip is in the storage folder as to not have duplicates",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Binary_MSI",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.Container",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.ZippedFolder",
										"type": "Expression"
									},
									"Filename": {
										"value": "@concat(pipeline().parameters.ZipFileName,'.zip')",
										"type": "Expression"
									},
									"ls_prm_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "if file exists",
						"description": "if file exists then terminated and log that it's duplicate",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Zipped File Already Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check Zipped File Already Exists').output.exists, true)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "File Processed",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "Log Error Duplicate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": "Duplicate FIle",
										"errorCode": "ERR011"
									}
								},
								{
									"name": "Log Error Duplicate",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_ProcessError",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ErrorCode": {
												"value": "@activity('Check Zipped File Already Exists').error.errorCode",
												"type": "Expression"
											},
											"ErrorMessage": {
												"value": "@activity('Check Zipped File Already Exists').error.message",
												"type": "Expression"
											},
											"ErrorLogicAppURL": {
												"value": "@pipeline().parameters.ErrorLogicAppURL",
												"type": "Expression"
											},
											"ErrorActivity": {
												"value": "@concat('Check Processed File')",
												"type": "Expression"
											},
											"StorageAccountKey": {
												"value": "@pipeline().parameters.StorageAccountKey",
												"type": "Expression"
											},
											"LogContainer": {
												"value": "@pipeline().parameters.LogContainer",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogContainer",
												"type": "Expression"
											},
											"PipelineTimeStamp": {
												"value": "@pipeline().parameters.PipeLineTimeStamp",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().parameters.PipeLineRunId",
												"type": "Expression"
											},
											"IntegrationContainer": {
												"value": "@pipeline().parameters.IntegrationContainer",
												"type": "Expression"
											},
											"IntegrationInputFolder": {
												"value": "@pipeline().parameters.IntegrationInputFolder",
												"type": "Expression"
											},
											"IntegrationFailureFolder": {
												"value": "@pipeline().parameters.IntegrationFailureFolder",
												"type": "Expression"
											},
											"InProgressFolder": {
												"value": "@pipeline().parameters.InProgressFolder",
												"type": "Expression"
											},
											"TransformedFolderPath": {
												"value": "@pipeline().parameters.TransformedFolderPath",
												"type": "Expression"
											},
											"SuccessFolder": {
												"value": "@pipeline().parameters.CompleteFolder",
												"type": "Expression"
											},
											"ZippedFolder": {
												"value": "@pipeline().parameters.ZippedFolder",
												"type": "Expression"
											},
											"ErroredZipFolder": {
												"value": "@pipeline().parameters.ErroredZipFolder",
												"type": "Expression"
											},
											"IntegrationId": {
												"value": "@pipeline().parameters.IntegrationId",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Get TenantID",
						"description": "Get Tenant ID Secret from the Key Vault",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "if file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "@concat(pipeline().parameters.AzureKeyVault,'/secrets/',pipeline().parameters.TenantID,'?api-version=7.0')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Upload File",
						"description": "Upload the Zipped file to Blob storage of the D365 in the dmf folder",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Zip Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings",
										"preserveZipFileNameAsFolder": false
									}
								}
							},
							"sink": {
								"type": "RestSink",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": 10,
								"requestMethod": "POST",
								"writeBatchSize": 10000,
								"httpCompressionType": "none",
								"storeSettings": {
									"type": "FileServerWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_Binary_MSI",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.Container",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.ZippedFolder",
										"type": "Expression"
									},
									"Filename": {
										"value": "@concat(pipeline().parameters.ZipFileName,'.zip')",
										"type": "Expression"
									},
									"ls_prm_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_FO_Folder",
								"type": "DatasetReference",
								"parameters": {
									"token": {
										"value": "@json(replace(activity('GetAzureWriteUrl').output.value,'\\\\','')).BlobUrl",
										"type": "Expression"
									},
									"path": "dmf"
								}
							}
						]
					},
					{
						"name": "Execute import",
						"description": "Import the package stored in the dmf to the d365",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Generate Execution Id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Authorization": {
									"value": "Bearer @{activity('AuthenticationLogin').output.access_token}",
									"type": "Expression"
								}
							},
							"url": {
								"value": "@concat(pipeline().parameters.d365URL,'/data/DataManagementDefinitionGroups/Microsoft.Dynamics.DataEntities.ImportFromPackage')",
								"type": "Expression"
							},
							"body": {
								"value": "@concat('{ \npackageUrl:\"',json(replace(activity('GetAzureWriteUrl').output.value,'\\','')).BlobUrl,'\", \ndefinitionGroupId : \"',pipeline().parameters.definitionGroupId,'\", \nexecutionId : \"pipeline-',variables('ExecutionId'),'\", \nexecute : \"true\", \noverwrite : \"true\", \nlegalEntityId : \"',pipeline().parameters.LegalEntityId,'\" }')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Zip Files",
						"description": "Zipping the file.csv with the package header.xml and Manifest.xml",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GetAzureWriteUrl",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ZipFiles",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineRunId": {
									"value": "@pipeline().parameters.PipeLineRunId",
									"type": "Expression"
								},
								"StorageAccountKey": {
									"value": "@pipeline().parameters.StorageAccountKey",
									"type": "Expression"
								},
								"Container": {
									"value": "@pipeline().parameters.Container",
									"type": "Expression"
								},
								"D365PackagesFolder": {
									"value": "@pipeline().parameters.PackageFolder",
									"type": "Expression"
								},
								"D365PackagesContainer": {
									"value": "@pipeline().parameters.PackageContainer",
									"type": "Expression"
								},
								"FileFolderPath": {
									"value": "@concat('InProgress/',pipeline().parameters.PipeLineTimeStamp,'_',pipeline().parameters.PipeLineRunId)",
									"type": "Expression"
								},
								"ZippedFolderPath": {
									"value": "@pipeline().parameters.ZippedFolder",
									"type": "Expression"
								},
								"TransformedFolderPath": {
									"value": "@pipeline().parameters.TransformedFolderPath",
									"type": "Expression"
								},
								"PipelineTimeStamp": {
									"value": "@pipeline().parameters.PipeLineTimeStamp",
									"type": "Expression"
								},
								"MetadataFolderPath": {
									"value": "@pipeline().parameters.PackageFolder",
									"type": "Expression"
								},
								"BlobStorageKey": {
									"value": "@activity('Get Azure Key Secret').output.value",
									"type": "Expression"
								},
								"FileName": {
									"value": "@pipeline().parameters.ZipFileName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete Uploaded Zip File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Archive Uploaded Zip File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Binary_MSI",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.IntegrationContainer",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.ZippedFolder",
										"type": "Expression"
									},
									"Filename": {
										"value": "@concat(pipeline().parameters.ZipFileName,'.zip')",
										"type": "Expression"
									},
									"ls_prm_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Archive Uploaded Zip File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Check Import Status",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings"
									}
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_Binary_MSI",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.IntegrationContainer",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.ZippedFolder",
										"type": "Expression"
									},
									"Filename": {
										"value": "@concat(pipeline().parameters.ZipFileName,'.zip')",
										"type": "Expression"
									},
									"ls_prm_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Binary_MSI",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.IntegrationContainer",
										"type": "Expression"
									},
									"Directory": {
										"value": "@concat(\n    pipeline().parameters.ZippedFolder,'/',\n    pipeline().parameters.UploadedZipFolder,'/',\n    substring(pipeline().parameters.FilenameTimestamp,0,17)    \n)",
										"type": "Expression"
									},
									"Filename": {
										"value": "@concat(pipeline().parameters.ZipFileName,'.zip')",
										"type": "Expression"
									},
									"ls_prm_blob_mi": {
										"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Log Error - Get TenantID",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Get TenantID",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ProcessError",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ErrorCode": {
									"value": "@activity('Get TenantID').error.errorCode",
									"type": "Expression"
								},
								"ErrorMessage": {
									"value": "@activity('Get TenantID').error.message",
									"type": "Expression"
								},
								"ErrorLogicAppURL": {
									"value": "@pipeline().parameters.ErrorLogicAppURL",
									"type": "Expression"
								},
								"ErrorActivity": {
									"value": "@concat('Get TenantID')",
									"type": "Expression"
								},
								"StorageAccountKey": {
									"value": "@pipeline().parameters.StorageAccountKey",
									"type": "Expression"
								},
								"LogContainer": {
									"value": "@pipeline().parameters.LogContainer",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogDirectory",
									"type": "Expression"
								},
								"PipelineTimeStamp": {
									"value": "@pipeline().parameters.PipeLineTimeStamp",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().parameters.PipeLineRunId",
									"type": "Expression"
								},
								"IntegrationContainer": {
									"value": "@pipeline().parameters.IntegrationContainer",
									"type": "Expression"
								},
								"IntegrationInputFolder": {
									"value": "@pipeline().parameters.IntegrationInputFolder",
									"type": "Expression"
								},
								"IntegrationFailureFolder": {
									"value": "@pipeline().parameters.IntegrationFailureFolder",
									"type": "Expression"
								},
								"InProgressFolder": {
									"value": "@pipeline().parameters.InProgressFolder",
									"type": "Expression"
								},
								"TransformedFolderPath": {
									"value": "@pipeline().parameters.TransformedFolderPath",
									"type": "Expression"
								},
								"SuccessFolder": {
									"value": "@pipeline().parameters.CompleteFolder",
									"type": "Expression"
								},
								"ZippedFolder": {
									"value": "@pipeline().parameters.ZippedFolder",
									"type": "Expression"
								},
								"ErroredZipFolder": {
									"value": "@pipeline().parameters.ErroredZipFolder",
									"type": "Expression"
								},
								"IntegrationId": {
									"value": "@pipeline().parameters.IntegrationId",
									"type": "Expression"
								},
								"SharepointFolder": {
									"value": "@pipeline().parameters.SharepointFolder",
									"type": "Expression"
								},
								"PendingFileName": {
									"value": "@pipeline().parameters.PendingFileName",
									"type": "Expression"
								},
								"LegalEntityId": {
									"value": "@pipeline().parameters.LegalEntityId",
									"type": "Expression"
								},
								"ZipFileName": {
									"value": "@pipeline().parameters.ZipFileName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Log Error - Get Azure Key Secret",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Get Azure Key Secret",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ProcessError",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ErrorCode": {
									"value": "@activity('Get Azure Key Secret').error.errorCode",
									"type": "Expression"
								},
								"ErrorMessage": {
									"value": "@activity('Get Azure Key Secret').error.message",
									"type": "Expression"
								},
								"ErrorLogicAppURL": {
									"value": "@pipeline().parameters.ErrorLogicAppURL",
									"type": "Expression"
								},
								"ErrorActivity": {
									"value": "@concat('Get Azure Key Secret')",
									"type": "Expression"
								},
								"StorageAccountKey": {
									"value": "@pipeline().parameters.StorageAccountKey",
									"type": "Expression"
								},
								"LogContainer": {
									"value": "@pipeline().parameters.LogContainer",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogDirectory",
									"type": "Expression"
								},
								"PipelineTimeStamp": {
									"value": "@pipeline().parameters.PipeLineTimeStamp",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().parameters.PipeLineRunId",
									"type": "Expression"
								},
								"IntegrationContainer": {
									"value": "@pipeline().parameters.IntegrationContainer",
									"type": "Expression"
								},
								"IntegrationInputFolder": {
									"value": "@pipeline().parameters.IntegrationInputFolder",
									"type": "Expression"
								},
								"IntegrationFailureFolder": {
									"value": "@pipeline().parameters.IntegrationFailureFolder",
									"type": "Expression"
								},
								"InProgressFolder": {
									"value": "@pipeline().parameters.InProgressFolder",
									"type": "Expression"
								},
								"TransformedFolderPath": {
									"value": "@pipeline().parameters.TransformedFolderPath",
									"type": "Expression"
								},
								"SuccessFolder": {
									"value": "@pipeline().parameters.CompleteFolder",
									"type": "Expression"
								},
								"ZippedFolder": {
									"value": "@pipeline().parameters.ZippedFolder",
									"type": "Expression"
								},
								"ErroredZipFolder": {
									"value": "@pipeline().parameters.ErroredZipFolder",
									"type": "Expression"
								},
								"IntegrationId": {
									"value": "@pipeline().parameters.IntegrationId",
									"type": "Expression"
								},
								"SharepointFolder": {
									"value": "@pipeline().parameters.SharepointFolder",
									"type": "Expression"
								},
								"PendingFileName": {
									"value": "@pipeline().parameters.PendingFileName",
									"type": "Expression"
								},
								"LegalEntityId": {
									"value": "@pipeline().parameters.LegalEntityId",
									"type": "Expression"
								},
								"ZipFileName": {
									"value": "@pipeline().parameters.ZipFileName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Log Error - Authentication Login",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "AuthenticationLogin",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ProcessError",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ErrorCode": {
									"value": "@activity('AuthenticationLogin').error.errorCode",
									"type": "Expression"
								},
								"ErrorMessage": {
									"value": "@activity('AuthenticationLogin').error.message",
									"type": "Expression"
								},
								"ErrorLogicAppURL": {
									"value": "@pipeline().parameters.ErrorLogicAppURL",
									"type": "Expression"
								},
								"ErrorActivity": {
									"value": "@concat('Authentication Login')",
									"type": "Expression"
								},
								"StorageAccountKey": {
									"value": "@pipeline().parameters.StorageAccountKey",
									"type": "Expression"
								},
								"LogContainer": {
									"value": "@pipeline().parameters.LogContainer",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogDirectory",
									"type": "Expression"
								},
								"PipelineTimeStamp": {
									"value": "@pipeline().parameters.PipeLineTimeStamp",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().parameters.PipeLineRunId",
									"type": "Expression"
								},
								"IntegrationContainer": {
									"value": "@pipeline().parameters.IntegrationContainer",
									"type": "Expression"
								},
								"IntegrationInputFolder": {
									"value": "@pipeline().parameters.IntegrationInputFolder",
									"type": "Expression"
								},
								"IntegrationFailureFolder": {
									"value": "@pipeline().parameters.IntegrationFailureFolder",
									"type": "Expression"
								},
								"InProgressFolder": {
									"value": "@pipeline().parameters.InProgressFolder",
									"type": "Expression"
								},
								"TransformedFolderPath": {
									"value": "@pipeline().parameters.TransformedFolderPath",
									"type": "Expression"
								},
								"SuccessFolder": {
									"value": "@pipeline().parameters.CompleteFolder",
									"type": "Expression"
								},
								"ZippedFolder": {
									"value": "@pipeline().parameters.ZippedFolder",
									"type": "Expression"
								},
								"ErroredZipFolder": {
									"value": "@pipeline().parameters.ErroredZipFolder",
									"type": "Expression"
								},
								"IntegrationId": {
									"value": "@pipeline().parameters.IntegrationId",
									"type": "Expression"
								},
								"SharepointFolder": {
									"value": "@pipeline().parameters.SharepointFolder",
									"type": "Expression"
								},
								"PendingFileName": {
									"value": "@pipeline().parameters.PendingFileName",
									"type": "Expression"
								},
								"LegalEntityId": {
									"value": "@pipeline().parameters.LegalEntityId",
									"type": "Expression"
								},
								"ZipFileName": {
									"value": "@pipeline().parameters.ZipFileName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Log Error - GetAzureWriteUrl",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GetAzureWriteUrl",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ProcessError",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ErrorCode": {
									"value": "@activity('GetAzureWriteUrl').error.errorCode",
									"type": "Expression"
								},
								"ErrorMessage": {
									"value": "@activity('GetAzureWriteUrl').error.message",
									"type": "Expression"
								},
								"ErrorLogicAppURL": {
									"value": "@pipeline().parameters.ErrorLogicAppURL",
									"type": "Expression"
								},
								"ErrorActivity": {
									"value": "@concat('Get Azure Write Url')",
									"type": "Expression"
								},
								"StorageAccountKey": {
									"value": "@pipeline().parameters.StorageAccountKey",
									"type": "Expression"
								},
								"LogContainer": {
									"value": "@pipeline().parameters.LogContainer",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogDirectory",
									"type": "Expression"
								},
								"PipelineTimeStamp": {
									"value": "@pipeline().parameters.PipeLineTimeStamp",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().parameters.PipeLineRunId",
									"type": "Expression"
								},
								"IntegrationContainer": {
									"value": "@pipeline().parameters.IntegrationContainer",
									"type": "Expression"
								},
								"IntegrationInputFolder": {
									"value": "@pipeline().parameters.IntegrationInputFolder",
									"type": "Expression"
								},
								"IntegrationFailureFolder": {
									"value": "@pipeline().parameters.IntegrationFailureFolder",
									"type": "Expression"
								},
								"InProgressFolder": {
									"value": "@pipeline().parameters.InProgressFolder",
									"type": "Expression"
								},
								"TransformedFolderPath": {
									"value": "@pipeline().parameters.TransformedFolderPath",
									"type": "Expression"
								},
								"SuccessFolder": {
									"value": "@pipeline().parameters.CompleteFolder",
									"type": "Expression"
								},
								"ZippedFolder": {
									"value": "@pipeline().parameters.ZippedFolder",
									"type": "Expression"
								},
								"ErroredZipFolder": {
									"value": "@pipeline().parameters.ErroredZipFolder",
									"type": "Expression"
								},
								"IntegrationId": {
									"value": "@pipeline().parameters.IntegrationId",
									"type": "Expression"
								},
								"SharepointFolder": {
									"value": "@pipeline().parameters.SharepointFolder",
									"type": "Expression"
								},
								"PendingFileName": {
									"value": "@pipeline().parameters.PendingFileName",
									"type": "Expression"
								},
								"LegalEntityId": {
									"value": "@pipeline().parameters.LegalEntityId",
									"type": "Expression"
								},
								"ZipFileName": {
									"value": "@pipeline().parameters.PipeLineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Log Error - Zip Files",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Zip Files",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ProcessError",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ErrorCode": {
									"value": "@activity('Zip Files').error.errorCode",
									"type": "Expression"
								},
								"ErrorMessage": {
									"value": "@activity('Zip Files').error.message",
									"type": "Expression"
								},
								"ErrorLogicAppURL": {
									"value": "@pipeline().parameters.ErrorLogicAppURL",
									"type": "Expression"
								},
								"ErrorActivity": {
									"value": "@concat('Zip Files')",
									"type": "Expression"
								},
								"StorageAccountKey": {
									"value": "@pipeline().parameters.StorageAccountKey",
									"type": "Expression"
								},
								"LogContainer": {
									"value": "@pipeline().parameters.LogContainer",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogDirectory",
									"type": "Expression"
								},
								"PipelineTimeStamp": {
									"value": "@pipeline().parameters.PipeLineTimeStamp",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().parameters.PipeLineRunId",
									"type": "Expression"
								},
								"IntegrationContainer": {
									"value": "@pipeline().parameters.IntegrationContainer",
									"type": "Expression"
								},
								"IntegrationInputFolder": {
									"value": "@pipeline().parameters.IntegrationInputFolder",
									"type": "Expression"
								},
								"IntegrationFailureFolder": {
									"value": "@pipeline().parameters.IntegrationFailureFolder",
									"type": "Expression"
								},
								"InProgressFolder": {
									"value": "@pipeline().parameters.InProgressFolder",
									"type": "Expression"
								},
								"TransformedFolderPath": {
									"value": "@pipeline().parameters.TransformedFolderPath",
									"type": "Expression"
								},
								"SuccessFolder": {
									"value": "@pipeline().parameters.CompleteFolder",
									"type": "Expression"
								},
								"ZippedFolder": {
									"value": "@pipeline().parameters.ZippedFolder",
									"type": "Expression"
								},
								"ErroredZipFolder": {
									"value": "@pipeline().parameters.ErroredZipFolder",
									"type": "Expression"
								},
								"IntegrationId": {
									"value": "@pipeline().parameters.IntegrationId",
									"type": "Expression"
								},
								"SharepointFolder": {
									"value": "@pipeline().parameters.SharepointFolder",
									"type": "Expression"
								},
								"PendingFileName": {
									"value": "@pipeline().parameters.PendingFileName",
									"type": "Expression"
								},
								"LegalEntityId": {
									"value": "@pipeline().parameters.LegalEntityId",
									"type": "Expression"
								},
								"ZipFileName": {
									"value": "@pipeline().parameters.ZipFileName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Log Error - Upload File",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Upload File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ProcessError",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ErrorCode": {
									"value": "@activity('Upload File').error.errorCode",
									"type": "Expression"
								},
								"ErrorMessage": {
									"value": "@activity('Upload File').error.message",
									"type": "Expression"
								},
								"ErrorLogicAppURL": {
									"value": "@pipeline().parameters.ErrorLogicAppURL",
									"type": "Expression"
								},
								"ErrorActivity": {
									"value": "@concat('Upload File')",
									"type": "Expression"
								},
								"StorageAccountKey": {
									"value": "@pipeline().parameters.StorageAccountKey",
									"type": "Expression"
								},
								"LogContainer": {
									"value": "@pipeline().parameters.LogContainer",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogDirectory",
									"type": "Expression"
								},
								"PipelineTimeStamp": {
									"value": "@pipeline().parameters.PipeLineTimeStamp",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().parameters.PipeLineRunId",
									"type": "Expression"
								},
								"IntegrationContainer": {
									"value": "@pipeline().parameters.IntegrationContainer",
									"type": "Expression"
								},
								"IntegrationInputFolder": {
									"value": "@pipeline().parameters.IntegrationInputFolder",
									"type": "Expression"
								},
								"IntegrationFailureFolder": {
									"value": "@pipeline().parameters.IntegrationFailureFolder",
									"type": "Expression"
								},
								"InProgressFolder": {
									"value": "@pipeline().parameters.InProgressFolder",
									"type": "Expression"
								},
								"TransformedFolderPath": {
									"value": "@pipeline().parameters.TransformedFolderPath",
									"type": "Expression"
								},
								"SuccessFolder": {
									"value": "@pipeline().parameters.CompleteFolder",
									"type": "Expression"
								},
								"ZippedFolder": {
									"value": "@pipeline().parameters.ZippedFolder",
									"type": "Expression"
								},
								"ErroredZipFolder": {
									"value": "@pipeline().parameters.ErroredZipFolder",
									"type": "Expression"
								},
								"IntegrationId": {
									"value": "@pipeline().parameters.IntegrationId",
									"type": "Expression"
								},
								"SharepointFolder": {
									"value": "@pipeline().parameters.SharepointFolder",
									"type": "Expression"
								},
								"PendingFileName": {
									"value": "@pipeline().parameters.PendingFileName",
									"type": "Expression"
								},
								"LegalEntityId": {
									"value": "@pipeline().parameters.LegalEntityId",
									"type": "Expression"
								},
								"ZipFileName": {
									"value": "@pipeline().parameters.ZipFileName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Log Error - Execute Import",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute import",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ProcessError",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ErrorCode": {
									"value": "@activity('Execute import').error.errorCode",
									"type": "Expression"
								},
								"ErrorMessage": {
									"value": "@activity('Execute import').error.message",
									"type": "Expression"
								},
								"ErrorLogicAppURL": {
									"value": "@pipeline().parameters.ErrorLogicAppURL",
									"type": "Expression"
								},
								"ErrorActivity": {
									"value": "@concat('Execute Import')",
									"type": "Expression"
								},
								"StorageAccountKey": {
									"value": "@pipeline().parameters.StorageAccountKey",
									"type": "Expression"
								},
								"LogContainer": {
									"value": "@pipeline().parameters.LogContainer",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogDirectory",
									"type": "Expression"
								},
								"PipelineTimeStamp": {
									"value": "@pipeline().parameters.PipeLineTimeStamp",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().parameters.PipeLineRunId",
									"type": "Expression"
								},
								"IntegrationContainer": {
									"value": "@pipeline().parameters.IntegrationContainer",
									"type": "Expression"
								},
								"IntegrationInputFolder": {
									"value": "@pipeline().parameters.IntegrationInputFolder",
									"type": "Expression"
								},
								"IntegrationFailureFolder": {
									"value": "@pipeline().parameters.IntegrationFailureFolder",
									"type": "Expression"
								},
								"InProgressFolder": {
									"value": "@pipeline().parameters.InProgressFolder",
									"type": "Expression"
								},
								"TransformedFolderPath": {
									"value": "@pipeline().parameters.TransformedFolderPath",
									"type": "Expression"
								},
								"SuccessFolder": {
									"value": "@pipeline().parameters.CompleteFolder",
									"type": "Expression"
								},
								"ZippedFolder": {
									"value": "@pipeline().parameters.ZippedFolder",
									"type": "Expression"
								},
								"ErroredZipFolder": {
									"value": "@pipeline().parameters.ErroredZipFolder",
									"type": "Expression"
								},
								"IntegrationId": {
									"value": "@pipeline().parameters.IntegrationId",
									"type": "Expression"
								},
								"SharepointFolder": {
									"value": "@pipeline().parameters.SharepointFolder",
									"type": "Expression"
								},
								"PendingFileName": {
									"value": "@pipeline().parameters.PendingFileName",
									"type": "Expression"
								},
								"LegalEntityId": {
									"value": "@pipeline().parameters.LegalEntityId",
									"type": "Expression"
								},
								"ZipFileName": {
									"value": "@pipeline().parameters.ZipFileName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Log Error - Archive Uploaded Zip File",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Archive Uploaded Zip File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ProcessError",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ErrorCode": {
									"value": "@activity('Archive Uploaded Zip File').error.errorCode",
									"type": "Expression"
								},
								"ErrorMessage": {
									"value": "@activity('Archive Uploaded Zip File').error.message",
									"type": "Expression"
								},
								"ErrorLogicAppURL": {
									"value": "@pipeline().parameters.ErrorLogicAppURL",
									"type": "Expression"
								},
								"ErrorActivity": {
									"value": "@concat('Archive Uploaded Zip File')",
									"type": "Expression"
								},
								"StorageAccountKey": {
									"value": "@pipeline().parameters.StorageAccountKey",
									"type": "Expression"
								},
								"LogContainer": {
									"value": "@pipeline().parameters.LogContainer",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogDirectory",
									"type": "Expression"
								},
								"PipelineTimeStamp": {
									"value": "@pipeline().parameters.PipeLineTimeStamp",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().parameters.PipeLineRunId",
									"type": "Expression"
								},
								"IntegrationContainer": {
									"value": "@pipeline().parameters.IntegrationContainer",
									"type": "Expression"
								},
								"IntegrationInputFolder": {
									"value": "@pipeline().parameters.IntegrationInputFolder",
									"type": "Expression"
								},
								"IntegrationFailureFolder": {
									"value": "@pipeline().parameters.IntegrationFailureFolder",
									"type": "Expression"
								},
								"InProgressFolder": {
									"value": "@pipeline().parameters.InProgressFolder",
									"type": "Expression"
								},
								"TransformedFolderPath": {
									"value": "@pipeline().parameters.TransformedFolderPath",
									"type": "Expression"
								},
								"SuccessFolder": {
									"value": "@pipeline().parameters.CompleteFolder",
									"type": "Expression"
								},
								"ZippedFolder": {
									"value": "@pipeline().parameters.ZippedFolder",
									"type": "Expression"
								},
								"ErroredZipFolder": {
									"value": "@pipeline().parameters.ErroredZipFolder",
									"type": "Expression"
								},
								"IntegrationId": {
									"value": "@pipeline().parameters.IntegrationId",
									"type": "Expression"
								},
								"SharepointFolder": {
									"value": "@pipeline().parameters.SharepointFolder",
									"type": "Expression"
								},
								"PendingFileName": {
									"value": "@pipeline().parameters.PendingFileName",
									"type": "Expression"
								},
								"LegalEntityId": {
									"value": "@pipeline().parameters.LegalEntityId",
									"type": "Expression"
								},
								"ZipFileName": {
									"value": "@pipeline().parameters.ZipFileName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Log Error - Delete Uploaded Zip File",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete Uploaded Zip File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ProcessError",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ErrorCode": {
									"value": "@activity('Delete Uploaded Zip File').error.errorCode",
									"type": "Expression"
								},
								"ErrorMessage": {
									"value": "@activity('Delete Uploaded Zip File').error.message",
									"type": "Expression"
								},
								"ErrorLogicAppURL": {
									"value": "@pipeline().parameters.ErrorLogicAppURL",
									"type": "Expression"
								},
								"ErrorActivity": {
									"value": "@concat('Delete Uploaded Zip File')",
									"type": "Expression"
								},
								"StorageAccountKey": {
									"value": "@pipeline().parameters.StorageAccountKey",
									"type": "Expression"
								},
								"LogContainer": {
									"value": "@pipeline().parameters.LogContainer",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogDirectory",
									"type": "Expression"
								},
								"PipelineTimeStamp": {
									"value": "@pipeline().parameters.PipeLineTimeStamp",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().parameters.PipeLineRunId",
									"type": "Expression"
								},
								"IntegrationContainer": {
									"value": "@pipeline().parameters.IntegrationContainer",
									"type": "Expression"
								},
								"IntegrationInputFolder": {
									"value": "@pipeline().parameters.IntegrationInputFolder",
									"type": "Expression"
								},
								"IntegrationFailureFolder": {
									"value": "@pipeline().parameters.IntegrationFailureFolder",
									"type": "Expression"
								},
								"InProgressFolder": {
									"value": "@pipeline().parameters.InProgressFolder",
									"type": "Expression"
								},
								"TransformedFolderPath": {
									"value": "@pipeline().parameters.TransformedFolderPath",
									"type": "Expression"
								},
								"SuccessFolder": {
									"value": "@pipeline().parameters.CompleteFolder",
									"type": "Expression"
								},
								"ZippedFolder": {
									"value": "@pipeline().parameters.ZippedFolder",
									"type": "Expression"
								},
								"ErroredZipFolder": {
									"value": "@pipeline().parameters.ErroredZipFolder",
									"type": "Expression"
								},
								"IntegrationId": {
									"value": "@pipeline().parameters.IntegrationId",
									"type": "Expression"
								},
								"SharepointFolder": {
									"value": "@pipeline().parameters.SharepointFolder",
									"type": "Expression"
								},
								"PendingFileName": {
									"value": "@pipeline().parameters.PendingFileName",
									"type": "Expression"
								},
								"LegalEntityId": {
									"value": "@pipeline().parameters.LegalEntityId",
									"type": "Expression"
								},
								"ZipFileName": {
									"value": "@pipeline().parameters.ZipFileName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Generate Execution Id",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Upload File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExecutionId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Check Import Status",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Import Status Delay",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Authorization": {
									"value": "Bearer @{activity('AuthenticationLogin').output.access_token}",
									"type": "Expression"
								}
							},
							"url": {
								"value": "@concat(pipeline().parameters.d365URL,'/data/DataManagementDefinitionGroups/Microsoft.Dynamics.DataEntities.GetExecutionSummaryStatus')",
								"type": "Expression"
							},
							"body": {
								"value": "@concat('{ executionId : \"pipeline-',variables('ExecutionId'),'\" }')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute PL_Log_D365Import",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Check Import Status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Log_D365Import",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineFactory": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineStartTimestamp": {
									"value": "@pipeline().parameters.PipeLineTimeStamp",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().parameters.PipeLineRunId",
									"type": "Expression"
								},
								"IntegrationName": {
									"value": "@pipeline().parameters.IntegrationName",
									"type": "Expression"
								},
								"LegalEntityId": {
									"value": "@pipeline().parameters.LegalEntityId",
									"type": "Expression"
								},
								"DefinitionGroupId": {
									"value": "@pipeline().parameters.definitionGroupId",
									"type": "Expression"
								},
								"ExecutionId": {
									"value": "@variables('ExecutionId')",
									"type": "Expression"
								},
								"DataPackageName": {
									"value": "@concat(\n    pipeline().parameters.FileCounter,'-',\n    pipeline().parameters.PipeLineRunId,'.zip'\n)",
									"type": "Expression"
								},
								"ImportTimestamp": {
									"value": "@variables('ImportTimestamp')",
									"type": "Expression"
								},
								"ImportStatus": {
									"value": "@activity('Check Import Status').output.value",
									"type": "Expression"
								},
								"ImportLogContainer": {
									"value": "@pipeline().parameters.LogContainer",
									"type": "Expression"
								},
								"ImportLogFolder": {
									"value": "@pipeline().parameters.ImportLogFolder",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set Import Timestamp",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Generate Execution Id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "ImportTimestamp",
							"value": {
								"value": "@utcNow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Check Import Status Delay",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Execute import",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 20
						}
					},
					{
						"name": "Log Error - Log Import Status",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute PL_Log_D365Import",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ProcessError",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ErrorCode": {
									"value": "@activity('Execute PL_Log_D365Import').error.errorCode",
									"type": "Expression"
								},
								"ErrorMessage": {
									"value": "@activity('Execute PL_Log_D365Import').error.message",
									"type": "Expression"
								},
								"ErrorLogicAppURL": {
									"value": "@pipeline().parameters.ErrorLogicAppURL",
									"type": "Expression"
								},
								"ErrorActivity": {
									"value": "@concat('Execute PL_Log_D365Import')",
									"type": "Expression"
								},
								"StorageAccountKey": {
									"value": "@pipeline().parameters.StorageAccountKey",
									"type": "Expression"
								},
								"LogContainer": {
									"value": "@pipeline().parameters.LogContainer",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogDirectory",
									"type": "Expression"
								},
								"PipelineTimeStamp": {
									"value": "@pipeline().parameters.PipeLineTimeStamp",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().parameters.PipeLineRunId",
									"type": "Expression"
								},
								"IntegrationContainer": {
									"value": "@pipeline().parameters.IntegrationContainer",
									"type": "Expression"
								},
								"IntegrationInputFolder": {
									"value": "@pipeline().parameters.IntegrationInputFolder",
									"type": "Expression"
								},
								"IntegrationFailureFolder": {
									"value": "@pipeline().parameters.IntegrationFailureFolder",
									"type": "Expression"
								},
								"InProgressFolder": {
									"value": "@pipeline().parameters.InProgressFolder",
									"type": "Expression"
								},
								"TransformedFolderPath": {
									"value": "@pipeline().parameters.TransformedFolderPath",
									"type": "Expression"
								},
								"SuccessFolder": {
									"value": "@pipeline().parameters.CompleteFolder",
									"type": "Expression"
								},
								"ZippedFolder": {
									"value": "@pipeline().parameters.ZippedFolder",
									"type": "Expression"
								},
								"ErroredZipFolder": {
									"value": "@pipeline().parameters.ErroredZipFolder",
									"type": "Expression"
								},
								"IntegrationId": {
									"value": "@pipeline().parameters.IntegrationId",
									"type": "Expression"
								},
								"SharepointFolder": {
									"value": "@pipeline().parameters.SharepointFolder",
									"type": "Expression"
								},
								"PendingFileName": {
									"value": "@pipeline().parameters.PendingFileName",
									"type": "Expression"
								},
								"LegalEntityId": {
									"value": "@pipeline().parameters.LegalEntityId",
									"type": "Expression"
								},
								"ZipFileName": {
									"value": "@pipeline().parameters.ZipFileName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Log Error - Check Import Status",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Check Import Status",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ProcessError",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ErrorCode": {
									"value": "@activity('Check Import Status').error.errorCode",
									"type": "Expression"
								},
								"ErrorMessage": {
									"value": "@activity('Check Import Status').error.message",
									"type": "Expression"
								},
								"ErrorLogicAppURL": {
									"value": "@pipeline().parameters.ErrorLogicAppURL",
									"type": "Expression"
								},
								"ErrorActivity": {
									"value": "@concat('Check Import Status')",
									"type": "Expression"
								},
								"StorageAccountKey": {
									"value": "@pipeline().parameters.StorageAccountKey",
									"type": "Expression"
								},
								"LogContainer": {
									"value": "@pipeline().parameters.LogContainer",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogDirectory",
									"type": "Expression"
								},
								"PipelineTimeStamp": {
									"value": "@pipeline().parameters.PipeLineTimeStamp",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().parameters.PipeLineRunId",
									"type": "Expression"
								},
								"IntegrationContainer": {
									"value": "@pipeline().parameters.IntegrationContainer",
									"type": "Expression"
								},
								"IntegrationInputFolder": {
									"value": "@pipeline().parameters.IntegrationInputFolder",
									"type": "Expression"
								},
								"IntegrationFailureFolder": {
									"value": "@pipeline().parameters.IntegrationFailureFolder",
									"type": "Expression"
								},
								"InProgressFolder": {
									"value": "@pipeline().parameters.InProgressFolder",
									"type": "Expression"
								},
								"TransformedFolderPath": {
									"value": "@pipeline().parameters.TransformedFolderPath",
									"type": "Expression"
								},
								"SuccessFolder": {
									"value": "@pipeline().parameters.CompleteFolder",
									"type": "Expression"
								},
								"ZippedFolder": {
									"value": "@pipeline().parameters.ZippedFolder",
									"type": "Expression"
								},
								"ErroredZipFolder": {
									"value": "@pipeline().parameters.ErroredZipFolder",
									"type": "Expression"
								},
								"IntegrationId": {
									"value": "@pipeline().parameters.IntegrationId",
									"type": "Expression"
								},
								"SharepointFolder": {
									"value": "@pipeline().parameters.SharepointFolder",
									"type": "Expression"
								},
								"PendingFileName": {
									"value": "@pipeline().parameters.PendingFileName",
									"type": "Expression"
								},
								"LegalEntityId": {
									"value": "@pipeline().parameters.LegalEntityId",
									"type": "Expression"
								},
								"ZipFileName": {
									"value": "@concat(pipeline().parameters.ZipFileName,'.zip')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Container": {
						"type": "String"
					},
					"definitionGroupId": {
						"type": "string"
					},
					"StorageAccountKey": {
						"type": "string"
					},
					"ZippedFolder": {
						"type": "string"
					},
					"SecretName": {
						"type": "string"
					},
					"AppID": {
						"type": "string"
					},
					"TenantID": {
						"type": "string"
					},
					"d365URL": {
						"type": "string"
					},
					"LogContainer": {
						"type": "string"
					},
					"PackageFolder": {
						"type": "string"
					},
					"PackageContainer": {
						"type": "string"
					},
					"InProgressFolder": {
						"type": "string"
					},
					"ErrorLogicAppURL": {
						"type": "string"
					},
					"PipeLineRunId": {
						"type": "string"
					},
					"PipeLineTimeStamp": {
						"type": "string"
					},
					"LegalEntityId": {
						"type": "string"
					},
					"ErrorSourceContainer": {
						"type": "string"
					},
					"LogDirectory": {
						"type": "string"
					},
					"IntegrationContainer": {
						"type": "string"
					},
					"IntegrationInputFolder": {
						"type": "string"
					},
					"IntegrationFailureFolder": {
						"type": "string"
					},
					"TransformedFolderPath": {
						"type": "string"
					},
					"CompleteFolder": {
						"type": "string"
					},
					"UploadFileName": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"ErroredZipFolder": {
						"type": "string"
					},
					"UploadedZipFolder": {
						"type": "string"
					},
					"FileCounter": {
						"type": "string"
					},
					"FilenameTimestamp": {
						"type": "string"
					},
					"IntegrationId": {
						"type": "string"
					},
					"SharepointFolder": {
						"type": "string"
					},
					"PendingFileName": {
						"type": "string"
					},
					"IntegrationName": {
						"type": "string"
					},
					"ImportLogFolder": {
						"type": "string"
					},
					"AzureKeyVault": {
						"type": "string"
					},
					"ZipFileName": {
						"type": "string"
					}
				},
				"variables": {
					"ExecutionId": {
						"type": "String"
					},
					"ImportTimestamp": {
						"type": "String"
					},
					"LogFolderDate": {
						"type": "String"
					}
				},
				"folder": {
					"name": "04_Common"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-26T12:17:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Binary_MSI')]",
				"[concat(variables('factoryId'), '/datasets/DS_FO_Folder')]",
				"[concat(variables('factoryId'), '/pipelines/PL_ZipFiles')]",
				"[concat(variables('factoryId'), '/pipelines/PL_ProcessError')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Log_D365Import')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ZipFiles')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Zip FIle",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@endswith(pipeline().parameters.FileName, '.zip')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Move Package Files",
									"description": "Move PackageHeader.xml and Manifest.xml from metedata folder to In progress folder",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_Folder_MSI",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.D365PackagesContainer",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@pipeline().parameters.MetadataFolderPath",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_Folder_MSI",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.Container",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@concat(\n    pipeline().parameters.TransformedFolderPath,'/',\n    pipeline().parameters.PipelineRunId\n)",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Zip File",
									"description": "Read PackageHeader.xml, Manifest.xml and csv file from in Progress and sink them in the zipped folder",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Move Package Files",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_Folder_MSI",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.Container",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@concat(\n    pipeline().parameters.TransformedFolderPath,'/',\n    pipeline().parameters.PipelineRunId\n)",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_Binary_MSI",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.Container",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.ZippedFolderPath",
													"type": "Expression"
												},
												"Filename": {
													"value": "@concat(pipeline().parameters.FileName,'.zip')",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Clear Processed Folder",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Zip File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_Folder_MSI",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.Container",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@concat(\n    pipeline().parameters.TransformedFolderPath, '/',\n    pipeline().parameters.PipelineRunId\n)",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "move to zippped",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings",
												"compressionProperties": {
													"type": "ZipDeflateReadSettings"
												}
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_Binary_MSI",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.Container",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.ZippedFolderPath",
													"type": "Expression"
												},
												"Filename": {
													"value": "@pipeline().parameters.FileName",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_Binary_MSI",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.Container",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.ZippedFolderPath",
													"type": "Expression"
												},
												"Filename": {
													"value": "@pipeline().parameters.FileName",
													"type": "Expression"
												},
												"ls_prm_blob_mi": {
													"value": "@pipeline().globalParameters.LSMIServiceEndpoint",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PipelineRunId": {
						"type": "string"
					},
					"StorageAccountKey": {
						"type": "string"
					},
					"Container": {
						"type": "string"
					},
					"D365PackagesFolder": {
						"type": "string"
					},
					"D365PackagesContainer": {
						"type": "string"
					},
					"FileFolderPath": {
						"type": "string"
					},
					"ZippedFolderPath": {
						"type": "string"
					},
					"TransformedFolderPath": {
						"type": "string"
					},
					"PipelineTimeStamp": {
						"type": "string"
					},
					"MetadataFolderPath": {
						"type": "string"
					},
					"BlobStorageKey": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"FileCounter": {
						"type": "string"
					},
					"SubFolderGUID": {
						"type": "string"
					}
				},
				"folder": {
					"name": "04_Common"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-05T16:50:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Folder_MSI')]",
				"[concat(variables('factoryId'), '/datasets/DS_Binary_MSI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Binary_MSI')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_BlobStorage_MI",
					"type": "LinkedServiceReference",
					"parameters": {
						"ls_prm_blob_mi": {
							"value": "@dataset().ls_prm_blob_mi",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					},
					"Filename": {
						"type": "string"
					},
					"ls_prm_blob_mi": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"compression": {
						"type": "ZipDeflate",
						"level": "Optimal"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_BlobStorage_MI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_CSVImportLog_Empty_MSI')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_BlobStorage_MI",
					"type": "LinkedServiceReference",
					"parameters": {
						"ls_prm_blob_mi": {
							"value": "@dataset().ls_prm_blob_mi",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"ls_prm_blob_mi": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "CSVImportLogFileTemplate.csv",
						"container": {
							"value": "adf-logging-core",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_BlobStorage_MI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_CSVLog_Empty_MSI')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_BlobStorage_MI",
					"type": "LinkedServiceReference",
					"parameters": {
						"ls_prm_blob_mi": {
							"value": "@dataset().ls_prm_blob_mi",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"ls_prm_blob_mi": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "CSVLogFileTemplate.csv",
						"container": "adf-logging-core"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_BlobStorage_MI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_CSV_CRLF_MSI')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_BlobStorage_MI",
					"type": "LinkedServiceReference",
					"parameters": {
						"ls_prm_blob_mi": {
							"value": "@dataset().ls_prm_blob_mi",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					},
					"Folder": {
						"type": "string"
					},
					"ls_prm_blob_mi": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Folder",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"rowDelimiter": "\r\n",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_BlobStorage_MI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_CSV_Log_MSI')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_BlobStorage_MI",
					"type": "LinkedServiceReference",
					"parameters": {
						"ls_prm_blob_mi": {
							"value": "@dataset().ls_prm_blob_mi",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"ls_prm_blob_mi": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "LogCoulmn1",
						"type": "String"
					},
					{
						"name": "LogColumn2",
						"type": "String"
					},
					{
						"name": "LogColumn3",
						"type": "String"
					},
					{
						"name": "LogColumn4",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_BlobStorage_MI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_CSV_MSI')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_BlobStorage_MI",
					"type": "LinkedServiceReference",
					"parameters": {
						"ls_prm_blob_mi": {
							"value": "@dataset().ls_prm_blob_mi",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					},
					"Folder": {
						"type": "string"
					},
					"ls_prm_blob_mi": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Folder",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_BlobStorage_MI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Excel_MSI')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_BlobStorage_MI",
					"type": "LinkedServiceReference",
					"parameters": {
						"ls_prm_blob_mi": {
							"value": "@dataset().ls_prm_blob_mi",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					},
					"Filename": {
						"type": "string"
					},
					"SheetIndex": {
						"type": "int"
					},
					"FirstRowCell": {
						"type": "string"
					},
					"ls_prm_blob_mi": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"sheetIndex": {
						"value": "@dataset().SheetIndex",
						"type": "Expression"
					},
					"range": {
						"value": "@dataset().FirstRowCell",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_BlobStorage_MI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_FO_Folder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_FO_Blob",
					"type": "LinkedServiceReference",
					"parameters": {
						"BlobURI": {
							"value": "@dataset().token",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"token": {
						"type": "string"
					},
					"path": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": {
							"value": "@dataset().path",
							"type": "Expression"
						}
					},
					"compression": {
						"type": "ZipDeflate",
						"level": "Optimal"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_FO_Blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_FTI_CSV_MSI')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_BlobStorage_MI",
					"type": "LinkedServiceReference",
					"parameters": {
						"ls_prm_blob_mi": {
							"value": "@dataset().ls_prm_blob_mi",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"ls_prm_blob_mi": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"nullValue": {
						"value": "blank()",
						"type": "Expression"
					},
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Number",
						"type": "String"
					},
					{
						"name": "Store number",
						"type": "String"
					},
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "Currency",
						"type": "String"
					},
					{
						"name": "Description",
						"type": "String"
					},
					{
						"name": "Invoice text",
						"type": "String"
					},
					{
						"name": "Sales category",
						"type": "String"
					},
					{
						"name": "Main account",
						"type": "String"
					},
					{
						"name": "Item VAT group",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "Unit price",
						"type": "String"
					},
					{
						"name": "Amount",
						"type": "String"
					},
					{
						"name": "Business unit",
						"type": "String"
					},
					{
						"name": "Department",
						"type": "String"
					},
					{
						"name": "Cost centre",
						"type": "String"
					},
					{
						"name": "Franchisee",
						"type": "String"
					},
					{
						"name": "Project",
						"type": "String"
					},
					{
						"name": "Consol_entity",
						"type": "String"
					},
					{
						"name": "Employee",
						"type": "String"
					},
					{
						"name": "Product",
						"type": "String"
					},
					{
						"name": "Prop_20",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_BlobStorage_MI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Folder_MSI')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_BlobStorage_MI",
					"type": "LinkedServiceReference",
					"parameters": {
						"ls_prm_blob_mi": {
							"value": "@dataset().ls_prm_blob_mi",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"FolderPath": {
						"type": "string"
					},
					"ls_prm_blob_mi": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_BlobStorage_MI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_GJ_CSV_MSI')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_BlobStorage_MI",
					"type": "LinkedServiceReference",
					"parameters": {
						"ls_prm_blob_mi": {
							"value": "@dataset().ls_prm_blob_mi",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"ls_prm_blob_mi": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"nullValue": {
						"value": "blank()",
						"type": "Expression"
					},
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "Account type",
						"type": "String"
					},
					{
						"name": "Main Account",
						"type": "String"
					},
					{
						"name": "Business Unit",
						"type": "String"
					},
					{
						"name": "Department",
						"type": "String"
					},
					{
						"name": "Cost Centre",
						"type": "String"
					},
					{
						"name": "Franchisee",
						"type": "String"
					},
					{
						"name": "Store",
						"type": "String"
					},
					{
						"name": "Project",
						"type": "String"
					},
					{
						"name": "Consol_Entity",
						"type": "String"
					},
					{
						"name": "Employee",
						"type": "String"
					},
					{
						"name": "Product",
						"type": "String"
					},
					{
						"name": "Description",
						"type": "String"
					},
					{
						"name": "Debit",
						"type": "String"
					},
					{
						"name": "Credit",
						"type": "String"
					},
					{
						"name": "Offset Account Type",
						"type": "String"
					},
					{
						"name": "Offset Account",
						"type": "String"
					},
					{
						"name": "Offset Business Unit",
						"type": "String"
					},
					{
						"name": "Offset Department",
						"type": "String"
					},
					{
						"name": "Offset Cost Centre",
						"type": "String"
					},
					{
						"name": "Offset Franchisee",
						"type": "String"
					},
					{
						"name": "Offset Store",
						"type": "String"
					},
					{
						"name": "Offset Project",
						"type": "String"
					},
					{
						"name": "Offset Consol_Entity",
						"type": "String"
					},
					{
						"name": "Offset Employee",
						"type": "String"
					},
					{
						"name": "Offset Product",
						"type": "String"
					},
					{
						"name": "Company",
						"type": "String"
					},
					{
						"name": "Offset Company",
						"type": "String"
					},
					{
						"name": "Offset Description",
						"type": "String"
					},
					{
						"name": "Currency",
						"type": "String"
					},
					{
						"name": "Journal name",
						"type": "String"
					},
					{
						"name": "Is Reverse Entry",
						"type": "String"
					},
					{
						"name": "Reverse date",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_BlobStorage_MI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Json_MSI')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_BlobStorage_MI",
					"type": "LinkedServiceReference",
					"parameters": {
						"ls_prm_blob_mi": {
							"value": "@dataset().ls_prm_blob_mi",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"file": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"ls_prm_blob_mi": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_BlobStorage_MI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Paragon_CSV_MSI')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Paragon_BlobStorage_MI",
					"type": "LinkedServiceReference",
					"parameters": {
						"ls_paragon_blob_mi": {
							"value": "@dataset().ls_paragon_blob_mi",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					},
					"Folder": {
						"type": "string"
					},
					"ls_paragon_blob_mi": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Folder",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Paragon_BlobStorage_MI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Paragon_CSV_OnPrem')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_VM_FileShare",
					"type": "LinkedServiceReference",
					"parameters": {
						"OnPremHost": {
							"value": "@dataset().OnPremHost",
							"type": "Expression"
						},
						"OnPremUserName": {
							"value": "@dataset().OnPremUserName",
							"type": "Expression"
						},
						"ParagonAzureKeyVault": {
							"value": "@dataset().ParagonAzureKeyVault",
							"type": "Expression"
						},
						"SecretName": {
							"value": "@dataset().SecretName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"Filename": {
						"type": "string"
					},
					"OnPremHost": {
						"type": "string"
					},
					"OnPremUserName": {
						"type": "string"
					},
					"ParagonAzureKeyVault": {
						"type": "string"
					},
					"SecretName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_VM_FileShare')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Paragon_CSV_OnPrem_Folder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_VM_FileShare",
					"type": "LinkedServiceReference",
					"parameters": {
						"OnPremHost": {
							"value": "@dataset().OnPremHost",
							"type": "Expression"
						},
						"OnPremUserName": {
							"value": "@dataset().OnPremUserName",
							"type": "Expression"
						},
						"ParagonAzureKeyVault": {
							"value": "@dataset().ParagonAzureKeyVault",
							"type": "Expression"
						},
						"SecretName": {
							"value": "@dataset().SecretName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"OnPremHost": {
						"type": "string"
					},
					"OnPremUserName": {
						"type": "string"
					},
					"ParagonAzureKeyVault": {
						"type": "string"
					},
					"SecretName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_VM_FileShare')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Paragon_Folder_MSI')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Paragon_BlobStorage_MI",
					"type": "LinkedServiceReference",
					"parameters": {
						"ls_paragon_blob_mi": {
							"value": "@dataset().ls_paragon_blob_mi",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"FolderPath": {
						"type": "string"
					},
					"ls_paragon_blob_mi": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Paragon_BlobStorage_MI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SB_CSV_MSI')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_BlobStorage_MI",
					"type": "LinkedServiceReference",
					"parameters": {
						"ls_prm_blob_mi": {
							"value": "@dataset().ls_prm_blob_mi",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"ls_prm_blob_mi": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"nullValue": {
						"value": "blank()",
						"type": "Expression"
					},
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "COMPANY",
						"type": "String"
					},
					{
						"name": "VOUCHER",
						"type": "String"
					},
					{
						"name": "INVOICEDATE",
						"type": "String"
					},
					{
						"name": "VENDOR",
						"type": "String"
					},
					{
						"name": "DESCRIPTION",
						"type": "String"
					},
					{
						"name": "CREDIT",
						"type": "String"
					},
					{
						"name": "DEBIT",
						"type": "String"
					},
					{
						"name": "CURRENCY",
						"type": "String"
					},
					{
						"name": "MAIN ACCOUNT",
						"type": "String"
					},
					{
						"name": "BUSINESS UNIT",
						"type": "String"
					},
					{
						"name": "DEPARTMENT",
						"type": "String"
					},
					{
						"name": "COST CENTRE",
						"type": "String"
					},
					{
						"name": "STORE",
						"type": "String"
					},
					{
						"name": "FRANCHISEE",
						"type": "String"
					},
					{
						"name": "PROJECT",
						"type": "String"
					},
					{
						"name": "CONSOL_ENTITY",
						"type": "String"
					},
					{
						"name": "EMPLOYEE",
						"type": "String"
					},
					{
						"name": "PRODUCT",
						"type": "String"
					},
					{
						"name": "ITEM VAT GROUP",
						"type": "String"
					},
					{
						"name": "APPROVER",
						"type": "String"
					},
					{
						"name": "PROCUREMENTCATEGORYNAME",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_BlobStorage_MI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_BlobStorage_MI')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"ls_prm_blob_mi": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('LS_BlobStorage_MI_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "[parameters('LS_BlobStorage_MI_properties_typeProperties_accountKind')]"
				},
				"connectVia": {
					"referenceName": "shir-dev-core",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/shir-dev-core')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_FO_Blob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"BlobURI": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('LS_FO_Blob_properties_typeProperties_sasUri')]"
				},
				"connectVia": {
					"referenceName": "shir-dev-core",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/shir-dev-core')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Paragon_AzureKeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"ParagonAzureKeyVault": {
						"type": "string",
						"defaultValue": "https://ukw-akv-d365int-Para-dev.vault.azure.net/"
					}
				},
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('LS_Paragon_AzureKeyVault_properties_typeProperties_baseUrl')]"
				},
				"connectVia": {
					"referenceName": "shir-dev-core",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/shir-dev-core')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Paragon_BlobStorage_MI')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"ls_paragon_blob_mi": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('LS_Paragon_BlobStorage_MI_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "[parameters('LS_Paragon_BlobStorage_MI_properties_typeProperties_accountKind')]"
				},
				"connectVia": {
					"referenceName": "shir-dev-core",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/shir-dev-core')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_VM_FileShare')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"OnPremHost": {
						"type": "string"
					},
					"OnPremUserName": {
						"type": "string"
					},
					"ParagonAzureKeyVault": {
						"type": "string"
					},
					"SecretName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('LS_VM_FileShare_properties_typeProperties_host')]",
					"userId": "[parameters('LS_VM_FileShare_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_Paragon_AzureKeyVault",
							"type": "LinkedServiceReference",
							"parameters": {
								"ParagonAzureKeyVault": {
									"value": "@linkedService().ParagonAzureKeyVault",
									"type": "Expression"
								}
							}
						},
						"secretName": {
							"value": "@linkedService().SecretName",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "shir-dev-core",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/shir-dev-core')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_Paragon_AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/shir-dev-core')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Core_Transformation_FreeTextInvoice')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Core_Integrations"
				},
				"type": "MappingDataFlow",
				"connectVia": {
					"referenceName": "shir-dev-core",
					"type": "IntegrationRuntimeReference"
				},
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_FTI_CSV_MSI",
								"type": "DatasetReference"
							},
							"name": "source1",
							"description": "Import data from DS_FTI_CSV_MSI. Remove sampling feature."
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_CSV_CRLF_MSI",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1Concatenations"
						},
						{
							"name": "select1"
						},
						{
							"name": "select2"
						},
						{
							"name": "filter2"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "Updateshiphenbackslash"
						}
					],
					"scriptLines": [
						"parameters{",
						"     FileName as string",
						"}",
						"source(output(",
						"          Number as string,",
						"          {Store number} as string,",
						"          Date as string,",
						"          Currency as string,",
						"          Description as string,",
						"          {Invoice text} as string,",
						"          {Sales category} as string,",
						"          {Main account} as string,",
						"          {Item VAT group} as string,",
						"          Quantity as string,",
						"          {Unit price} as string,",
						"          Amount as string,",
						"          {Business unit} as string,",
						"          Department as string,",
						"          {Cost centre} as string,",
						"          Franchisee as string,",
						"          Project as string,",
						"          Consol_entity as string,",
						"          Employee as string,",
						"          Product as string,",
						"          Prop_20 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     skipLines: 2) ~> source1",
						"Updateshiphenbackslash derive(DEFAULTDIMENSIONDISPLAYVALUE = concat({BUSINESS UNIT},'-',DEPARTMENT,'-',{COST CENTRE},'-',EMPLOYEE,'-',FRANCHISEE,'--',PRODUCT,'-',PROJECT,'-',STORE,'-',{CONSOL ENTITY}),",
						"          HEADERDEFAULTDIMENSIONDISPLAYVALUE = '',",
						"          CUSTOMERACCOUNT = '',",
						"          INVOICEACCOUNT = '',",
						"          SALESTAXGROUP = '',",
						"          POSTINGPROFILE = '',",
						"          TERMSOFPAYMENT = '',",
						"          METHODOFPAYMENT = '',",
						"          BILLINGCLASSIFICATION = '',",
						"          BILLINGCODE = '',",
						"          CASHDISCOUNTCODE = '',",
						"          CASHDISCOUNTDATE = '',",
						"          CUSTOMERREFERENCE = '',",
						"          CUSTOMERREQUISITION = '',",
						"          DOCUMENTDATE = '',",
						"          DUEDATE = '',",
						"          EINVOICEACCOUNTCODE = '',",
						"          EINVOICEISLINESPECIFIC = '',",
						"          INCLTAX = '',",
						"          MBSAXINVOICEID = '',",
						"          MBSOURACCOUNTNUM = STORE,",
						"          MBSSALESCATEGORYNAME = SALESCATEGORY,",
						"          OVERRIDESALESTAX = '') ~> derivedColumn1Concatenations",
						"source1 select(mapColumn(",
						"          FREETEXTNUMBER = Number,",
						"          STORE = {Store number},",
						"          INVOICEDATE = Date,",
						"          CURRENCYCODE = Currency,",
						"          DESCRIPTION = Description,",
						"          INVOICETXT = {Invoice text},",
						"          SALESCATEGORY = {Sales category},",
						"          LEDGERDIMENSIONDISPLAYVALUE = {Main account},",
						"          SALESTAXITEMGROUP = {Item VAT group},",
						"          QUANTITY = Quantity,",
						"          UNITPRICE = {Unit price},",
						"          AMOUNTCUR = Amount,",
						"          {BUSINESS UNIT} = {Business unit},",
						"          DEPARTMENT = Department,",
						"          {COST CENTRE} = {Cost centre},",
						"          FRANCHISEE = Franchisee,",
						"          PROJECT = Project,",
						"          {CONSOL ENTITY} = Consol_entity,",
						"          EMPLOYEE = Employee,",
						"          PRODUCT = Product",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"derivedColumn1Concatenations select(mapColumn(",
						"          FREETEXTNUMBER,",
						"          LINENUMBER,",
						"          AMOUNTCUR,",
						"          BILLINGCLASSIFICATION,",
						"          BILLINGCODE,",
						"          CASHDISCOUNTCODE,",
						"          CASHDISCOUNTDATE,",
						"          CURRENCYCODE,",
						"          CUSTOMERACCOUNT,",
						"          CUSTOMERREFERENCE,",
						"          CUSTOMERREQUISITION,",
						"          DEFAULTDIMENSIONDISPLAYVALUE,",
						"          DESCRIPTION,",
						"          DOCUMENTDATE,",
						"          DUEDATE,",
						"          EINVOICEACCOUNTCODE,",
						"          EINVOICEISLINESPECIFIC,",
						"          HEADERDEFAULTDIMENSIONDISPLAYVALUE,",
						"          INCLTAX,",
						"          INVOICEACCOUNT,",
						"          INVOICEDATE,",
						"          INVOICETXT,",
						"          LEDGERDIMENSIONDISPLAYVALUE,",
						"          MBSAXINVOICEID,",
						"          MBSOURACCOUNTNUM,",
						"          MBSSALESCATEGORYNAME,",
						"          METHODOFPAYMENT,",
						"          OVERRIDESALESTAX,",
						"          POSTINGPROFILE,",
						"          QUANTITY,",
						"          SALESTAXGROUP,",
						"          SALESTAXITEMGROUP,",
						"          TERMSOFPAYMENT,",
						"          UNITPRICE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select1 filter(FREETEXTNUMBER != '') ~> filter2",
						"filter2 keyGenerate(output(LINENUMBER as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive({BUSINESS UNIT} = iif(    instr({BUSINESS UNIT}, '\\\\-')>0,    {BUSINESS UNIT},    replace({BUSINESS UNIT}, '-', '\\\\-')),",
						"          DEPARTMENT = iif(    instr(DEPARTMENT, '\\\\-')>0,    DEPARTMENT,    replace(DEPARTMENT, '-', '\\\\-')),",
						"          {COST CENTRE} = iif(    instr({COST CENTRE}, '\\\\-')>0,    {COST CENTRE},    replace({COST CENTRE}, '-', '\\\\-')),",
						"          FRANCHISEE = iif(    instr(FRANCHISEE, '\\\\-')>0,    FRANCHISEE,    replace(FRANCHISEE, '-', '\\\\-')),",
						"          {CONSOL ENTITY} = iif(    instr({CONSOL ENTITY}, '\\\\-')>0,    {CONSOL ENTITY},    replace({CONSOL ENTITY}, '-', '\\\\-')),",
						"          EMPLOYEE = iif(    instr(EMPLOYEE, '\\\\-')>0,    EMPLOYEE,    replace(EMPLOYEE, '-', '\\\\-')),",
						"          PRODUCT = iif(    instr(PRODUCT, '\\\\-')>0,    PRODUCT,    replace(PRODUCT, '-', '\\\\-')),",
						"          STORE = iif(    instr(STORE, '\\\\-')>0,    STORE,    replace(STORE, '-', '\\\\-')),",
						"          PROJECT = iif(    instr(PROJECT, '\\\\-')>0,    PROJECT,    replace(PROJECT, '-', '\\\\-'))) ~> Updateshiphenbackslash",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          FREETEXTNUMBER,",
						"          LINENUMBER,",
						"          AMOUNTCUR,",
						"          BILLINGCLASSIFICATION,",
						"          BILLINGCODE,",
						"          CASHDISCOUNTCODE,",
						"          CASHDISCOUNTDATE,",
						"          CURRENCYCODE,",
						"          CUSTOMERACCOUNT,",
						"          CUSTOMERREFERENCE,",
						"          CUSTOMERREQUISITION,",
						"          DEFAULTDIMENSIONDISPLAYVALUE,",
						"          DESCRIPTION,",
						"          DOCUMENTDATE,",
						"          DUEDATE,",
						"          EINVOICEACCOUNTCODE,",
						"          EINVOICEISLINESPECIFIC,",
						"          HEADERDEFAULTDIMENSIONDISPLAYVALUE,",
						"          INCLTAX,",
						"          INVOICEACCOUNT,",
						"          INVOICEDATE,",
						"          INVOICETXT,",
						"          LEDGERDIMENSIONDISPLAYVALUE,",
						"          MBSAXINVOICEID,",
						"          MBSOURACCOUNTNUM,",
						"          MBSSALESCATEGORYNAME,",
						"          METHODOFPAYMENT,",
						"          OVERRIDESALESTAX,",
						"          POSTINGPROFILE,",
						"          QUANTITY,",
						"          SALESTAXGROUP,",
						"          SALESTAXITEMGROUP,",
						"          TERMSOFPAYMENT,",
						"          UNITPRICE",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_FTI_CSV_MSI')]",
				"[concat(variables('factoryId'), '/datasets/DS_CSV_CRLF_MSI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Core_Transformation_GeneralJournal')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Core_Integrations"
				},
				"type": "MappingDataFlow",
				"connectVia": {
					"referenceName": "shir-dev-core",
					"type": "IntegrationRuntimeReference"
				},
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_GJ_CSV_MSI",
								"type": "DatasetReference"
							},
							"name": "Source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_CSV_CRLF_MSI",
								"type": "DatasetReference"
							},
							"name": "Sink"
						}
					],
					"transformations": [
						{
							"name": "Concatenate"
						},
						{
							"name": "select1"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "filter3"
						},
						{
							"name": "Updateshiphenbackslash"
						}
					],
					"scriptLines": [
						"parameters{",
						"     FileName as string,",
						"     ProcessFileName as string",
						"}",
						"source(output(",
						"          Date as string,",
						"          {Account type} as string,",
						"          {Main Account} as string,",
						"          {Business Unit} as string,",
						"          Department as string,",
						"          {Cost Centre} as string,",
						"          Franchisee as string,",
						"          Store as string,",
						"          Project as string,",
						"          Consol_Entity as string,",
						"          Employee as string,",
						"          Product as string,",
						"          Description as string,",
						"          Debit as string,",
						"          Credit as string,",
						"          {Offset Account Type} as string,",
						"          {Offset Account} as string,",
						"          {Offset Business Unit} as string,",
						"          {Offset Department} as string,",
						"          {Offset Cost Centre} as string,",
						"          {Offset Franchisee} as string,",
						"          {Offset Store} as string,",
						"          {Offset Project} as string,",
						"          {Offset Consol_Entity} as string,",
						"          {Offset Employee} as string,",
						"          {Offset Product} as string,",
						"          Company as string,",
						"          {Offset Company} as string,",
						"          {Offset Description} as string,",
						"          Currency as string,",
						"          {Journal name} as string,",
						"          {Is Reverse Entry} as string,",
						"          {Reverse date} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     skipLines: 2) ~> Source",
						"Updateshiphenbackslash derive(ACCOUNTDISPLAYVALUE = iif(upper({Account type}) == 'LEDGER',\r",
						"concat({Main Account},'-',{Business Unit},'-',Department,'-',{Cost Centre},'-',Employee,'-',Franchisee,'--',Product,'-',Project,'-',Store,'-',Consol_Entity)\r",
						",toString({Main Account})),",
						"          DEFAULTDIMENSIONDISPLAYVALUE = iif(upper({Account type}) != 'LEDGER',\r",
						"concat({Business Unit},'-',Department,'-',{Cost Centre},'-',Employee,'-',Franchisee,'--',Product,'-',Project,'-',Store,'-',Consol_Entity)\r",
						",''),",
						"          OFFSETACCOUNTDISPLAYVALUE = iif(upper({Offset Account Type}) == 'LEDGER',\r",
						"concat({Offset Account},'-',{Offset Business Unit}  ,'-',{Offset Department},'-',{Offset Cost Centre},'-',{Offset Employee},'-',{Offset Franchisee},'--',{Offset Product},'-',{Offset Project},'-',{Offset Store},'-',{Offset Consol_Entity})\r",
						",{Offset Account}),",
						"          JOURNALBATCHNUMBER = 'JOURNALBATCHNUMBER',",
						"          EXCHANGERATE = 100.000000,",
						"          {VOUCHER TBD} = 1,",
						"          {POSTINGLAYER TBD} = 'Current',",
						"          {POSTINGPROFILE TBD} = iif({Account type} == 'Cust', 'STD', 'STD'),",
						"          REVERSEENTRY = {Is Reverse Entry},",
						"          REVERSEDATE = {Reverse date},",
						"          JOURNALNAME = {Journal name},",
						"          LINENUMBER = LINENUMBER1 - 0.000000,",
						"          OFFSETDEFAULTDIMENSIONDISPLAYVALUE = iif(upper({Offset Account Type}) != 'LEDGER',\r",
						"concat({Offset Business Unit}  ,'-',{Offset Department},'-',{Offset Cost Centre},'-',{Offset Employee},'-',{Offset Franchisee},'--',{Offset Product},'-',{Offset Project},'-',{Offset Store},'-',{Offset Consol_Entity})\r",
						",''),",
						"          TEXT = Description,",
						"          DUE = '',",
						"          INVOICE = '',",
						"          POSTINGTYPE = '',",
						"          TAXCODE = '',",
						"          DESCRIPTION = $ProcessFileName) ~> Concatenate",
						"Concatenate select(mapColumn(",
						"          TRANSDATE = Date,",
						"          ACCOUNTTYPE = {Account type},",
						"          DESCRIPTION = Concatenate@DESCRIPTION,",
						"          DEBITAMOUNT = Debit,",
						"          CREDITAMOUNT = Credit,",
						"          OFFSETACCOUNTTYPE = {Offset Account Type},",
						"          OFFSETCOMPANY = {Offset Company},",
						"          OFFSETTEXT = {Offset Description},",
						"          CURRENCYCODE = Currency,",
						"          ACCOUNTDISPLAYVALUE,",
						"          DEFAULTDIMENSIONDISPLAYVALUE,",
						"          OFFSETACCOUNTDISPLAYVALUE,",
						"          JOURNALBATCHNUMBER,",
						"          LINENUMBER,",
						"          EXCHANGERATE,",
						"          VOUCHER = {VOUCHER TBD},",
						"          POSTINGPROFILE = {POSTINGPROFILE TBD},",
						"          REVERSEENTRY,",
						"          REVERSEDATE,",
						"          JOURNALNAME,",
						"          OFFSETDEFAULTDIMENSIONDISPLAYVALUE,",
						"          TEXT,",
						"          DUE,",
						"          INVOICE,",
						"          POSTINGTYPE,",
						"          TAXCODE,",
						"          COMPANY = Company,",
						"          POSTINGLAYER = {POSTINGLAYER TBD}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"filter3 keyGenerate(output(LINENUMBER1 as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"Source filter({Account type} != '') ~> filter2",
						"filter2 filter({Account type} != 'Account type') ~> filter3",
						"surrogateKey1 derive({Main Account} = iif(\r",
						"    instr({Main Account}, '\\\\-')>0,\r",
						"    {Main Account},\r",
						"    replace({Main Account}, '-', '\\\\-')\r",
						"),",
						"          Project = iif(    instr(Project, '\\\\-')>0,    Project,    replace(Project, '-', '\\\\-')),",
						"          {Business Unit} = iif(    instr({Business Unit}, '\\\\-')>0,    {Business Unit},    replace({Business Unit}, '-', '\\\\-')),",
						"          Department = iif(    instr(Department, '\\\\-')>0,    Department,    replace(Department, '-', '\\\\-')),",
						"          {Cost Centre} = iif(    instr({Cost Centre}, '\\\\-')>0,    {Cost Centre},    replace({Cost Centre}, '-', '\\\\-')),",
						"          Franchisee = iif(    instr(Franchisee, '\\\\-')>0,    Franchisee,    replace(Franchisee, '-', '\\\\-')),",
						"          Store = iif(    instr(Store, '\\\\-')>0,    Store,    replace(Store, '-', '\\\\-')),",
						"          Consol_Entity = iif(    instr(Consol_Entity, '\\\\-')>0,    Consol_Entity,    replace(Consol_Entity, '-', '\\\\-')),",
						"          Employee = iif(    instr(Employee, '\\\\-')>0,    Employee,    replace(Employee, '-', '\\\\-')),",
						"          Product = iif(    instr(Product, '\\\\-')>0,    Product,    replace(Product, '-', '\\\\-'))) ~> Updateshiphenbackslash",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[($FileName)],",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Sink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_GJ_CSV_MSI')]",
				"[concat(variables('factoryId'), '/datasets/DS_CSV_CRLF_MSI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Core_Transformation_SelfBilling')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Core_Integrations"
				},
				"type": "MappingDataFlow",
				"connectVia": {
					"referenceName": "shir-dev-core",
					"type": "IntegrationRuntimeReference"
				},
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SB_CSV_MSI",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_CSV_CRLF_MSI",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1Concatenations"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "select2"
						},
						{
							"name": "select3"
						},
						{
							"name": "filter2"
						},
						{
							"name": "filter3"
						},
						{
							"name": "Updateshiphenbackslash"
						}
					],
					"scriptLines": [
						"parameters{",
						"     FileName as string",
						"}",
						"source(output(",
						"          COMPANY as string,",
						"          VOUCHER as string,",
						"          INVOICEDATE as string,",
						"          VENDOR as string,",
						"          DESCRIPTION as string,",
						"          CREDIT as string,",
						"          DEBIT as string,",
						"          CURRENCY as string,",
						"          {MAIN ACCOUNT} as string,",
						"          {BUSINESS UNIT} as string,",
						"          DEPARTMENT as string,",
						"          {COST CENTRE} as string,",
						"          STORE as string,",
						"          FRANCHISEE as string,",
						"          PROJECT as string,",
						"          CONSOL_ENTITY as string,",
						"          EMPLOYEE as string,",
						"          PRODUCT as string,",
						"          {ITEM VAT GROUP} as string,",
						"          APPROVER as string,",
						"          PROCUREMENTCATEGORYNAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     skipLines: 2) ~> source1",
						"Updateshiphenbackslash derive(JOURNALBATCHNUMBER = '',",
						"          INVOICE = '',",
						"          DEFAULTDIMENSIONDISPLAYVALUE = iif(VENDOR == '','',\r",
						"concat({BUSINESS UNIT},'-',DEPARTMENT,'-',{COST CENTRE},'-',EMPLOYEE,'-',FRANCHISEE,'--',PRODUCT,'-',PROJECT,'-',STORE,'-',CONSOL_ENTITY)\r",
						"),",
						"          OFFSETACCOUNTTYPE = 'Ledger',",
						"          OFFSETACCOUNTDISPLAYVALUE = iif(VENDOR == '','',\r",
						"concat({MAIN ACCOUNT},'-',{BUSINESS UNIT}  ,'-',DEPARTMENT,'-',{COST CENTRE},'-',EMPLOYEE,'-',FRANCHISEE,'--',PRODUCT,'-',PROJECT,'-',STORE,'-',CONSOL_ENTITY)\r",
						"),",
						"          OFFSETCOMPANY = COMPANY,",
						"          APPROVED = 'Yes',",
						"          APPROVERNUMBER = APPROVER,",
						"          LINENUMBER = LINENUMBER1,",
						"          OFFSETDEFAULTDIMENSIONDISPLAYVALUE = '',",
						"          PAYMTERMID = '',",
						"          PAYMMODEID = '',",
						"          PROCUREMENTCATEGORY = 'CAPEX',",
						"          ACCOUNTDISPLAYVALUE = iif(VENDOR != '',VENDOR,\r",
						"concat({MAIN ACCOUNT},'-',{BUSINESS UNIT}  ,'-',DEPARTMENT,'-',{COST CENTRE},'-',EMPLOYEE,'-',FRANCHISEE,'--',PRODUCT,'-',PROJECT,'-',STORE,'-',CONSOL_ENTITY)\r",
						"),",
						"          ASSETID = '',",
						"          ASSETTRANSTYPE = '',",
						"          BANKACCOUNTID = '',",
						"          BOOKID = '',",
						"          CASHDISCOUNT = '',",
						"          CASHDISCOUNTAMOUNT = '',",
						"          CASHDISCOUNTDATE = '',",
						"          CUSTVENDBANKACCOUNTID = '',",
						"          DATE = INVOICEDATE,",
						"          DELIVERYDATE = '',",
						"          DOCUMENT = '',",
						"          EXCHRATE = 100.00,",
						"          EXCHRATESECOND = 100.00,",
						"          INVOICEDATE = INVOICEDATE,",
						"          ISWITHHOLDINGTAXCALCULATE = '',",
						"          ITEMWITHHOLDINGTAXGROUPCODE = '',",
						"          LISTCODE = '',",
						"          METHODOFPAYMENT = '',",
						"          OFFSETTRANSACTIONTEXT = '',",
						"          OVERRIDESALESTAX = '',",
						"          PAYMENTSPECIFICATION = '',",
						"          PAYMID = '',",
						"          REMITTANCEADDRESSCITY = '',",
						"          REMITTANCEADDRESSCOUNTRY = '',",
						"          REMITTANCEADDRESSCOUNTRYISOCODE = '',",
						"          REMITTANCEADDRESSCOUNTY = '',",
						"          REMITTANCEADDRESSDESCRIPTION = '',",
						"          REMITTANCEADDRESSDISTRICTNAME = '',",
						"          REMITTANCEADDRESSLATITUDE = '',",
						"          REMITTANCEADDRESSLOCATIONID = '',",
						"          REMITTANCEADDRESSLONGITUDE = '',",
						"          REMITTANCEADDRESSSTATE = '',",
						"          REMITTANCEADDRESSSTREET = '',",
						"          REMITTANCEADDRESSTIMEZONE = '',",
						"          REMITTANCEADDRESSVALIDFROM = '',",
						"          REMITTANCEADDRESSVALIDTO = '',",
						"          REMITTANCEADDRESSZIPCODE = '',",
						"          REPORTINGCURRENCYEXCHRATE = 100.00,",
						"          SALESTAXCODE = '',",
						"          TAXEXEMPTNUMBER = '',",
						"          TERMSOFPAYMENT = '',",
						"          TRANSACTIONTYPE = '',",
						"          VOUCHER = VOUCHER,",
						"          DUEDATE = '',",
						"          ACCOUNTTYPE = iif(VENDOR == '','Ledger','Vendor'),",
						"          ITEMSALESTAXGROUP = {ITEM VAT GROUP},",
						"          POSTINGPROFILE = '') ~> derivedColumn1Concatenations",
						"filter3 keyGenerate(output(LINENUMBER1 as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"derivedColumn1Concatenations select(mapColumn(",
						"          ITEMSALESTAXGROUP,",
						"          DUEDATE,",
						"          ACCOUNTTYPE,",
						"          DESCRIPTION,",
						"          DEBIT,",
						"          CREDIT,",
						"          OFFSETACCOUNTTYPE,",
						"          CURRENCY,",
						"          POSTINGPROFILE,",
						"          COMPANY,",
						"          JOURNALBATCHNUMBER,",
						"          INVOICE,",
						"          DEFAULTDIMENSIONDISPLAYVALUE,",
						"          OFFSETACCOUNTDISPLAYVALUE,",
						"          OFFSETCOMPANY,",
						"          APPROVED,",
						"          APPROVERNUMBER,",
						"          LINENUMBER,",
						"          ASSETID,",
						"          ASSETTRANSTYPE,",
						"          BANKACCOUNTID,",
						"          BOOKID,",
						"          CASHDISCOUNT,",
						"          CASHDISCOUNTAMOUNT,",
						"          CASHDISCOUNTDATE,",
						"          CUSTVENDBANKACCOUNTID,",
						"          DATE,",
						"          DELIVERYDATE,",
						"          DOCUMENT,",
						"          EXCHRATE,",
						"          EXCHRATESECOND,",
						"          INVOICEDATE,",
						"          ISWITHHOLDINGTAXCALCULATE,",
						"          ITEMWITHHOLDINGTAXGROUPCODE,",
						"          LISTCODE,",
						"          METHODOFPAYMENT,",
						"          OFFSETTRANSACTIONTEXT,",
						"          OVERRIDESALESTAX,",
						"          PAYMENTSPECIFICATION,",
						"          PAYMID,",
						"          PROCUREMENTCATEGORYNAME,",
						"          REMITTANCEADDRESSCITY,",
						"          REMITTANCEADDRESSCOUNTRY,",
						"          REMITTANCEADDRESSCOUNTRYISOCODE,",
						"          REMITTANCEADDRESSCOUNTY,",
						"          REMITTANCEADDRESSDESCRIPTION,",
						"          REMITTANCEADDRESSDISTRICTNAME,",
						"          REMITTANCEADDRESSLATITUDE,",
						"          REMITTANCEADDRESSLOCATIONID,",
						"          REMITTANCEADDRESSLONGITUDE,",
						"          REMITTANCEADDRESSSTATE,",
						"          REMITTANCEADDRESSSTREET,",
						"          REMITTANCEADDRESSTIMEZONE,",
						"          REMITTANCEADDRESSVALIDFROM,",
						"          REMITTANCEADDRESSVALIDTO,",
						"          REMITTANCEADDRESSZIPCODE,",
						"          REPORTINGCURRENCYEXCHRATE,",
						"          SALESTAXCODE,",
						"          TAXEXEMPTNUMBER,",
						"          TERMSOFPAYMENT,",
						"          TRANSACTIONTYPE,",
						"          VOUCHER,",
						"          ACCOUNTDISPLAYVALUE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"source1 select(mapColumn(",
						"          COMPANY,",
						"          VOUCHER,",
						"          INVOICEDATE,",
						"          VENDOR,",
						"          DESCRIPTION,",
						"          CREDIT,",
						"          DEBIT,",
						"          CURRENCY,",
						"          {MAIN ACCOUNT},",
						"          {BUSINESS UNIT},",
						"          DEPARTMENT,",
						"          {COST CENTRE},",
						"          STORE,",
						"          FRANCHISEE,",
						"          PROJECT,",
						"          CONSOL_ENTITY,",
						"          EMPLOYEE,",
						"          PRODUCT,",
						"          {ITEM VAT GROUP},",
						"          APPROVER,",
						"          PROCUREMENTCATEGORYNAME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"select3 filter(CURRENCY != '') ~> filter2",
						"filter2 filter(CURRENCY != 'CURRENCY') ~> filter3",
						"surrogateKey1 derive(VENDOR = iif(    instr(VENDOR, '\\\\-')>0,    VENDOR,    replace(VENDOR, '-', '\\\\-')),",
						"          {MAIN ACCOUNT} = iif(    instr({MAIN ACCOUNT}, '\\\\-')>0,   {MAIN ACCOUNT},    replace({MAIN ACCOUNT}, '-', '\\\\-')),",
						"          {BUSINESS UNIT} = iif(    instr({BUSINESS UNIT}, '\\\\-')>0,    {BUSINESS UNIT},    replace({BUSINESS UNIT}, '-', '\\\\-')),",
						"          DEPARTMENT = iif(    instr(DEPARTMENT, '\\\\-')>0,    DEPARTMENT,    replace(DEPARTMENT, '-', '\\\\-')),",
						"          {COST CENTRE} = iif(    instr({COST CENTRE}, '\\\\-')>0,    {COST CENTRE},    replace({COST CENTRE}, '-', '\\\\-')),",
						"          FRANCHISEE = iif(    instr(FRANCHISEE, '\\\\-')>0,    FRANCHISEE,    replace(FRANCHISEE, '-', '\\\\-')),",
						"          CONSOL_ENTITY = iif(    instr(CONSOL_ENTITY, '\\\\-')>0,    CONSOL_ENTITY,    replace(CONSOL_ENTITY, '-', '\\\\-')),",
						"          EMPLOYEE = iif(    instr(EMPLOYEE, '\\\\-')>0,    EMPLOYEE,    replace(EMPLOYEE, '-', '\\\\-')),",
						"          PRODUCT = iif(    instr(PRODUCT, '\\\\-')>0,    PRODUCT,    replace(PRODUCT, '-', '\\\\-')),",
						"          PROJECT = iif(    instr(PROJECT, '\\\\-')>0,    PROJECT,    replace(PROJECT, '-', '\\\\-')),",
						"          STORE = iif(    instr(STORE, '\\\\-')>0,    STORE,    replace(STORE, '-', '\\\\-'))) ~> Updateshiphenbackslash",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SB_CSV_MSI')]",
				"[concat(variables('factoryId'), '/datasets/DS_CSV_CRLF_MSI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default')]",
			"type": "Microsoft.DataFactory/factories/globalparameters",
			"apiVersion": "2018-06-01",
			"properties": {
				"ConfigurationContainer": {
					"type": "string",
					"value": "[parameters('default_properties_ConfigurationContainer_value')]"
				},
				"GeneralJournalAzureKeyVault": {
					"type": "string",
					"value": "[parameters('default_properties_GeneralJournalAzureKeyVault_value')]"
				},
				"SelfBillingAzureKeyVault": {
					"type": "string",
					"value": "[parameters('default_properties_SelfBillingAzureKeyVault_value')]"
				},
				"FreeTextInvoiceAzureKeyVault": {
					"type": "string",
					"value": "[parameters('default_properties_FreeTextInvoiceAzureKeyVault_value')]"
				},
				"GeneralJournalConfigFile": {
					"type": "string",
					"value": "[parameters('default_properties_GeneralJournalConfigFile_value')]"
				},
				"SelfBillingConfigFile": {
					"type": "string",
					"value": "[parameters('default_properties_SelfBillingConfigFile_value')]"
				},
				"FreeTextInvoiceConfigFile": {
					"type": "string",
					"value": "[parameters('default_properties_FreeTextInvoiceConfigFile_value')]"
				},
				"ConfigurationFolder": {
					"type": "string",
					"value": "[parameters('default_properties_ConfigurationFolder_value')]"
				},
				"LSMIServiceEndpoint": {
					"type": "string",
					"value": "[parameters('default_properties_LSMIServiceEndpoint_value')]"
				},
				"ErrorStorageAccountName": {
					"type": "string",
					"value": "[parameters('default_properties_ErrorStorageAccountName_value')]"
				},
				"ParagonOutboundConfigFile": {
					"type": "string",
					"value": "[parameters('default_properties_ParagonOutboundConfigFile_value')]"
				},
				"OutboundOnPremStorageHost": {
					"type": "string",
					"value": "[parameters('default_properties_OutboundOnPremStorageHost_value')]"
				},
				"OnPremStorageUserName": {
					"type": "string",
					"value": "[parameters('default_properties_OnPremStorageUserName_value')]"
				},
				"ParagonAzureKeyVault": {
					"type": "string",
					"value": "[parameters('default_properties_ParagonAzureKeyVault_value')]"
				},
				"LSMIParagonServiceEndPoint": {
					"type": "string",
					"value": "[parameters('default_properties_LSMIParagonServiceEndPoint_value')]"
				},
				"ParagonInboundConfigFile": {
					"type": "string",
					"value": "[parameters('default_properties_ParagonInboundConfigFile_value')]"
				},
				"OnPremStorageHostInbound": {
					"type": "string",
					"value": "[parameters('default_properties_OnPremStorageHostInbound_value')]"
				},
				"CoreSuccessEmailLogicAppSecret": {
					"type": "string",
					"value": "[parameters('default_properties_CoreSuccessEmailLogicAppSecret_value')]"
				},
				"CoreErrorEmailLogicAppSecret": {
					"type": "string",
					"value": "[parameters('default_properties_CoreErrorEmailLogicAppSecret_value')]"
				},
				"CoreAzureKeyVault": {
					"type": "string",
					"value": "[parameters('default_properties_CoreAzureKeyVault_value')]"
				}
			},
			"dependsOn": []
		}
	]
}
